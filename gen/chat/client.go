// Package chatgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package chatgen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for MuteStatus.
const (
	N0  MuteStatus = 0
	N1  MuteStatus = 1
	N16 MuteStatus = 16
	N2  MuteStatus = 2
	N4  MuteStatus = 4
	N8  MuteStatus = 8
)

// ChatMessage defines model for ChatMessage.
type ChatMessage struct {
	// ClientName What client software sent this message
	ClientName *string `json:"clientName"`

	// Message Content of the message
	Message *string `json:"message"`

	// Name If available the name of the sender
	Name *string `json:"name"`

	// Prefix What color/prefix the sender has, if empty the color will be white and message should be gray
	Prefix *string `json:"prefix"`

	// Uuid The uuid of the sender
	Uuid *string `json:"uuid"`
}

// CientCreationResponse Contains the client and its api key (only place where the api key is visible)
type CientCreationResponse struct {
	ApiKey *string `json:"apiKey"`

	// Client Client software capeable of sending messages
	Client *ModelClient `json:"client,omitempty"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	Message *string `json:"message"`
	Slug    *string `json:"slug"`
	Trace   *string `json:"trace"`
}

// ModelClient Client software capeable of sending messages
type ModelClient struct {
	// Contact User who is responsible for this client
	Contact *string `json:"contact"`

	// Created When this was created
	Created *time.Time `json:"created,omitempty"`

	// Name Uuid of the target user
	Name *string `json:"name"`

	// Quota Per minute send quota
	Quota *int32 `json:"quota,omitempty"`

	// WebHook Webhook to post new messages too
	WebHook *string `json:"webHook"`

	// WebhookAuth Auth header value for the webhook
	WebhookAuth *string `json:"webhookAuth"`
}

// Mute defines model for Mute.
type Mute struct {
	// ClientId What client software added the mute
	ClientId *int32 `json:"clientId,omitempty"`

	// Expires Until when this is active
	Expires *time.Time `json:"expires,omitempty"`

	// Message Message for the user
	Message *string `json:"message"`

	// Muter Uuid of user performing the mute
	Muter *string `json:"muter"`

	// Reason Internal reason
	Reason *string     `json:"reason"`
	Status *MuteStatus `json:"status,omitempty"`

	// Timestamp When this was created
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// UnMuteClientId What client software added the mute
	UnMuteClientId *int32 `json:"unMuteClientId,omitempty"`

	// UnMuter Uuid of user performing the mute
	UnMuter *string `json:"unMuter"`

	// Uuid Uuid of the target user
	Uuid *string `json:"uuid"`
}

// MuteStatus defines model for MuteStatus.
type MuteStatus int32

// UnMute defines model for UnMute.
type UnMute struct {
	// Reason Internal reason
	Reason *string `json:"reason"`

	// UnMuter Uuid of user performing the mute
	UnMuter *string `json:"unMuter"`

	// Uuid Uuid of the target user
	Uuid *string `json:"uuid"`
}

// DeleteApiChatMuteParams defines parameters for DeleteApiChatMute.
type DeleteApiChatMuteParams struct {
	Authorization *string `json:"authorization,omitempty"`
}

// PostApiChatMuteParams defines parameters for PostApiChatMute.
type PostApiChatMuteParams struct {
	Authorization *string `json:"authorization,omitempty"`
}

// GetApiChatMutesParams defines parameters for GetApiChatMutes.
type GetApiChatMutesParams struct {
	Authorization *string `json:"authorization,omitempty"`
}

// PostApiChatSendParams defines parameters for PostApiChatSend.
type PostApiChatSendParams struct {
	Authorization *string `json:"authorization,omitempty"`
}

// PostApiChatInternalClientApplicationWildcardPlusJSONRequestBody defines body for PostApiChatInternalClient for application/*+json ContentType.
type PostApiChatInternalClientApplicationWildcardPlusJSONRequestBody = ModelClient

// PostApiChatInternalClientJSONRequestBody defines body for PostApiChatInternalClient for application/json ContentType.
type PostApiChatInternalClientJSONRequestBody = ModelClient

// DeleteApiChatMuteApplicationWildcardPlusJSONRequestBody defines body for DeleteApiChatMute for application/*+json ContentType.
type DeleteApiChatMuteApplicationWildcardPlusJSONRequestBody = UnMute

// DeleteApiChatMuteJSONRequestBody defines body for DeleteApiChatMute for application/json ContentType.
type DeleteApiChatMuteJSONRequestBody = UnMute

// PostApiChatMuteApplicationWildcardPlusJSONRequestBody defines body for PostApiChatMute for application/*+json ContentType.
type PostApiChatMuteApplicationWildcardPlusJSONRequestBody = Mute

// PostApiChatMuteJSONRequestBody defines body for PostApiChatMute for application/json ContentType.
type PostApiChatMuteJSONRequestBody = Mute

// PostApiChatSendApplicationWildcardPlusJSONRequestBody defines body for PostApiChatSend for application/*+json ContentType.
type PostApiChatSendApplicationWildcardPlusJSONRequestBody = ChatMessage

// PostApiChatSendJSONRequestBody defines body for PostApiChatSend for application/json ContentType.
type PostApiChatSendJSONRequestBody = ChatMessage

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApiChatInternalClientWithBody request with any body
	PostApiChatInternalClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiChatInternalClientWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiChatInternalClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiChatInternalClient(ctx context.Context, body PostApiChatInternalClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteApiChatMuteWithBody request with any body
	DeleteApiChatMuteWithBody(ctx context.Context, params *DeleteApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiChatMuteWithApplicationWildcardPlusJSONBody(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteApiChatMute(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiChatMuteWithBody request with any body
	PostApiChatMuteWithBody(ctx context.Context, params *PostApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiChatMuteWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiChatMute(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetApiChatMutes request
	GetApiChatMutes(ctx context.Context, params *GetApiChatMutesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostApiChatSendWithBody request with any body
	PostApiChatSendWithBody(ctx context.Context, params *PostApiChatSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiChatSendWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApiChatSend(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApiChatInternalClientWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatInternalClientRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatInternalClientWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApiChatInternalClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatInternalClientRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatInternalClient(ctx context.Context, body PostApiChatInternalClientJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatInternalClientRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiChatMuteWithBody(ctx context.Context, params *DeleteApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiChatMuteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiChatMuteWithApplicationWildcardPlusJSONBody(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiChatMuteRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteApiChatMute(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteApiChatMuteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatMuteWithBody(ctx context.Context, params *PostApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatMuteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatMuteWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatMuteRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatMute(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatMuteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetApiChatMutes(ctx context.Context, params *GetApiChatMutesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiChatMutesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatSendWithBody(ctx context.Context, params *PostApiChatSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatSendRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatSendWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatSendRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApiChatSend(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApiChatSendRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApiChatInternalClientRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiChatInternalClient builder with application/*+json body
func NewPostApiChatInternalClientRequestWithApplicationWildcardPlusJSONBody(server string, body PostApiChatInternalClientApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiChatInternalClientRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApiChatInternalClientRequest calls the generic PostApiChatInternalClient builder with application/json body
func NewPostApiChatInternalClientRequest(server string, body PostApiChatInternalClientJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiChatInternalClientRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApiChatInternalClientRequestWithBody generates requests for PostApiChatInternalClient with any type of body
func NewPostApiChatInternalClientRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Chat/internal/client")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteApiChatMuteRequestWithApplicationWildcardPlusJSONBody calls the generic DeleteApiChatMute builder with application/*+json body
func NewDeleteApiChatMuteRequestWithApplicationWildcardPlusJSONBody(server string, params *DeleteApiChatMuteParams, body DeleteApiChatMuteApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiChatMuteRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewDeleteApiChatMuteRequest calls the generic DeleteApiChatMute builder with application/json body
func NewDeleteApiChatMuteRequest(server string, params *DeleteApiChatMuteParams, body DeleteApiChatMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteApiChatMuteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewDeleteApiChatMuteRequestWithBody generates requests for DeleteApiChatMute with any type of body
func NewDeleteApiChatMuteRequestWithBody(server string, params *DeleteApiChatMuteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Chat/mute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam0)
		}

	}

	return req, nil
}

// NewPostApiChatMuteRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiChatMute builder with application/*+json body
func NewPostApiChatMuteRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiChatMuteParams, body PostApiChatMuteApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiChatMuteRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiChatMuteRequest calls the generic PostApiChatMute builder with application/json body
func NewPostApiChatMuteRequest(server string, params *PostApiChatMuteParams, body PostApiChatMuteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiChatMuteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiChatMuteRequestWithBody generates requests for PostApiChatMute with any type of body
func NewPostApiChatMuteRequestWithBody(server string, params *PostApiChatMuteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Chat/mute")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam0)
		}

	}

	return req, nil
}

// NewGetApiChatMutesRequest generates requests for GetApiChatMutes
func NewGetApiChatMutesRequest(server string, params *GetApiChatMutesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Chat/mutes")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam0)
		}

	}

	return req, nil
}

// NewPostApiChatSendRequestWithApplicationWildcardPlusJSONBody calls the generic PostApiChatSend builder with application/*+json body
func NewPostApiChatSendRequestWithApplicationWildcardPlusJSONBody(server string, params *PostApiChatSendParams, body PostApiChatSendApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiChatSendRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostApiChatSendRequest calls the generic PostApiChatSend builder with application/json body
func NewPostApiChatSendRequest(server string, params *PostApiChatSendParams, body PostApiChatSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApiChatSendRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostApiChatSendRequestWithBody generates requests for PostApiChatSend with any type of body
func NewPostApiChatSendRequestWithBody(server string, params *PostApiChatSendParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/api/Chat/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		if params.Authorization != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "authorization", runtime.ParamLocationHeader, *params.Authorization)
			if err != nil {
				return nil, err
			}

			req.Header.Set("authorization", headerParam0)
		}

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApiChatInternalClientWithBodyWithResponse request with any body
	PostApiChatInternalClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiChatInternalClientResponse, error)

	PostApiChatInternalClientWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiChatInternalClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatInternalClientResponse, error)

	PostApiChatInternalClientWithResponse(ctx context.Context, body PostApiChatInternalClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatInternalClientResponse, error)

	// DeleteApiChatMuteWithBodyWithResponse request with any body
	DeleteApiChatMuteWithBodyWithResponse(ctx context.Context, params *DeleteApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiChatMuteResponse, error)

	DeleteApiChatMuteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiChatMuteResponse, error)

	DeleteApiChatMuteWithResponse(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiChatMuteResponse, error)

	// PostApiChatMuteWithBodyWithResponse request with any body
	PostApiChatMuteWithBodyWithResponse(ctx context.Context, params *PostApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiChatMuteResponse, error)

	PostApiChatMuteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatMuteResponse, error)

	PostApiChatMuteWithResponse(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatMuteResponse, error)

	// GetApiChatMutesWithResponse request
	GetApiChatMutesWithResponse(ctx context.Context, params *GetApiChatMutesParams, reqEditors ...RequestEditorFn) (*GetApiChatMutesResponse, error)

	// PostApiChatSendWithBodyWithResponse request with any body
	PostApiChatSendWithBodyWithResponse(ctx context.Context, params *PostApiChatSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiChatSendResponse, error)

	PostApiChatSendWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatSendResponse, error)

	PostApiChatSendWithResponse(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatSendResponse, error)
}

type PostApiChatInternalClientResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CientCreationResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiChatInternalClientResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiChatInternalClientResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteApiChatMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *UnMute
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r DeleteApiChatMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteApiChatMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiChatMuteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Mute
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiChatMuteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiChatMuteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetApiChatMutesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Mute
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r GetApiChatMutesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiChatMutesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostApiChatSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ChatMessage
	JSON400      *ErrorResponse
	JSON500      *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r PostApiChatSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApiChatSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApiChatInternalClientWithBodyWithResponse request with arbitrary body returning *PostApiChatInternalClientResponse
func (c *ClientWithResponses) PostApiChatInternalClientWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiChatInternalClientResponse, error) {
	rsp, err := c.PostApiChatInternalClientWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatInternalClientResponse(rsp)
}

func (c *ClientWithResponses) PostApiChatInternalClientWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApiChatInternalClientApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatInternalClientResponse, error) {
	rsp, err := c.PostApiChatInternalClientWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatInternalClientResponse(rsp)
}

func (c *ClientWithResponses) PostApiChatInternalClientWithResponse(ctx context.Context, body PostApiChatInternalClientJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatInternalClientResponse, error) {
	rsp, err := c.PostApiChatInternalClient(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatInternalClientResponse(rsp)
}

// DeleteApiChatMuteWithBodyWithResponse request with arbitrary body returning *DeleteApiChatMuteResponse
func (c *ClientWithResponses) DeleteApiChatMuteWithBodyWithResponse(ctx context.Context, params *DeleteApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteApiChatMuteResponse, error) {
	rsp, err := c.DeleteApiChatMuteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiChatMuteResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiChatMuteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiChatMuteResponse, error) {
	rsp, err := c.DeleteApiChatMuteWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiChatMuteResponse(rsp)
}

func (c *ClientWithResponses) DeleteApiChatMuteWithResponse(ctx context.Context, params *DeleteApiChatMuteParams, body DeleteApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteApiChatMuteResponse, error) {
	rsp, err := c.DeleteApiChatMute(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteApiChatMuteResponse(rsp)
}

// PostApiChatMuteWithBodyWithResponse request with arbitrary body returning *PostApiChatMuteResponse
func (c *ClientWithResponses) PostApiChatMuteWithBodyWithResponse(ctx context.Context, params *PostApiChatMuteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiChatMuteResponse, error) {
	rsp, err := c.PostApiChatMuteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatMuteResponse(rsp)
}

func (c *ClientWithResponses) PostApiChatMuteWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatMuteResponse, error) {
	rsp, err := c.PostApiChatMuteWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatMuteResponse(rsp)
}

func (c *ClientWithResponses) PostApiChatMuteWithResponse(ctx context.Context, params *PostApiChatMuteParams, body PostApiChatMuteJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatMuteResponse, error) {
	rsp, err := c.PostApiChatMute(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatMuteResponse(rsp)
}

// GetApiChatMutesWithResponse request returning *GetApiChatMutesResponse
func (c *ClientWithResponses) GetApiChatMutesWithResponse(ctx context.Context, params *GetApiChatMutesParams, reqEditors ...RequestEditorFn) (*GetApiChatMutesResponse, error) {
	rsp, err := c.GetApiChatMutes(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiChatMutesResponse(rsp)
}

// PostApiChatSendWithBodyWithResponse request with arbitrary body returning *PostApiChatSendResponse
func (c *ClientWithResponses) PostApiChatSendWithBodyWithResponse(ctx context.Context, params *PostApiChatSendParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApiChatSendResponse, error) {
	rsp, err := c.PostApiChatSendWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatSendResponse(rsp)
}

func (c *ClientWithResponses) PostApiChatSendWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatSendResponse, error) {
	rsp, err := c.PostApiChatSendWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatSendResponse(rsp)
}

func (c *ClientWithResponses) PostApiChatSendWithResponse(ctx context.Context, params *PostApiChatSendParams, body PostApiChatSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApiChatSendResponse, error) {
	rsp, err := c.PostApiChatSend(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApiChatSendResponse(rsp)
}

// ParsePostApiChatInternalClientResponse parses an HTTP response from a PostApiChatInternalClientWithResponse call
func ParsePostApiChatInternalClientResponse(rsp *http.Response) (*PostApiChatInternalClientResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiChatInternalClientResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CientCreationResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 500:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteApiChatMuteResponse parses an HTTP response from a DeleteApiChatMuteWithResponse call
func ParseDeleteApiChatMuteResponse(rsp *http.Response) (*DeleteApiChatMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteApiChatMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest UnMute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 500:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiChatMuteResponse parses an HTTP response from a PostApiChatMuteWithResponse call
func ParsePostApiChatMuteResponse(rsp *http.Response) (*PostApiChatMuteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiChatMuteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Mute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 500:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetApiChatMutesResponse parses an HTTP response from a GetApiChatMutesWithResponse call
func ParseGetApiChatMutesResponse(rsp *http.Response) (*GetApiChatMutesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiChatMutesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Mute
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 500:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostApiChatSendResponse parses an HTTP response from a PostApiChatSendWithResponse call
func ParsePostApiChatSendResponse(rsp *http.Response) (*PostApiChatSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApiChatSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ChatMessage
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 400:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON400 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 500:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON500 = &dest

	case rsp.StatusCode == 200:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 400:
	// Content-type (text/plain) unsupported

	case rsp.StatusCode == 500:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xaW3PbNhP9Kxh830MvbORLmunoLVE6aaZ1xxPX04eMH1bkSkRMAgiwlKx69N87S5AS",
	"dbOoizNNq6dQ5OLsYnfPwZLxo4xNbo1GTV52H6WPU8yhvOylQFfoPQyRf0KSKFJGQ3btjEVHCr3sDiDz",
	"GEnbuPUo40yhpt8hLxcm6GOnLK+VXflnCiSCgfBmQGNwKDz/olR5kVcOI6mLLIN+hrJLrsBI0sSi7EpP",
	"TumhnEYyn8e26KJnNDGgGQhKcRdIvTbk9wMBI1Dl0hKRzWp0jzpBJyOZw8NvqIeUyu75qxa+rMOBetiU",
	"IJMZ1wkmDTciBR8JNRCYW5qUD0pLMVZZJvooxqkiFKCTetfCp6bIEn42dDBpk4SiUMlqWH+kKPjJU/u+",
	"vNgKP53dMf1PGBM77HEz9BwCu/qA3hrtt7fcas1BaR9yEtqL06DIC7BK3ONEfGN0NhE2g5gThS4Us36q",
	"vBgpr/oZfiuXGxqs+hUnfLU1e8E3m/7f4UB25f86c4Z1Knp1rkyCWS+Yrs3Jz84Z1zoXi9E2iLE1XJ8V",
	"w1aG5CBuA7luM83d7ljWJaGIwWJJQzMoO1DpYd3pfqVqMfdETKu9fOvRiXFquOYu5JjrLgbGBRWqitiC",
	"LDG3LSbraIw6gI3Bi9oskgPjciDZlQkQ/kAqZ2FqKUS3Df4RuCGSKPweJIzk58IQrDq4RidypQsK/BbB",
	"rBG00nR5MQ9YacIhOkYcY/8XY+7XJAL7qTH3goywxpPQOJ6VTJAxbbI8DhivC97gsgO+K1IE1scRZEVd",
	"RxTVMrmXKl0VtN+59z5peepBkmASjij21SrN+GCVC96WekOTyljWqq5TXkBMaoSte27jeVoNAbO0Vj23",
	"/YAuCN3mLmYYYdFxdMzjRiJ2bWeH4Bl75eTWhE5DJiqDFlCegAq/Vb8Lwptgyb2jcvQEuT22DBSaHfWe",
	"v62Coy9TrPXzxbG0bROVb2Z1RV3ksvvxLDqPLqKX0U/R+au7Vkm61XtowhFb899cJL6l9MCwT1LEK+XN",
	"/YTfQWQkR+h8iGB0ztEZixqskl15+eLsxTmf/EBpme8OWNXhZR1VZbgzH8n4AOJ/uUDltMmkktfG02ur",
	"eFFdlV49ADj8XKCnNyaZ1CNFPcVYm6m4ROl89/2nqshBIHYd/5pYhyERPtBBENNSTsPcWSb04uzsiZ3v",
	"5mr9pL9n3FvAbAbqCGjT5ZH0pohj9KXu/3jE1CwO/HumZAPIjqlYRllNAboROlHalV58kefgJjywlyec",
	"AKHHYkYigqGX3Y/lFwV5xwvmLM0rSU0ww3C1SM635f2KnldBzCw4yJHQMeqj5L3JMADKenSWUFBqnPqr",
	"RJJRY+vLWnT3XCyvzovDCN4A2aMhZqtXavgWCAT0TUHzY+I5qX+kfezX0ZvT0GDzy/8om99AIj4EApxE",
	"bYuo8bsrvx3zqxDoevhZ0rdo+5zxdQnZEWTsEPL/UyTsCHvYr3dP4nUSry8lXivDWUmjIa7Rs3fYlDP/",
	"PHp2AJcVYe7bcWv2PgrOweSpYh8BdE3xD0E9ycJJFnaXhXdIArKs+kgs8orBT6mBR520+opyw4ZfzXTT",
	"/H/uw4acZaR9PmosQDzvx5hjR7vnh5fFHZ/E7CRmO4sZC44X0PhTj2Udm07/DgAA//9wb8+Z6iIAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
