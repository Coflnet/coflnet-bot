// Package mcconnectgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package mcconnectgen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// ConnectionRequest defines model for ConnectionRequest.
type ConnectionRequest struct {
	Code        *int32 `json:"code,omitempty"`
	IsConnected *bool  `json:"isConnected,omitempty"`
}

// MinecraftUuid defines model for MinecraftUuid.
type MinecraftUuid struct {
	AccountUuid     *string    `json:"accountUuid"`
	CreatedAt       *time.Time `json:"createdAt,omitempty"`
	Id              *int32     `json:"id,omitempty"`
	LastRequestedAt *time.Time `json:"lastRequestedAt,omitempty"`
	UpdatedAt       *time.Time `json:"updatedAt,omitempty"`
	User            *User      `json:"user,omitempty"`
	Verified        *bool      `json:"verified,omitempty"`
}

// User defines model for User.
type User struct {
	// Accounts Accounts connected to this user
	Accounts *[]MinecraftUuid `json:"accounts"`

	// ExternalId The identifier of the account system
	ExternalId *string `json:"externalId"`
	Id         *int32  `json:"id,omitempty"`
}

// PostConnectUserUserIdParams defines parameters for PostConnectUserUserId.
type PostConnectUserUserIdParams struct {
	McUuid *string `form:"mcUuid,omitempty" json:"mcUuid,omitempty"`
}

// PostConnectUserUserIdVerifyParams defines parameters for PostConnectUserUserIdVerify.
type PostConnectUserUserIdVerifyParams struct {
	McUuid *string `form:"mcUuid,omitempty" json:"mcUuid,omitempty"`
}

// GetConnectUsersParams defines parameters for GetConnectUsers.
type GetConnectUsersParams struct {
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetConnectUsersConnectedParams defines parameters for GetConnectUsersConnected.
type GetConnectUsersConnectedParams struct {
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
}

// GetConnectUsersIdsParams defines parameters for GetConnectUsersIds.
type GetConnectUsersIdsParams struct {
	ExternalIds *[]string `form:"externalIds,omitempty" json:"externalIds,omitempty"`
}

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetConnectMinecraftMcUuid request
	GetConnectMinecraftMcUuid(ctx context.Context, mcUuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectUserUserId request
	GetConnectUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConnectUserUserId request
	PostConnectUserUserId(ctx context.Context, userId string, params *PostConnectUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostConnectUserUserIdVerify request
	PostConnectUserUserIdVerify(ctx context.Context, userId string, params *PostConnectUserUserIdVerifyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectUsers request
	GetConnectUsers(ctx context.Context, params *GetConnectUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectUsersConnected request
	GetConnectUsersConnected(ctx context.Context, params *GetConnectUsersConnectedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetConnectUsersIds request
	GetConnectUsersIds(ctx context.Context, params *GetConnectUsersIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetConnectMinecraftMcUuid(ctx context.Context, mcUuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectMinecraftMcUuidRequest(c.Server, mcUuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectUserUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectUserUserId(ctx context.Context, userId string, params *PostConnectUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConnectUserUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostConnectUserUserIdVerify(ctx context.Context, userId string, params *PostConnectUserUserIdVerifyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostConnectUserUserIdVerifyRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectUsers(ctx context.Context, params *GetConnectUsersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectUsersRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectUsersConnected(ctx context.Context, params *GetConnectUsersConnectedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectUsersConnectedRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetConnectUsersIds(ctx context.Context, params *GetConnectUsersIdsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetConnectUsersIdsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetConnectMinecraftMcUuidRequest generates requests for GetConnectMinecraftMcUuid
func NewGetConnectMinecraftMcUuidRequest(server string, mcUuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "mcUuid", runtime.ParamLocationPath, mcUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Connect/minecraft/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectUserUserIdRequest generates requests for GetConnectUserUserId
func NewGetConnectUserUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Connect/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConnectUserUserIdRequest generates requests for PostConnectUserUserId
func NewPostConnectUserUserIdRequest(server string, userId string, params *PostConnectUserUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Connect/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.McUuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mcUuid", runtime.ParamLocationQuery, *params.McUuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostConnectUserUserIdVerifyRequest generates requests for PostConnectUserUserIdVerify
func NewPostConnectUserUserIdVerifyRequest(server string, userId string, params *PostConnectUserUserIdVerifyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Connect/user/%s/verify", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.McUuid != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "mcUuid", runtime.ParamLocationQuery, *params.McUuid); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectUsersRequest generates requests for GetConnectUsers
func NewGetConnectUsersRequest(server string, params *GetConnectUsersParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Connect/users")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectUsersConnectedRequest generates requests for GetConnectUsersConnected
func NewGetConnectUsersConnectedRequest(server string, params *GetConnectUsersConnectedParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Connect/users/connected")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetConnectUsersIdsRequest generates requests for GetConnectUsersIds
func NewGetConnectUsersIdsRequest(server string, params *GetConnectUsersIdsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Connect/users/ids")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ExternalIds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "externalIds", runtime.ParamLocationQuery, *params.ExternalIds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetConnectMinecraftMcUuidWithResponse request
	GetConnectMinecraftMcUuidWithResponse(ctx context.Context, mcUuid string, reqEditors ...RequestEditorFn) (*GetConnectMinecraftMcUuidResponse, error)

	// GetConnectUserUserIdWithResponse request
	GetConnectUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetConnectUserUserIdResponse, error)

	// PostConnectUserUserIdWithResponse request
	PostConnectUserUserIdWithResponse(ctx context.Context, userId string, params *PostConnectUserUserIdParams, reqEditors ...RequestEditorFn) (*PostConnectUserUserIdResponse, error)

	// PostConnectUserUserIdVerifyWithResponse request
	PostConnectUserUserIdVerifyWithResponse(ctx context.Context, userId string, params *PostConnectUserUserIdVerifyParams, reqEditors ...RequestEditorFn) (*PostConnectUserUserIdVerifyResponse, error)

	// GetConnectUsersWithResponse request
	GetConnectUsersWithResponse(ctx context.Context, params *GetConnectUsersParams, reqEditors ...RequestEditorFn) (*GetConnectUsersResponse, error)

	// GetConnectUsersConnectedWithResponse request
	GetConnectUsersConnectedWithResponse(ctx context.Context, params *GetConnectUsersConnectedParams, reqEditors ...RequestEditorFn) (*GetConnectUsersConnectedResponse, error)

	// GetConnectUsersIdsWithResponse request
	GetConnectUsersIdsWithResponse(ctx context.Context, params *GetConnectUsersIdsParams, reqEditors ...RequestEditorFn) (*GetConnectUsersIdsResponse, error)
}

type GetConnectMinecraftMcUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetConnectMinecraftMcUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectMinecraftMcUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetConnectUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConnectUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *ConnectionRequest
}

// Status returns HTTPResponse.Status
func (r PostConnectUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConnectUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostConnectUserUserIdVerifyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostConnectUserUserIdVerifyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostConnectUserUserIdVerifyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectUsersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetConnectUsersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectUsersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectUsersConnectedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetConnectUsersConnectedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectUsersConnectedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetConnectUsersIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]User
}

// Status returns HTTPResponse.Status
func (r GetConnectUsersIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetConnectUsersIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetConnectMinecraftMcUuidWithResponse request returning *GetConnectMinecraftMcUuidResponse
func (c *ClientWithResponses) GetConnectMinecraftMcUuidWithResponse(ctx context.Context, mcUuid string, reqEditors ...RequestEditorFn) (*GetConnectMinecraftMcUuidResponse, error) {
	rsp, err := c.GetConnectMinecraftMcUuid(ctx, mcUuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectMinecraftMcUuidResponse(rsp)
}

// GetConnectUserUserIdWithResponse request returning *GetConnectUserUserIdResponse
func (c *ClientWithResponses) GetConnectUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetConnectUserUserIdResponse, error) {
	rsp, err := c.GetConnectUserUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectUserUserIdResponse(rsp)
}

// PostConnectUserUserIdWithResponse request returning *PostConnectUserUserIdResponse
func (c *ClientWithResponses) PostConnectUserUserIdWithResponse(ctx context.Context, userId string, params *PostConnectUserUserIdParams, reqEditors ...RequestEditorFn) (*PostConnectUserUserIdResponse, error) {
	rsp, err := c.PostConnectUserUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectUserUserIdResponse(rsp)
}

// PostConnectUserUserIdVerifyWithResponse request returning *PostConnectUserUserIdVerifyResponse
func (c *ClientWithResponses) PostConnectUserUserIdVerifyWithResponse(ctx context.Context, userId string, params *PostConnectUserUserIdVerifyParams, reqEditors ...RequestEditorFn) (*PostConnectUserUserIdVerifyResponse, error) {
	rsp, err := c.PostConnectUserUserIdVerify(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostConnectUserUserIdVerifyResponse(rsp)
}

// GetConnectUsersWithResponse request returning *GetConnectUsersResponse
func (c *ClientWithResponses) GetConnectUsersWithResponse(ctx context.Context, params *GetConnectUsersParams, reqEditors ...RequestEditorFn) (*GetConnectUsersResponse, error) {
	rsp, err := c.GetConnectUsers(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectUsersResponse(rsp)
}

// GetConnectUsersConnectedWithResponse request returning *GetConnectUsersConnectedResponse
func (c *ClientWithResponses) GetConnectUsersConnectedWithResponse(ctx context.Context, params *GetConnectUsersConnectedParams, reqEditors ...RequestEditorFn) (*GetConnectUsersConnectedResponse, error) {
	rsp, err := c.GetConnectUsersConnected(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectUsersConnectedResponse(rsp)
}

// GetConnectUsersIdsWithResponse request returning *GetConnectUsersIdsResponse
func (c *ClientWithResponses) GetConnectUsersIdsWithResponse(ctx context.Context, params *GetConnectUsersIdsParams, reqEditors ...RequestEditorFn) (*GetConnectUsersIdsResponse, error) {
	rsp, err := c.GetConnectUsersIds(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetConnectUsersIdsResponse(rsp)
}

// ParseGetConnectMinecraftMcUuidResponse parses an HTTP response from a GetConnectMinecraftMcUuidWithResponse call
func ParseGetConnectMinecraftMcUuidResponse(rsp *http.Response) (*GetConnectMinecraftMcUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectMinecraftMcUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported
	}

	return response, nil
}

// ParseGetConnectUserUserIdResponse parses an HTTP response from a GetConnectUserUserIdWithResponse call
func ParseGetConnectUserUserIdResponse(rsp *http.Response) (*GetConnectUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostConnectUserUserIdResponse parses an HTTP response from a PostConnectUserUserIdWithResponse call
func ParsePostConnectUserUserIdResponse(rsp *http.Response) (*PostConnectUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConnectUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest ConnectionRequest
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostConnectUserUserIdVerifyResponse parses an HTTP response from a PostConnectUserUserIdVerifyWithResponse call
func ParsePostConnectUserUserIdVerifyResponse(rsp *http.Response) (*PostConnectUserUserIdVerifyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostConnectUserUserIdVerifyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetConnectUsersResponse parses an HTTP response from a GetConnectUsersWithResponse call
func ParseGetConnectUsersResponse(rsp *http.Response) (*GetConnectUsersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectUsersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetConnectUsersConnectedResponse parses an HTTP response from a GetConnectUsersConnectedWithResponse call
func ParseGetConnectUsersConnectedResponse(rsp *http.Response) (*GetConnectUsersConnectedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectUsersConnectedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetConnectUsersIdsResponse parses an HTTP response from a GetConnectUsersIdsWithResponse call
func ParseGetConnectUsersIdsResponse(rsp *http.Response) (*GetConnectUsersIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetConnectUsersIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xXTW/jNhD9K8S0R3Xl7N50W/RQ5BAgaOpeihwYcmQxlUiFM0ojGPrvxUiyY8d2Isdp",
	"gwV8iRWK8/XeG2q4BBOqOnj0TJAtgUyBle4ffw3eo2EX/O/40CCxLGprnSzp8jqGGiM7JMhyXRImUG8s",
	"iWOL8puHWGmGDJznb18hAW5rHP7FBUboEnA0BkMrFuOGuxBK1B66bm0T7u7RsJhcOY8m6pznjbNHZqaN",
	"CY1fW/qmLPVdiZBxbHAdizg6v5BYJqJmtN95qxyrGX9hVyHsMRk8Tyi91MQjvsdFaGp7bFINYZTdP0fM",
	"IYOf0mfu05H4dE5DXo8YXe6m8zEffR9PQ/9skUx0tVhCBt/HN8qsZKE4KC4cqb6GBBxjRW/Vsq2RLjnE",
	"tI5Rt/Ienxij1+Wl3c3pjwKVs+hZYIkq5IoLVGMNilpirCB5W0wTlbGLsSw5n4eeEccSAm7+bq/M2DvQ",
	"k0ZDto8XEivU6HXtIINvX2ZfLiCBWnPR45aOVmm1AildVkaA6uT1AntdCV1aABBE4Dfk0WqN7FVv0juO",
	"ukLGSJD9tQQnSUgwgURXkmu12hrxoXFRpDVANNC1IbQVWN2tbKY6eBoU83U2G04Wz+iH86iuS2f6FNN7",
	"ktKXG/7eFrrAjE98km1dane8cZe8ENhNYwwSDX71QnBcncFwK4tryqQH0qX8vZzElkSc97snEdWstp6J",
	"egdRCdSB9tBxHej/4yMZHT00GNs9Lfg5TO5OFO+k9RVHR3K8z9NHdWbaf0NbSeEISfw5GP0owjgFKZp4",
	"dtEBNF4UoSv5FG8VYTHXTcmQXcxms2TKV3e/65DnhAdcT/J7altNmndWs9v2WHO4xT7A6Z52O8Xrq61H",
	"TVXp2A7yULos+2GQFHGIaNU/hTOFqnSrQux/fGBV6EdUemOOHAc2mKTP1GxeS6Yo9fkec5bsWbKfIVln",
	"Jx+rl3biyfp8L6ItQa1x27nlvADprKX/TkuDiJwl5Ug5319LS0cH9NJ1/wYAAP//CPBLgPMRAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
