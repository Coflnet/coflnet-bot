// Package paymentgen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package paymentgen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for ProductType.
const (
	ProductTypeCOLLECTABLE   ProductType = "COLLECTABLE"
	ProductTypeDISABLED      ProductType = "DISABLED"
	ProductTypeLOCKED        ProductType = "LOCKED"
	ProductTypeNONE          ProductType = "NONE"
	ProductTypeSERVICE       ProductType = "SERVICE"
	ProductTypeTOPUP         ProductType = "TOP_UP"
	ProductTypeVARIABLEPRICE ProductType = "VARIABLE_PRICE"
)

// Defines values for RuleFlags.
const (
	RuleFlagsBLOCKPURCHASE RuleFlags = "BLOCK_PURCHASE"
	RuleFlagsDISCOUNT      RuleFlags = "DISCOUNT"
	RuleFlagsEARLYBREAK    RuleFlags = "EARLY_BREAK"
	RuleFlagsINVERT        RuleFlags = "INVERT"
	RuleFlagsLONGER        RuleFlags = "LONGER"
	RuleFlagsNONE          RuleFlags = "NONE"
	RuleFlagsPERCENT       RuleFlags = "PERCENT"
)

// Compensation Compensation for some kind of incident
type Compensation struct {
	// Amount How much to compensate
	Amount *int32 `json:"amount,omitempty"`

	// ProductId The product id owners of which to compensate
	ProductId *string `json:"productId"`

	// Reference A reason for the compensation, also serves as double compensation prevention
	Reference *string `json:"reference"`

	// When At what time ownership of Coflnet.Payments.Models.Product should be looked for (services might expired since)
	When *time.Time `json:"when,omitempty"`
}

// CustomTopUp Represents a custom adjustment to an users balance
type CustomTopUp struct {
	// Amount How much to add/substract
	Amount *int64 `json:"amount,omitempty"`

	// ProductId What product this coresponds to (the product can define additional information)
	ProductId *string `json:"productId"`

	// Reference Reference/Reason this topup took place, dupplicates will be rejected
	Reference *string `json:"reference"`
}

// ExternalTransaction defines model for ExternalTransaction.
type ExternalTransaction struct {
	Amount    *float64   `json:"amount,omitempty"`
	Id        *string    `json:"id"`
	ProductId *string    `json:"productId"`
	Reference *string    `json:"reference"`
	TimeStamp *time.Time `json:"timeStamp,omitempty"`
}

// Group A group is a collection of one or more Coflnet.Payments.Models.Product
type Group struct {
	// Id Primary Key
	Id *int32 `json:"id,omitempty"`

	// Products Products in this group
	Products *[]Product `json:"products"`

	// Slug Identifier of this group
	Slug *string `json:"slug"`
}

// Int32Int32ValueTuple defines model for Int32Int32ValueTuple.
type Int32Int32ValueTuple struct {
	Item1 *int32 `json:"item1,omitempty"`
	Item2 *int32 `json:"item2,omitempty"`
}

// OwnerShip Represents an ownership of some product by some user.
// Has the time of when the ownership expires.
type OwnerShip struct {
	// Expires How long
	Expires *time.Time `json:"expires,omitempty"`

	// Id Primary Id
	Id *int64 `json:"id,omitempty"`

	// Product Products that can be purchased
	Product *PurchaseableProduct `json:"product,omitempty"`
}

// OwnershipTimeFrame defines model for OwnershipTimeFrame.
type OwnershipTimeFrame struct {
	End    *time.Time `json:"end,omitempty"`
	Start  *time.Time `json:"start,omitempty"`
	UserId *string    `json:"userId"`
}

// PlanedTransaction A empheral transaction that can still be changed.
// Intended for invoices that may still be canceled or bidding
type PlanedTransaction struct {
	// Amount The size of the transaction
	Amount *float64 `json:"amount,omitempty"`

	// Id Primary Id
	Id *int64 `json:"id,omitempty"`

	// Product Base class for Products
	Product *Product `json:"product,omitempty"`

	// Reference Custom reference data for this transaction.
	// External identifiers, notes, metadata
	Reference *string `json:"reference"`

	// Timestamp Timestamp of this transaction
	Timestamp *time.Time `json:"timestamp,omitempty"`
}

// Product Base class for Products
type Product struct {
	// Cost The exact amount this product costs to purchase
	Cost *float64 `json:"cost,omitempty"`

	// Description DB-Level description may not be displayed to the end user directly (localisation n stuff)
	Description *string `json:"description"`

	// Id Primary Key
	Id *int32 `json:"id,omitempty"`

	// OwnershipSeconds How long this product is owned by an user in seconds
	OwnershipSeconds *int64 `json:"ownershipSeconds,omitempty"`

	// Slug unique Slug for this product
	Slug *string `json:"slug"`

	// Title Title of this product
	Title *string `json:"title"`

	// Type Types of products
	Type *ProductType `json:"type,omitempty"`
}

// ProductType Types of products
type ProductType string

// PurchaseableProduct Products that can be purchased
type PurchaseableProduct struct {
	// Cost The exact amount this product costs to purchase
	Cost *float64 `json:"cost,omitempty"`

	// Description DB-Level description may not be displayed to the end user directly (localisation n stuff)
	Description *string `json:"description"`

	// Id Primary Key
	Id *int32 `json:"id,omitempty"`

	// OwnershipSeconds How long this product is owned by an user in seconds
	OwnershipSeconds *int64 `json:"ownershipSeconds,omitempty"`

	// Slug unique Slug for this product
	Slug *string `json:"slug"`

	// Title Title of this product
	Title *string `json:"title"`

	// Type Types of products
	Type *ProductType `json:"type,omitempty"`
}

// Rule Rules can change attributes of products based on the ownership of another
type Rule struct {
	// Amount Amount this rule changes the target property
	Amount *float64 `json:"amount,omitempty"`

	// Flags Flags modifying a Coflnet.Payments.Models.Rule
	Flags *RuleFlags `json:"flags,omitempty"`

	// Id Primary key of this rule
	Id *int32 `json:"id,omitempty"`

	// Priority In what order to apply the rules
	Priority *int32 `json:"priority,omitempty"`

	// Requires A group is a collection of one or more Coflnet.Payments.Models.Product
	Requires *Group `json:"requires,omitempty"`

	// Slug Identifier of this rule
	Slug *string `json:"slug"`

	// Targets A group is a collection of one or more Coflnet.Payments.Models.Product
	Targets *Group `json:"targets,omitempty"`
}

// RuleCreate Arguments for creating a new rule
type RuleCreate struct {
	// Amount Amount this rule changes the target property
	Amount *float64 `json:"amount,omitempty"`

	// Flags Flags modifying a Coflnet.Payments.Models.Rule
	Flags *RuleFlags `json:"flags,omitempty"`

	// Priority In what order to apply the rules (highest first)
	Priority *int32 `json:"priority,omitempty"`

	// RequiresGroup This rule only applies if the user owns a product contained in this group
	// if null, the rule always applies to the target group (except overriden by another rule)
	RequiresGroup *string `json:"requiresGroup"`

	// Slug Identifier of this rule
	Slug *string `json:"slug"`

	// TargetsGroup This rule applies to all products in this group
	TargetsGroup *string `json:"targetsGroup"`
}

// RuleFlags Flags modifying a Coflnet.Payments.Models.Rule
type RuleFlags string

// RuleResult defines model for RuleResult.
type RuleResult struct {
	// ModifiedProduct Base class for Products
	ModifiedProduct *Product `json:"modifiedProduct,omitempty"`
	Rules           *[]Rule  `json:"rules"`
}

// SystemState State to get the db into
// Useful for gitops
type SystemState struct {
	// Groups What products go into which groups
	Groups *map[string]*[]string `json:"groups"`

	// Products Available products
	Products *[]PurchaseableProduct `json:"products"`

	// Rules Rules
	Rules *[]RuleCreate `json:"rules"`

	// TopUps Topups that are currently active
	TopUps *[]TopUpProduct `json:"topUps"`
}

// TopUpIdResponse Response containing an id
type TopUpIdResponse struct {
	// DirctLink Directlink to redirect the user to
	DirctLink *string `json:"dirctLink"`

	// Id Checkout id
	Id *string `json:"id"`
}

// TopUpOptions defines model for TopUpOptions.
type TopUpOptions struct {
	// CancelUrl Overwrite the default redirect url for anything else but payment
	CancelUrl *string `json:"cancelUrl"`

	// Fingerprint Browser fingerprint of the user
	Fingerprint *string `json:"fingerprint"`

	// Locale Locale of the user
	Locale *string `json:"locale"`

	// SuccessUrl Overwrite the default redirect url after successful payment
	SuccessUrl *string `json:"successUrl"`

	// TopUpAmount Percise amount of coflcoins to topup
	TopUpAmount *int64 `json:"topUpAmount,omitempty"`

	// UserEmail If provided, this value will be used when the Customer object is created. If not provided, customers will be asked to enter their email address
	UserEmail *string `json:"userEmail"`

	// UserIp The ip of the user
	UserIp *string `json:"userIp"`
}

// TopUpProduct defines model for TopUpProduct.
type TopUpProduct struct {
	// Cost The exact amount this product costs to purchase
	Cost *float64 `json:"cost,omitempty"`

	// CurrencyCode The currency code
	CurrencyCode *string `json:"currencyCode"`

	// Description DB-Level description may not be displayed to the end user directly (localisation n stuff)
	Description *string `json:"description"`

	// Id Primary Key
	Id *int32 `json:"id,omitempty"`

	// OwnershipSeconds How long this product is owned by an user in seconds
	OwnershipSeconds *int64 `json:"ownershipSeconds,omitempty"`

	// Price The price of this Coflnet.Payments.Models.TopUpProduct in Coflnet.Payments.Models.TopUpProduct.CurrencyCode
	Price *float64 `json:"price,omitempty"`

	// ProviderSlug What provider this top up is valid for
	// (differnt fees can require different prices)
	ProviderSlug *string `json:"providerSlug"`

	// Slug unique Slug for this product
	Slug *string `json:"slug"`

	// Title Title of this product
	Title *string `json:"title"`

	// Type Types of products
	Type *ProductType `json:"type,omitempty"`
}

// TransactionEvent Event produced when a transaction occurs
type TransactionEvent struct {
	// Amount The transaction amount
	Amount *float64 `json:"amount,omitempty"`

	// Id The internal id of the transaction
	Id *int64 `json:"id,omitempty"`

	// OwnedSeconds How long this product will last till it expires
	OwnedSeconds *int64 `json:"ownedSeconds,omitempty"`

	// ProductId Unique id of this product settings
	ProductId *int32 `json:"productId,omitempty"`

	// ProductSlug Slug of the product
	ProductSlug *string `json:"productSlug"`

	// ProductType Types of products
	ProductType *ProductType `json:"productType,omitempty"`

	// Reference Optional reference
	Reference *string `json:"reference"`

	// Timestamp When this transaction occured
	Timestamp *time.Time `json:"timestamp,omitempty"`

	// UserId Id of the user triggering the transaction
	UserId *string `json:"userId"`
}

// TransferRequest Transfer request to another user
type TransferRequest struct {
	// Amount The amount to transfer
	Amount *float64 `json:"amount,omitempty"`

	// Reference A unique reference to prevent double transfers
	Reference *string `json:"reference"`

	// TargetUser The identifier of the user which should receive the funds
	TargetUser *string `json:"targetUser"`
}

// User An user capable of making transactions
type User struct {
	// AvailableBalance The balance available (Coflnet.Payments.Models.User.Balance minus any Coflnet.Payments.Models.PlanedTransaction)
	AvailableBalance *float64 `json:"availableBalance,omitempty"`

	// Balance Balance of this user
	Balance *float64 `json:"balance,omitempty"`

	// Country Country this user is from (ISO 3166-1 alpha-2)
	Country *string `json:"country"`

	// ExternalId The identifier of the account system
	ExternalId *string `json:"externalId"`

	// Id primary key
	Id *int32 `json:"id,omitempty"`

	// Ip The ip of the user
	Ip *string `json:"ip"`

	// Locale Locale of the user
	Locale *string `json:"locale"`

	// Owns Things this user owns
	Owns *[]OwnerShip `json:"owns"`

	// Zip The zip code of the user
	Zip *string `json:"zip"`
}

// PostCallbackLemonsqueezyParams defines parameters for PostCallbackLemonsqueezy.
type PostCallbackLemonsqueezyParams struct {
	XSignature *string `json:"x-signature,omitempty"`
}

// GetGroupParams defines parameters for GetGroup.
type GetGroupParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
}

// DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONBody defines parameters for DeleteGroupGroupSlugProducts.
type DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONBody = []string

// DeleteGroupGroupSlugProductsJSONBody defines parameters for DeleteGroupGroupSlugProducts.
type DeleteGroupGroupSlugProductsJSONBody = []string

// DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONBody defines parameters for DeleteGroupGroupSlugProducts.
type DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONBody = []string

// PostGroupGroupSlugProductsApplicationWildcardPlusJSONBody defines parameters for PostGroupGroupSlugProducts.
type PostGroupGroupSlugProductsApplicationWildcardPlusJSONBody = []string

// PostGroupGroupSlugProductsJSONBody defines parameters for PostGroupGroupSlugProducts.
type PostGroupGroupSlugProductsJSONBody = []string

// PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONBody defines parameters for PostGroupGroupSlugProducts.
type PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONBody = []string

// PostMaintenanceExtendParams defines parameters for PostMaintenanceExtend.
type PostMaintenanceExtendParams struct {
	Seconds   *int32     `form:"seconds,omitempty" json:"seconds,omitempty"`
	StartTime *time.Time `form:"startTime,omitempty" json:"startTime,omitempty"`
	CheckSum  *int64     `form:"checkSum,omitempty" json:"checkSum,omitempty"`
}

// GetProductsParams defines parameters for GetProducts.
type GetProductsParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
}

// GetProductsServiceServiceSlugOwnedParams defines parameters for GetProductsServiceServiceSlugOwned.
type GetProductsServiceServiceSlugOwnedParams struct {
	Start *time.Time `form:"start,omitempty" json:"start,omitempty"`
	End   *time.Time `form:"end,omitempty" json:"end,omitempty"`
}

// GetProductsServicesParams defines parameters for GetProductsServices.
type GetProductsServicesParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
}

// GetProductsTopupParams defines parameters for GetProductsTopup.
type GetProductsTopupParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
}

// GetProductsUserUserIdParams defines parameters for GetProductsUserUserId.
type GetProductsUserUserIdParams struct {
	ProductSlugs *[]string `form:"productSlugs,omitempty" json:"productSlugs,omitempty"`
}

// GetRulesParams defines parameters for GetRules.
type GetRulesParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Amount *int32 `form:"amount,omitempty" json:"amount,omitempty"`
}

// PostTopUpCustomParams defines parameters for PostTopUpCustom.
type PostTopUpCustomParams struct {
	UserId *string `form:"userId,omitempty" json:"userId,omitempty"`
}

// PostTopUpLemonsqueezyParams defines parameters for PostTopUpLemonsqueezy.
type PostTopUpLemonsqueezyParams struct {
	UserId    *string `form:"userId,omitempty" json:"userId,omitempty"`
	ProductId *string `form:"productId,omitempty" json:"productId,omitempty"`
}

// PostTopUpPaypalParams defines parameters for PostTopUpPaypal.
type PostTopUpPaypalParams struct {
	UserId    *string `form:"userId,omitempty" json:"userId,omitempty"`
	ProductId *string `form:"productId,omitempty" json:"productId,omitempty"`
}

// PostTopUpStripeParams defines parameters for PostTopUpStripe.
type PostTopUpStripeParams struct {
	UserId    *string `form:"userId,omitempty" json:"userId,omitempty"`
	ProductId *string `form:"productId,omitempty" json:"productId,omitempty"`
}

// GetTransactionUUserIdParams defines parameters for GetTransactionUUserId.
type GetTransactionUUserIdParams struct {
	Offset *int32 `form:"offset,omitempty" json:"offset,omitempty"`
	Limit  *int32 `form:"limit,omitempty" json:"limit,omitempty"`
}

// PostUserUserIdOwnsApplicationWildcardPlusJSONBody defines parameters for PostUserUserIdOwns.
type PostUserUserIdOwnsApplicationWildcardPlusJSONBody = []string

// PostUserUserIdOwnsJSONBody defines parameters for PostUserUserIdOwns.
type PostUserUserIdOwnsJSONBody = []string

// PostUserUserIdOwnsApplicationJSONPatchPlusJSONBody defines parameters for PostUserUserIdOwns.
type PostUserUserIdOwnsApplicationJSONPatchPlusJSONBody = []string

// PostUserUserIdOwnsLongestApplicationWildcardPlusJSONBody defines parameters for PostUserUserIdOwnsLongest.
type PostUserUserIdOwnsLongestApplicationWildcardPlusJSONBody = []string

// PostUserUserIdOwnsLongestJSONBody defines parameters for PostUserUserIdOwnsLongest.
type PostUserUserIdOwnsLongestJSONBody = []string

// PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONBody defines parameters for PostUserUserIdOwnsLongest.
type PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONBody = []string

// PostUserUserIdOwnsUntilApplicationWildcardPlusJSONBody defines parameters for PostUserUserIdOwnsUntil.
type PostUserUserIdOwnsUntilApplicationWildcardPlusJSONBody = []string

// PostUserUserIdOwnsUntilJSONBody defines parameters for PostUserUserIdOwnsUntil.
type PostUserUserIdOwnsUntilJSONBody = []string

// PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONBody defines parameters for PostUserUserIdOwnsUntil.
type PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONBody = []string

// PostUserUserIdPurchaseProductSlugParams defines parameters for PostUserUserIdPurchaseProductSlug.
type PostUserUserIdPurchaseProductSlugParams struct {
	Price *int32 `form:"price,omitempty" json:"price,omitempty"`
}

// PostUserUserIdServicePurchaseProductSlugParams defines parameters for PostUserUserIdServicePurchaseProductSlug.
type PostUserUserIdServicePurchaseProductSlugParams struct {
	Reference *string `form:"reference,omitempty" json:"reference,omitempty"`
	Count     *int32  `form:"count,omitempty" json:"count,omitempty"`
}

// PostApplyApplicationWildcardPlusJSONRequestBody defines body for PostApply for application/*+json ContentType.
type PostApplyApplicationWildcardPlusJSONRequestBody = SystemState

// PostApplyJSONRequestBody defines body for PostApply for application/json ContentType.
type PostApplyJSONRequestBody = SystemState

// PostApplyApplicationJSONPatchPlusJSONRequestBody defines body for PostApply for application/json-patch+json ContentType.
type PostApplyApplicationJSONPatchPlusJSONRequestBody = SystemState

// PostGroupApplicationWildcardPlusJSONRequestBody defines body for PostGroup for application/*+json ContentType.
type PostGroupApplicationWildcardPlusJSONRequestBody = Group

// PostGroupJSONRequestBody defines body for PostGroup for application/json ContentType.
type PostGroupJSONRequestBody = Group

// PostGroupApplicationJSONPatchPlusJSONRequestBody defines body for PostGroup for application/json-patch+json ContentType.
type PostGroupApplicationJSONPatchPlusJSONRequestBody = Group

// PutGroupGroupSlugApplicationWildcardPlusJSONRequestBody defines body for PutGroupGroupSlug for application/*+json ContentType.
type PutGroupGroupSlugApplicationWildcardPlusJSONRequestBody = Group

// PutGroupGroupSlugJSONRequestBody defines body for PutGroupGroupSlug for application/json ContentType.
type PutGroupGroupSlugJSONRequestBody = Group

// PutGroupGroupSlugApplicationJSONPatchPlusJSONRequestBody defines body for PutGroupGroupSlug for application/json-patch+json ContentType.
type PutGroupGroupSlugApplicationJSONPatchPlusJSONRequestBody = Group

// DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody defines body for DeleteGroupGroupSlugProducts for application/*+json ContentType.
type DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody = DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONBody

// DeleteGroupGroupSlugProductsJSONRequestBody defines body for DeleteGroupGroupSlugProducts for application/json ContentType.
type DeleteGroupGroupSlugProductsJSONRequestBody = DeleteGroupGroupSlugProductsJSONBody

// DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody defines body for DeleteGroupGroupSlugProducts for application/json-patch+json ContentType.
type DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody = DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONBody

// PostGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody defines body for PostGroupGroupSlugProducts for application/*+json ContentType.
type PostGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody = PostGroupGroupSlugProductsApplicationWildcardPlusJSONBody

// PostGroupGroupSlugProductsJSONRequestBody defines body for PostGroupGroupSlugProducts for application/json ContentType.
type PostGroupGroupSlugProductsJSONRequestBody = PostGroupGroupSlugProductsJSONBody

// PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody defines body for PostGroupGroupSlugProducts for application/json-patch+json ContentType.
type PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody = PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONBody

// PutProductsApplicationWildcardPlusJSONRequestBody defines body for PutProducts for application/*+json ContentType.
type PutProductsApplicationWildcardPlusJSONRequestBody = PurchaseableProduct

// PutProductsJSONRequestBody defines body for PutProducts for application/json ContentType.
type PutProductsJSONRequestBody = PurchaseableProduct

// PutProductsApplicationJSONPatchPlusJSONRequestBody defines body for PutProducts for application/json-patch+json ContentType.
type PutProductsApplicationJSONPatchPlusJSONRequestBody = PurchaseableProduct

// PutProductsTopupApplicationWildcardPlusJSONRequestBody defines body for PutProductsTopup for application/*+json ContentType.
type PutProductsTopupApplicationWildcardPlusJSONRequestBody = TopUpProduct

// PutProductsTopupJSONRequestBody defines body for PutProductsTopup for application/json ContentType.
type PutProductsTopupJSONRequestBody = TopUpProduct

// PutProductsTopupApplicationJSONPatchPlusJSONRequestBody defines body for PutProductsTopup for application/json-patch+json ContentType.
type PutProductsTopupApplicationJSONPatchPlusJSONRequestBody = TopUpProduct

// PostRulesApplicationWildcardPlusJSONRequestBody defines body for PostRules for application/*+json ContentType.
type PostRulesApplicationWildcardPlusJSONRequestBody = RuleCreate

// PostRulesJSONRequestBody defines body for PostRules for application/json ContentType.
type PostRulesJSONRequestBody = RuleCreate

// PostRulesApplicationJSONPatchPlusJSONRequestBody defines body for PostRules for application/json-patch+json ContentType.
type PostRulesApplicationJSONPatchPlusJSONRequestBody = RuleCreate

// PostTopUpCompensateApplicationWildcardPlusJSONRequestBody defines body for PostTopUpCompensate for application/*+json ContentType.
type PostTopUpCompensateApplicationWildcardPlusJSONRequestBody = Compensation

// PostTopUpCompensateJSONRequestBody defines body for PostTopUpCompensate for application/json ContentType.
type PostTopUpCompensateJSONRequestBody = Compensation

// PostTopUpCompensateApplicationJSONPatchPlusJSONRequestBody defines body for PostTopUpCompensate for application/json-patch+json ContentType.
type PostTopUpCompensateApplicationJSONPatchPlusJSONRequestBody = Compensation

// PostTopUpCustomApplicationWildcardPlusJSONRequestBody defines body for PostTopUpCustom for application/*+json ContentType.
type PostTopUpCustomApplicationWildcardPlusJSONRequestBody = CustomTopUp

// PostTopUpCustomJSONRequestBody defines body for PostTopUpCustom for application/json ContentType.
type PostTopUpCustomJSONRequestBody = CustomTopUp

// PostTopUpCustomApplicationJSONPatchPlusJSONRequestBody defines body for PostTopUpCustom for application/json-patch+json ContentType.
type PostTopUpCustomApplicationJSONPatchPlusJSONRequestBody = CustomTopUp

// PostTopUpLemonsqueezyApplicationWildcardPlusJSONRequestBody defines body for PostTopUpLemonsqueezy for application/*+json ContentType.
type PostTopUpLemonsqueezyApplicationWildcardPlusJSONRequestBody = TopUpOptions

// PostTopUpLemonsqueezyJSONRequestBody defines body for PostTopUpLemonsqueezy for application/json ContentType.
type PostTopUpLemonsqueezyJSONRequestBody = TopUpOptions

// PostTopUpLemonsqueezyApplicationJSONPatchPlusJSONRequestBody defines body for PostTopUpLemonsqueezy for application/json-patch+json ContentType.
type PostTopUpLemonsqueezyApplicationJSONPatchPlusJSONRequestBody = TopUpOptions

// PostTopUpPaypalApplicationWildcardPlusJSONRequestBody defines body for PostTopUpPaypal for application/*+json ContentType.
type PostTopUpPaypalApplicationWildcardPlusJSONRequestBody = TopUpOptions

// PostTopUpPaypalJSONRequestBody defines body for PostTopUpPaypal for application/json ContentType.
type PostTopUpPaypalJSONRequestBody = TopUpOptions

// PostTopUpPaypalApplicationJSONPatchPlusJSONRequestBody defines body for PostTopUpPaypal for application/json-patch+json ContentType.
type PostTopUpPaypalApplicationJSONPatchPlusJSONRequestBody = TopUpOptions

// PostTopUpStripeApplicationWildcardPlusJSONRequestBody defines body for PostTopUpStripe for application/*+json ContentType.
type PostTopUpStripeApplicationWildcardPlusJSONRequestBody = TopUpOptions

// PostTopUpStripeJSONRequestBody defines body for PostTopUpStripe for application/json ContentType.
type PostTopUpStripeJSONRequestBody = TopUpOptions

// PostTopUpStripeApplicationJSONPatchPlusJSONRequestBody defines body for PostTopUpStripe for application/json-patch+json ContentType.
type PostTopUpStripeApplicationJSONPatchPlusJSONRequestBody = TopUpOptions

// PostTransactionPlanedUUserIdApplicationWildcardPlusJSONRequestBody defines body for PostTransactionPlanedUUserId for application/*+json ContentType.
type PostTransactionPlanedUUserIdApplicationWildcardPlusJSONRequestBody = ExternalTransaction

// PostTransactionPlanedUUserIdJSONRequestBody defines body for PostTransactionPlanedUUserId for application/json ContentType.
type PostTransactionPlanedUUserIdJSONRequestBody = ExternalTransaction

// PostTransactionPlanedUUserIdApplicationJSONPatchPlusJSONRequestBody defines body for PostTransactionPlanedUUserId for application/json-patch+json ContentType.
type PostTransactionPlanedUUserIdApplicationJSONPatchPlusJSONRequestBody = ExternalTransaction

// PutTransactionPlanedUUserIdTTransactionIdApplicationWildcardPlusJSONRequestBody defines body for PutTransactionPlanedUUserIdTTransactionId for application/*+json ContentType.
type PutTransactionPlanedUUserIdTTransactionIdApplicationWildcardPlusJSONRequestBody = ExternalTransaction

// PutTransactionPlanedUUserIdTTransactionIdJSONRequestBody defines body for PutTransactionPlanedUUserIdTTransactionId for application/json ContentType.
type PutTransactionPlanedUUserIdTTransactionIdJSONRequestBody = ExternalTransaction

// PutTransactionPlanedUUserIdTTransactionIdApplicationJSONPatchPlusJSONRequestBody defines body for PutTransactionPlanedUUserIdTTransactionId for application/json-patch+json ContentType.
type PutTransactionPlanedUUserIdTTransactionIdApplicationJSONPatchPlusJSONRequestBody = ExternalTransaction

// PostTransactionSendApplicationWildcardPlusJSONRequestBody defines body for PostTransactionSend for application/*+json ContentType.
type PostTransactionSendApplicationWildcardPlusJSONRequestBody = TransactionEvent

// PostTransactionSendJSONRequestBody defines body for PostTransactionSend for application/json ContentType.
type PostTransactionSendJSONRequestBody = TransactionEvent

// PostTransactionSendApplicationJSONPatchPlusJSONRequestBody defines body for PostTransactionSend for application/json-patch+json ContentType.
type PostTransactionSendApplicationJSONPatchPlusJSONRequestBody = TransactionEvent

// PostUserUserIdOwnsApplicationWildcardPlusJSONRequestBody defines body for PostUserUserIdOwns for application/*+json ContentType.
type PostUserUserIdOwnsApplicationWildcardPlusJSONRequestBody = PostUserUserIdOwnsApplicationWildcardPlusJSONBody

// PostUserUserIdOwnsJSONRequestBody defines body for PostUserUserIdOwns for application/json ContentType.
type PostUserUserIdOwnsJSONRequestBody = PostUserUserIdOwnsJSONBody

// PostUserUserIdOwnsApplicationJSONPatchPlusJSONRequestBody defines body for PostUserUserIdOwns for application/json-patch+json ContentType.
type PostUserUserIdOwnsApplicationJSONPatchPlusJSONRequestBody = PostUserUserIdOwnsApplicationJSONPatchPlusJSONBody

// PostUserUserIdOwnsLongestApplicationWildcardPlusJSONRequestBody defines body for PostUserUserIdOwnsLongest for application/*+json ContentType.
type PostUserUserIdOwnsLongestApplicationWildcardPlusJSONRequestBody = PostUserUserIdOwnsLongestApplicationWildcardPlusJSONBody

// PostUserUserIdOwnsLongestJSONRequestBody defines body for PostUserUserIdOwnsLongest for application/json ContentType.
type PostUserUserIdOwnsLongestJSONRequestBody = PostUserUserIdOwnsLongestJSONBody

// PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONRequestBody defines body for PostUserUserIdOwnsLongest for application/json-patch+json ContentType.
type PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONRequestBody = PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONBody

// PostUserUserIdOwnsUntilApplicationWildcardPlusJSONRequestBody defines body for PostUserUserIdOwnsUntil for application/*+json ContentType.
type PostUserUserIdOwnsUntilApplicationWildcardPlusJSONRequestBody = PostUserUserIdOwnsUntilApplicationWildcardPlusJSONBody

// PostUserUserIdOwnsUntilJSONRequestBody defines body for PostUserUserIdOwnsUntil for application/json ContentType.
type PostUserUserIdOwnsUntilJSONRequestBody = PostUserUserIdOwnsUntilJSONBody

// PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONRequestBody defines body for PostUserUserIdOwnsUntil for application/json-patch+json ContentType.
type PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONRequestBody = PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONBody

// PostUserUserIdTransferApplicationWildcardPlusJSONRequestBody defines body for PostUserUserIdTransfer for application/*+json ContentType.
type PostUserUserIdTransferApplicationWildcardPlusJSONRequestBody = TransferRequest

// PostUserUserIdTransferJSONRequestBody defines body for PostUserUserIdTransfer for application/json ContentType.
type PostUserUserIdTransferJSONRequestBody = TransferRequest

// PostUserUserIdTransferApplicationJSONPatchPlusJSONRequestBody defines body for PostUserUserIdTransfer for application/json-patch+json ContentType.
type PostUserUserIdTransferApplicationJSONPatchPlusJSONRequestBody = TransferRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// PostApplyWithBody request with any body
	PostApplyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplyWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApplyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApply(ctx context.Context, body PostApplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostApplyWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostApplyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallbackLemonsqueezy request
	PostCallbackLemonsqueezy(ctx context.Context, params *PostCallbackLemonsqueezyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallbackPaypal request
	PostCallbackPaypal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostCallbackStripe request
	PostCallbackStripe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroup request
	GetGroup(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupWithBody request with any body
	PostGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostGroupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroup(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupGroupSlug request
	DeleteGroupGroupSlug(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetGroupGroupSlug request
	GetGroupGroupSlug(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutGroupGroupSlugWithBody request with any body
	PutGroupGroupSlugWithBody(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupGroupSlugWithApplicationWildcardPlusJSONBody(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupGroupSlug(ctx context.Context, groupSlug string, body PutGroupGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutGroupGroupSlugWithApplicationJSONPatchPlusJSONBody(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteGroupGroupSlugProductsWithBody request with any body
	DeleteGroupGroupSlugProductsWithBody(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGroupGroupSlugProductsWithApplicationWildcardPlusJSONBody(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGroupGroupSlugProducts(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	DeleteGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostGroupGroupSlugProductsWithBody request with any body
	PostGroupGroupSlugProductsWithBody(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupGroupSlugProductsWithApplicationWildcardPlusJSONBody(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupGroupSlugProducts(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostMaintenanceExtend request
	PostMaintenanceExtend(ctx context.Context, params *PostMaintenanceExtendParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProducts request
	GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProductsWithBody request with any body
	PutProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProductsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProducts(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProductsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsPProductSlug request
	GetProductsPProductSlug(ctx context.Context, productSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsServiceServiceSlugCount request
	GetProductsServiceServiceSlugCount(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsServiceServiceSlugIds request
	GetProductsServiceServiceSlugIds(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsServiceServiceSlugOwned request
	GetProductsServiceServiceSlugOwned(ctx context.Context, serviceSlug string, params *GetProductsServiceServiceSlugOwnedParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsServices request
	GetProductsServices(ctx context.Context, params *GetProductsServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsTopup request
	GetProductsTopup(ctx context.Context, params *GetProductsTopupParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutProductsTopupWithBody request with any body
	PutProductsTopupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProductsTopupWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutProductsTopupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProductsTopup(ctx context.Context, body PutProductsTopupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutProductsTopupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutProductsTopupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProductsUserUserId request
	GetProductsUserUserId(ctx context.Context, userId string, params *GetProductsUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRules request
	GetRules(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostRulesWithBody request with any body
	PostRulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRulesWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostRulesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRules(ctx context.Context, body PostRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostRulesWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostRulesApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteRulesRuleSlug request
	DeleteRulesRuleSlug(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetRulesRuleSlug request
	GetRulesRuleSlug(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTopUpCompensateWithBody request with any body
	PostTopUpCompensateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpCompensateWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostTopUpCompensateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpCompensate(ctx context.Context, body PostTopUpCompensateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpCompensateWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostTopUpCompensateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTopUpCustomWithBody request with any body
	PostTopUpCustomWithBody(ctx context.Context, params *PostTopUpCustomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpCustomWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpCustom(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpCustomWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTopUpLemonsqueezyWithBody request with any body
	PostTopUpLemonsqueezyWithBody(ctx context.Context, params *PostTopUpLemonsqueezyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpLemonsqueezyWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpLemonsqueezy(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpLemonsqueezyWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTopUpOptions request
	GetTopUpOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTopUpPaypalWithBody request with any body
	PostTopUpPaypalWithBody(ctx context.Context, params *PostTopUpPaypalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpPaypalWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpPaypal(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpPaypalWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTopUpStripeWithBody request with any body
	PostTopUpStripeWithBody(ctx context.Context, params *PostTopUpStripeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpStripeWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpStripe(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTopUpStripeWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionPlanedUUserId request
	GetTransactionPlanedUUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTransactionPlanedUUserIdWithBody request with any body
	PostTransactionPlanedUUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionPlanedUUserIdWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionPlanedUUserId(ctx context.Context, userId string, body PostTransactionPlanedUUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionPlanedUUserIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteTransactionPlanedUUserIdTTransactionId request
	DeleteTransactionPlanedUUserIdTTransactionId(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PutTransactionPlanedUUserIdTTransactionIdWithBody request with any body
	PutTransactionPlanedUUserIdTTransactionIdWithBody(ctx context.Context, userId string, transactionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransactionPlanedUUserIdTTransactionIdWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransactionPlanedUUserIdTTransactionId(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PutTransactionPlanedUUserIdTTransactionIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostTransactionSendWithBody request with any body
	PostTransactionSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionSendWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostTransactionSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionSend(ctx context.Context, body PostTransactionSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostTransactionSendWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostTransactionSendApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetTransactionUUserId request
	GetTransactionUUserId(ctx context.Context, userId string, params *GetTransactionUUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserId request
	GetUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserId request
	PostUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdOwnsWithBody request with any body
	PostUserUserIdOwnsWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwns(ctx context.Context, userId string, body PostUserUserIdOwnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdOwnsLongestWithBody request with any body
	PostUserUserIdOwnsLongestWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsLongestWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsLongest(ctx context.Context, userId string, body PostUserUserIdOwnsLongestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsLongestWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdOwnsUntilWithBody request with any body
	PostUserUserIdOwnsUntilWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsUntilWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsUntil(ctx context.Context, userId string, body PostUserUserIdOwnsUntilJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdOwnsUntilWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetUserUserIdOwnsProductSlugUntil request
	GetUserUserIdOwnsProductSlugUntil(ctx context.Context, userId string, productSlug string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdPurchaseProductSlug request
	PostUserUserIdPurchaseProductSlug(ctx context.Context, userId string, productSlug string, params *PostUserUserIdPurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdServicePurchaseProductSlug request
	PostUserUserIdServicePurchaseProductSlug(ctx context.Context, userId string, productSlug string, params *PostUserUserIdServicePurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostUserUserIdTransferWithBody request with any body
	PostUserUserIdTransferWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdTransferWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdTransferApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdTransfer(ctx context.Context, userId string, body PostUserUserIdTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostUserUserIdTransferWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdTransferApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteUserUserIdTransactionId request
	DeleteUserUserIdTransactionId(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) PostApplyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplyWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostApplyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplyRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApply(ctx context.Context, body PostApplyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostApplyWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostApplyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostApplyRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallbackLemonsqueezy(ctx context.Context, params *PostCallbackLemonsqueezyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallbackLemonsqueezyRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallbackPaypal(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallbackPaypalRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostCallbackStripe(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostCallbackStripeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroup(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostGroupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroup(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupGroupSlug(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupGroupSlugRequest(c.Server, groupSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetGroupGroupSlug(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetGroupGroupSlugRequest(c.Server, groupSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupGroupSlugWithBody(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupGroupSlugRequestWithBody(c.Server, groupSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupGroupSlugWithApplicationWildcardPlusJSONBody(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupGroupSlugRequestWithApplicationWildcardPlusJSONBody(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupGroupSlug(ctx context.Context, groupSlug string, body PutGroupGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupGroupSlugRequest(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutGroupGroupSlugWithApplicationJSONPatchPlusJSONBody(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutGroupGroupSlugRequestWithApplicationJSONPatchPlusJSONBody(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupGroupSlugProductsWithBody(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupGroupSlugProductsRequestWithBody(c.Server, groupSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupGroupSlugProductsWithApplicationWildcardPlusJSONBody(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupGroupSlugProductsRequestWithApplicationWildcardPlusJSONBody(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupGroupSlugProducts(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupGroupSlugProductsRequest(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteGroupGroupSlugProductsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGroupSlugProductsWithBody(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGroupSlugProductsRequestWithBody(c.Server, groupSlug, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGroupSlugProductsWithApplicationWildcardPlusJSONBody(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGroupSlugProductsRequestWithApplicationWildcardPlusJSONBody(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGroupSlugProducts(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGroupSlugProductsRequest(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostGroupGroupSlugProductsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, groupSlug, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostMaintenanceExtend(ctx context.Context, params *PostMaintenanceExtendParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostMaintenanceExtendRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProducts(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProducts(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsPProductSlug(ctx context.Context, productSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsPProductSlugRequest(c.Server, productSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsServiceServiceSlugCount(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsServiceServiceSlugCountRequest(c.Server, serviceSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsServiceServiceSlugIds(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsServiceServiceSlugIdsRequest(c.Server, serviceSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsServiceServiceSlugOwned(ctx context.Context, serviceSlug string, params *GetProductsServiceServiceSlugOwnedParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsServiceServiceSlugOwnedRequest(c.Server, serviceSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsServices(ctx context.Context, params *GetProductsServicesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsServicesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsTopup(ctx context.Context, params *GetProductsTopupParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsTopupRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsTopupWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsTopupRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsTopupWithApplicationWildcardPlusJSONBody(ctx context.Context, body PutProductsTopupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsTopupRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsTopup(ctx context.Context, body PutProductsTopupJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsTopupRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutProductsTopupWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PutProductsTopupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutProductsTopupRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProductsUserUserId(ctx context.Context, userId string, params *GetProductsUserUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProductsUserUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRules(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRulesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRulesWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRulesRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRulesWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostRulesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRulesRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRules(ctx context.Context, body PostRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRulesRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostRulesWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostRulesApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostRulesRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteRulesRuleSlug(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteRulesRuleSlugRequest(c.Server, ruleSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetRulesRuleSlug(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetRulesRuleSlugRequest(c.Server, ruleSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCompensateWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCompensateRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCompensateWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostTopUpCompensateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCompensateRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCompensate(ctx context.Context, body PostTopUpCompensateJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCompensateRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCompensateWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostTopUpCompensateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCompensateRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCustomWithBody(ctx context.Context, params *PostTopUpCustomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCustomRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCustomWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCustomRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCustom(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCustomRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpCustomWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpCustomRequestWithApplicationJSONPatchPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpLemonsqueezyWithBody(ctx context.Context, params *PostTopUpLemonsqueezyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpLemonsqueezyRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpLemonsqueezyWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpLemonsqueezyRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpLemonsqueezy(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpLemonsqueezyRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpLemonsqueezyWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpLemonsqueezyRequestWithApplicationJSONPatchPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTopUpOptions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTopUpOptionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpPaypalWithBody(ctx context.Context, params *PostTopUpPaypalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpPaypalRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpPaypalWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpPaypalRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpPaypal(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpPaypalRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpPaypalWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpPaypalRequestWithApplicationJSONPatchPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpStripeWithBody(ctx context.Context, params *PostTopUpStripeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpStripeRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpStripeWithApplicationWildcardPlusJSONBody(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpStripeRequestWithApplicationWildcardPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpStripe(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpStripeRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTopUpStripeWithApplicationJSONPatchPlusJSONBody(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTopUpStripeRequestWithApplicationJSONPatchPlusJSONBody(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransactionPlanedUUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionPlanedUUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionPlanedUUserIdWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionPlanedUUserIdRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionPlanedUUserIdWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionPlanedUUserIdRequestWithApplicationWildcardPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionPlanedUUserId(ctx context.Context, userId string, body PostTransactionPlanedUUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionPlanedUUserIdRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionPlanedUUserIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionPlanedUUserIdRequestWithApplicationJSONPatchPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteTransactionPlanedUUserIdTTransactionId(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteTransactionPlanedUUserIdTTransactionIdRequest(c.Server, userId, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionPlanedUUserIdTTransactionIdWithBody(ctx context.Context, userId string, transactionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionPlanedUUserIdTTransactionIdRequestWithBody(c.Server, userId, transactionId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionPlanedUUserIdTTransactionIdWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionPlanedUUserIdTTransactionIdRequestWithApplicationWildcardPlusJSONBody(c.Server, userId, transactionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionPlanedUUserIdTTransactionId(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionPlanedUUserIdTTransactionIdRequest(c.Server, userId, transactionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PutTransactionPlanedUUserIdTTransactionIdWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPutTransactionPlanedUUserIdTTransactionIdRequestWithApplicationJSONPatchPlusJSONBody(c.Server, userId, transactionId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionSendWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionSendRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionSendWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostTransactionSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionSendRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionSend(ctx context.Context, body PostTransactionSendJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionSendRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostTransactionSendWithApplicationJSONPatchPlusJSONBody(ctx context.Context, body PostTransactionSendApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostTransactionSendRequestWithApplicationJSONPatchPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetTransactionUUserId(ctx context.Context, userId string, params *GetTransactionUUserIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetTransactionUUserIdRequest(c.Server, userId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserId(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdRequest(c.Server, userId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsRequestWithApplicationWildcardPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwns(ctx context.Context, userId string, body PostUserUserIdOwnsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsRequestWithApplicationJSONPatchPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsLongestWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsLongestRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsLongestWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsLongestRequestWithApplicationWildcardPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsLongest(ctx context.Context, userId string, body PostUserUserIdOwnsLongestJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsLongestRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsLongestWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsLongestRequestWithApplicationJSONPatchPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsUntilWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsUntilRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsUntilWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsUntilRequestWithApplicationWildcardPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsUntil(ctx context.Context, userId string, body PostUserUserIdOwnsUntilJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsUntilRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdOwnsUntilWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdOwnsUntilRequestWithApplicationJSONPatchPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetUserUserIdOwnsProductSlugUntil(ctx context.Context, userId string, productSlug string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetUserUserIdOwnsProductSlugUntilRequest(c.Server, userId, productSlug)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdPurchaseProductSlug(ctx context.Context, userId string, productSlug string, params *PostUserUserIdPurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdPurchaseProductSlugRequest(c.Server, userId, productSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdServicePurchaseProductSlug(ctx context.Context, userId string, productSlug string, params *PostUserUserIdServicePurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdServicePurchaseProductSlugRequest(c.Server, userId, productSlug, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdTransferWithBody(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdTransferRequestWithBody(c.Server, userId, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdTransferWithApplicationWildcardPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdTransferApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdTransferRequestWithApplicationWildcardPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdTransfer(ctx context.Context, userId string, body PostUserUserIdTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdTransferRequest(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostUserUserIdTransferWithApplicationJSONPatchPlusJSONBody(ctx context.Context, userId string, body PostUserUserIdTransferApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostUserUserIdTransferRequestWithApplicationJSONPatchPlusJSONBody(c.Server, userId, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteUserUserIdTransactionId(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteUserUserIdTransactionIdRequest(c.Server, userId, transactionId)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewPostApplyRequestWithApplicationWildcardPlusJSONBody calls the generic PostApply builder with application/*+json body
func NewPostApplyRequestWithApplicationWildcardPlusJSONBody(server string, body PostApplyApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplyRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostApplyRequest calls the generic PostApply builder with application/json body
func NewPostApplyRequest(server string, body PostApplyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostApplyRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostApply builder with application/json-patch+json body
func NewPostApplyRequestWithApplicationJSONPatchPlusJSONBody(server string, body PostApplyApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostApplyRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPostApplyRequestWithBody generates requests for PostApply with any type of body
func NewPostApplyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Apply")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostCallbackLemonsqueezyRequest generates requests for PostCallbackLemonsqueezy
func NewPostCallbackLemonsqueezyRequest(server string, params *PostCallbackLemonsqueezyParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Callback/lemonsqueezy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		if params.XSignature != nil {
			var headerParam0 string

			headerParam0, err = runtime.StyleParamWithLocation("simple", false, "x-signature", runtime.ParamLocationHeader, *params.XSignature)
			if err != nil {
				return nil, err
			}

			req.Header.Set("x-signature", headerParam0)
		}

	}

	return req, nil
}

// NewPostCallbackPaypalRequest generates requests for PostCallbackPaypal
func NewPostCallbackPaypalRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Callback/paypal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostCallbackStripeRequest generates requests for PostCallbackStripe
func NewPostCallbackStripeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Callback/stripe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupRequest generates requests for GetGroup
func NewGetGroupRequest(server string, params *GetGroupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostGroupRequestWithApplicationWildcardPlusJSONBody calls the generic PostGroup builder with application/*+json body
func NewPostGroupRequestWithApplicationWildcardPlusJSONBody(server string, body PostGroupApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostGroupRequest calls the generic PostGroup builder with application/json body
func NewPostGroupRequest(server string, body PostGroupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupRequestWithBody(server, "application/json", bodyReader)
}

// NewPostGroupRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostGroup builder with application/json-patch+json body
func NewPostGroupRequestWithApplicationJSONPatchPlusJSONBody(server string, body PostGroupApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPostGroupRequestWithBody generates requests for PostGroup with any type of body
func NewPostGroupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Group")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupGroupSlugRequest generates requests for DeleteGroupGroupSlug
func NewDeleteGroupGroupSlugRequest(server string, groupSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupSlug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetGroupGroupSlugRequest generates requests for GetGroupGroupSlug
func NewGetGroupGroupSlugRequest(server string, groupSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupSlug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutGroupGroupSlugRequestWithApplicationWildcardPlusJSONBody calls the generic PutGroupGroupSlug builder with application/*+json body
func NewPutGroupGroupSlugRequestWithApplicationWildcardPlusJSONBody(server string, groupSlug string, body PutGroupGroupSlugApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupGroupSlugRequestWithBody(server, groupSlug, "application/*+json", bodyReader)
}

// NewPutGroupGroupSlugRequest calls the generic PutGroupGroupSlug builder with application/json body
func NewPutGroupGroupSlugRequest(server string, groupSlug string, body PutGroupGroupSlugJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupGroupSlugRequestWithBody(server, groupSlug, "application/json", bodyReader)
}

// NewPutGroupGroupSlugRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutGroupGroupSlug builder with application/json-patch+json body
func NewPutGroupGroupSlugRequestWithApplicationJSONPatchPlusJSONBody(server string, groupSlug string, body PutGroupGroupSlugApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutGroupGroupSlugRequestWithBody(server, groupSlug, "application/json-patch+json", bodyReader)
}

// NewPutGroupGroupSlugRequestWithBody generates requests for PutGroupGroupSlug with any type of body
func NewPutGroupGroupSlugRequestWithBody(server string, groupSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupSlug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Group/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteGroupGroupSlugProductsRequestWithApplicationWildcardPlusJSONBody calls the generic DeleteGroupGroupSlugProducts builder with application/*+json body
func NewDeleteGroupGroupSlugProductsRequestWithApplicationWildcardPlusJSONBody(server string, groupSlug string, body DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGroupGroupSlugProductsRequestWithBody(server, groupSlug, "application/*+json", bodyReader)
}

// NewDeleteGroupGroupSlugProductsRequest calls the generic DeleteGroupGroupSlugProducts builder with application/json body
func NewDeleteGroupGroupSlugProductsRequest(server string, groupSlug string, body DeleteGroupGroupSlugProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGroupGroupSlugProductsRequestWithBody(server, groupSlug, "application/json", bodyReader)
}

// NewDeleteGroupGroupSlugProductsRequestWithApplicationJSONPatchPlusJSONBody calls the generic DeleteGroupGroupSlugProducts builder with application/json-patch+json body
func NewDeleteGroupGroupSlugProductsRequestWithApplicationJSONPatchPlusJSONBody(server string, groupSlug string, body DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewDeleteGroupGroupSlugProductsRequestWithBody(server, groupSlug, "application/json-patch+json", bodyReader)
}

// NewDeleteGroupGroupSlugProductsRequestWithBody generates requests for DeleteGroupGroupSlugProducts with any type of body
func NewDeleteGroupGroupSlugProductsRequestWithBody(server string, groupSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupSlug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Group/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostGroupGroupSlugProductsRequestWithApplicationWildcardPlusJSONBody calls the generic PostGroupGroupSlugProducts builder with application/*+json body
func NewPostGroupGroupSlugProductsRequestWithApplicationWildcardPlusJSONBody(server string, groupSlug string, body PostGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupGroupSlugProductsRequestWithBody(server, groupSlug, "application/*+json", bodyReader)
}

// NewPostGroupGroupSlugProductsRequest calls the generic PostGroupGroupSlugProducts builder with application/json body
func NewPostGroupGroupSlugProductsRequest(server string, groupSlug string, body PostGroupGroupSlugProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupGroupSlugProductsRequestWithBody(server, groupSlug, "application/json", bodyReader)
}

// NewPostGroupGroupSlugProductsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostGroupGroupSlugProducts builder with application/json-patch+json body
func NewPostGroupGroupSlugProductsRequestWithApplicationJSONPatchPlusJSONBody(server string, groupSlug string, body PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostGroupGroupSlugProductsRequestWithBody(server, groupSlug, "application/json-patch+json", bodyReader)
}

// NewPostGroupGroupSlugProductsRequestWithBody generates requests for PostGroupGroupSlugProducts with any type of body
func NewPostGroupGroupSlugProductsRequestWithBody(server string, groupSlug string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "groupSlug", runtime.ParamLocationPath, groupSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Group/%s/products", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostMaintenanceExtendRequest generates requests for PostMaintenanceExtend
func NewPostMaintenanceExtendRequest(server string, params *PostMaintenanceExtendParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Maintenance/extend")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Seconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "seconds", runtime.ParamLocationQuery, *params.Seconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.StartTime != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "startTime", runtime.ParamLocationQuery, *params.StartTime); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.CheckSum != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "checkSum", runtime.ParamLocationQuery, *params.CheckSum); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsRequest generates requests for GetProducts
func NewGetProductsRequest(server string, params *GetProductsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProductsRequestWithApplicationWildcardPlusJSONBody calls the generic PutProducts builder with application/*+json body
func NewPutProductsRequestWithApplicationWildcardPlusJSONBody(server string, body PutProductsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPutProductsRequest calls the generic PutProducts builder with application/json body
func NewPutProductsRequest(server string, body PutProductsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsRequestWithBody(server, "application/json", bodyReader)
}

// NewPutProductsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutProducts builder with application/json-patch+json body
func NewPutProductsRequestWithApplicationJSONPatchPlusJSONBody(server string, body PutProductsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPutProductsRequestWithBody generates requests for PutProducts with any type of body
func NewPutProductsRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsPProductSlugRequest generates requests for GetProductsPProductSlug
func NewGetProductsPProductSlugRequest(server string, productSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "productSlug", runtime.ParamLocationPath, productSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/p/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsServiceServiceSlugCountRequest generates requests for GetProductsServiceServiceSlugCount
func NewGetProductsServiceServiceSlugCountRequest(server string, serviceSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSlug", runtime.ParamLocationPath, serviceSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/service/%s/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsServiceServiceSlugIdsRequest generates requests for GetProductsServiceServiceSlugIds
func NewGetProductsServiceServiceSlugIdsRequest(server string, serviceSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSlug", runtime.ParamLocationPath, serviceSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/service/%s/ids", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsServiceServiceSlugOwnedRequest generates requests for GetProductsServiceServiceSlugOwned
func NewGetProductsServiceServiceSlugOwnedRequest(server string, serviceSlug string, params *GetProductsServiceServiceSlugOwnedParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "serviceSlug", runtime.ParamLocationPath, serviceSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/service/%s/owned", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Start != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "start", runtime.ParamLocationQuery, *params.Start); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.End != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "end", runtime.ParamLocationQuery, *params.End); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsServicesRequest generates requests for GetProductsServices
func NewGetProductsServicesRequest(server string, params *GetProductsServicesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/services")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProductsTopupRequest generates requests for GetProductsTopup
func NewGetProductsTopupRequest(server string, params *GetProductsTopupParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/topup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutProductsTopupRequestWithApplicationWildcardPlusJSONBody calls the generic PutProductsTopup builder with application/*+json body
func NewPutProductsTopupRequestWithApplicationWildcardPlusJSONBody(server string, body PutProductsTopupApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsTopupRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPutProductsTopupRequest calls the generic PutProductsTopup builder with application/json body
func NewPutProductsTopupRequest(server string, body PutProductsTopupJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsTopupRequestWithBody(server, "application/json", bodyReader)
}

// NewPutProductsTopupRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutProductsTopup builder with application/json-patch+json body
func NewPutProductsTopupRequestWithApplicationJSONPatchPlusJSONBody(server string, body PutProductsTopupApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutProductsTopupRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPutProductsTopupRequestWithBody generates requests for PutProductsTopup with any type of body
func NewPutProductsTopupRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/topup")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProductsUserUserIdRequest generates requests for GetProductsUserUserId
func NewGetProductsUserUserIdRequest(server string, userId string, params *GetProductsUserUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Products/user/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.ProductSlugs != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productSlugs", runtime.ParamLocationQuery, *params.ProductSlugs); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRulesRequest generates requests for GetRules
func NewGetRulesRequest(server string, params *GetRulesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Amount != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "amount", runtime.ParamLocationQuery, *params.Amount); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostRulesRequestWithApplicationWildcardPlusJSONBody calls the generic PostRules builder with application/*+json body
func NewPostRulesRequestWithApplicationWildcardPlusJSONBody(server string, body PostRulesApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRulesRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostRulesRequest calls the generic PostRules builder with application/json body
func NewPostRulesRequest(server string, body PostRulesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRulesRequestWithBody(server, "application/json", bodyReader)
}

// NewPostRulesRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostRules builder with application/json-patch+json body
func NewPostRulesRequestWithApplicationJSONPatchPlusJSONBody(server string, body PostRulesApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostRulesRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPostRulesRequestWithBody generates requests for PostRules with any type of body
func NewPostRulesRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Rules")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteRulesRuleSlugRequest generates requests for DeleteRulesRuleSlug
func NewDeleteRulesRuleSlugRequest(server string, ruleSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleSlug", runtime.ParamLocationPath, ruleSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetRulesRuleSlugRequest generates requests for GetRulesRuleSlug
func NewGetRulesRuleSlugRequest(server string, ruleSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "ruleSlug", runtime.ParamLocationPath, ruleSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Rules/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTopUpCompensateRequestWithApplicationWildcardPlusJSONBody calls the generic PostTopUpCompensate builder with application/*+json body
func NewPostTopUpCompensateRequestWithApplicationWildcardPlusJSONBody(server string, body PostTopUpCompensateApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpCompensateRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostTopUpCompensateRequest calls the generic PostTopUpCompensate builder with application/json body
func NewPostTopUpCompensateRequest(server string, body PostTopUpCompensateJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpCompensateRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTopUpCompensateRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostTopUpCompensate builder with application/json-patch+json body
func NewPostTopUpCompensateRequestWithApplicationJSONPatchPlusJSONBody(server string, body PostTopUpCompensateApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpCompensateRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPostTopUpCompensateRequestWithBody generates requests for PostTopUpCompensate with any type of body
func NewPostTopUpCompensateRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/TopUp/compensate")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTopUpCustomRequestWithApplicationWildcardPlusJSONBody calls the generic PostTopUpCustom builder with application/*+json body
func NewPostTopUpCustomRequestWithApplicationWildcardPlusJSONBody(server string, params *PostTopUpCustomParams, body PostTopUpCustomApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpCustomRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostTopUpCustomRequest calls the generic PostTopUpCustom builder with application/json body
func NewPostTopUpCustomRequest(server string, params *PostTopUpCustomParams, body PostTopUpCustomJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpCustomRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTopUpCustomRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostTopUpCustom builder with application/json-patch+json body
func NewPostTopUpCustomRequestWithApplicationJSONPatchPlusJSONBody(server string, params *PostTopUpCustomParams, body PostTopUpCustomApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpCustomRequestWithBody(server, params, "application/json-patch+json", bodyReader)
}

// NewPostTopUpCustomRequestWithBody generates requests for PostTopUpCustom with any type of body
func NewPostTopUpCustomRequestWithBody(server string, params *PostTopUpCustomParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/TopUp/custom")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTopUpLemonsqueezyRequestWithApplicationWildcardPlusJSONBody calls the generic PostTopUpLemonsqueezy builder with application/*+json body
func NewPostTopUpLemonsqueezyRequestWithApplicationWildcardPlusJSONBody(server string, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpLemonsqueezyRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostTopUpLemonsqueezyRequest calls the generic PostTopUpLemonsqueezy builder with application/json body
func NewPostTopUpLemonsqueezyRequest(server string, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpLemonsqueezyRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTopUpLemonsqueezyRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostTopUpLemonsqueezy builder with application/json-patch+json body
func NewPostTopUpLemonsqueezyRequestWithApplicationJSONPatchPlusJSONBody(server string, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpLemonsqueezyRequestWithBody(server, params, "application/json-patch+json", bodyReader)
}

// NewPostTopUpLemonsqueezyRequestWithBody generates requests for PostTopUpLemonsqueezy with any type of body
func NewPostTopUpLemonsqueezyRequestWithBody(server string, params *PostTopUpLemonsqueezyParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/TopUp/lemonsqueezy")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productId", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTopUpOptionsRequest generates requests for GetTopUpOptions
func NewGetTopUpOptionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/TopUp/options")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTopUpPaypalRequestWithApplicationWildcardPlusJSONBody calls the generic PostTopUpPaypal builder with application/*+json body
func NewPostTopUpPaypalRequestWithApplicationWildcardPlusJSONBody(server string, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpPaypalRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostTopUpPaypalRequest calls the generic PostTopUpPaypal builder with application/json body
func NewPostTopUpPaypalRequest(server string, params *PostTopUpPaypalParams, body PostTopUpPaypalJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpPaypalRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTopUpPaypalRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostTopUpPaypal builder with application/json-patch+json body
func NewPostTopUpPaypalRequestWithApplicationJSONPatchPlusJSONBody(server string, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpPaypalRequestWithBody(server, params, "application/json-patch+json", bodyReader)
}

// NewPostTopUpPaypalRequestWithBody generates requests for PostTopUpPaypal with any type of body
func NewPostTopUpPaypalRequestWithBody(server string, params *PostTopUpPaypalParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/TopUp/paypal")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productId", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTopUpStripeRequestWithApplicationWildcardPlusJSONBody calls the generic PostTopUpStripe builder with application/*+json body
func NewPostTopUpStripeRequestWithApplicationWildcardPlusJSONBody(server string, params *PostTopUpStripeParams, body PostTopUpStripeApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpStripeRequestWithBody(server, params, "application/*+json", bodyReader)
}

// NewPostTopUpStripeRequest calls the generic PostTopUpStripe builder with application/json body
func NewPostTopUpStripeRequest(server string, params *PostTopUpStripeParams, body PostTopUpStripeJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpStripeRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPostTopUpStripeRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostTopUpStripe builder with application/json-patch+json body
func NewPostTopUpStripeRequestWithApplicationJSONPatchPlusJSONBody(server string, params *PostTopUpStripeParams, body PostTopUpStripeApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTopUpStripeRequestWithBody(server, params, "application/json-patch+json", bodyReader)
}

// NewPostTopUpStripeRequestWithBody generates requests for PostTopUpStripe with any type of body
func NewPostTopUpStripeRequestWithBody(server string, params *PostTopUpStripeParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/TopUp/stripe")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.UserId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "userId", runtime.ParamLocationQuery, *params.UserId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.ProductId != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "productId", runtime.ParamLocationQuery, *params.ProductId); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransactionPlanedUUserIdRequest generates requests for GetTransactionPlanedUUserId
func NewGetTransactionPlanedUUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Transaction/planed/u/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostTransactionPlanedUUserIdRequestWithApplicationWildcardPlusJSONBody calls the generic PostTransactionPlanedUUserId builder with application/*+json body
func NewPostTransactionPlanedUUserIdRequestWithApplicationWildcardPlusJSONBody(server string, userId string, body PostTransactionPlanedUUserIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionPlanedUUserIdRequestWithBody(server, userId, "application/*+json", bodyReader)
}

// NewPostTransactionPlanedUUserIdRequest calls the generic PostTransactionPlanedUUserId builder with application/json body
func NewPostTransactionPlanedUUserIdRequest(server string, userId string, body PostTransactionPlanedUUserIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionPlanedUUserIdRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostTransactionPlanedUUserIdRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostTransactionPlanedUUserId builder with application/json-patch+json body
func NewPostTransactionPlanedUUserIdRequestWithApplicationJSONPatchPlusJSONBody(server string, userId string, body PostTransactionPlanedUUserIdApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionPlanedUUserIdRequestWithBody(server, userId, "application/json-patch+json", bodyReader)
}

// NewPostTransactionPlanedUUserIdRequestWithBody generates requests for PostTransactionPlanedUUserId with any type of body
func NewPostTransactionPlanedUUserIdRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Transaction/planed/u/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteTransactionPlanedUUserIdTTransactionIdRequest generates requests for DeleteTransactionPlanedUUserIdTTransactionId
func NewDeleteTransactionPlanedUUserIdTTransactionIdRequest(server string, userId string, transactionId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Transaction/planed/u/%s/t/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPutTransactionPlanedUUserIdTTransactionIdRequestWithApplicationWildcardPlusJSONBody calls the generic PutTransactionPlanedUUserIdTTransactionId builder with application/*+json body
func NewPutTransactionPlanedUUserIdTTransactionIdRequestWithApplicationWildcardPlusJSONBody(server string, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransactionPlanedUUserIdTTransactionIdRequestWithBody(server, userId, transactionId, "application/*+json", bodyReader)
}

// NewPutTransactionPlanedUUserIdTTransactionIdRequest calls the generic PutTransactionPlanedUUserIdTTransactionId builder with application/json body
func NewPutTransactionPlanedUUserIdTTransactionIdRequest(server string, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransactionPlanedUUserIdTTransactionIdRequestWithBody(server, userId, transactionId, "application/json", bodyReader)
}

// NewPutTransactionPlanedUUserIdTTransactionIdRequestWithApplicationJSONPatchPlusJSONBody calls the generic PutTransactionPlanedUUserIdTTransactionId builder with application/json-patch+json body
func NewPutTransactionPlanedUUserIdTTransactionIdRequestWithApplicationJSONPatchPlusJSONBody(server string, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPutTransactionPlanedUUserIdTTransactionIdRequestWithBody(server, userId, transactionId, "application/json-patch+json", bodyReader)
}

// NewPutTransactionPlanedUUserIdTTransactionIdRequestWithBody generates requests for PutTransactionPlanedUUserIdTTransactionId with any type of body
func NewPutTransactionPlanedUUserIdTTransactionIdRequestWithBody(server string, userId string, transactionId int32, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Transaction/planed/u/%s/t/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostTransactionSendRequestWithApplicationWildcardPlusJSONBody calls the generic PostTransactionSend builder with application/*+json body
func NewPostTransactionSendRequestWithApplicationWildcardPlusJSONBody(server string, body PostTransactionSendApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionSendRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostTransactionSendRequest calls the generic PostTransactionSend builder with application/json body
func NewPostTransactionSendRequest(server string, body PostTransactionSendJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionSendRequestWithBody(server, "application/json", bodyReader)
}

// NewPostTransactionSendRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostTransactionSend builder with application/json-patch+json body
func NewPostTransactionSendRequestWithApplicationJSONPatchPlusJSONBody(server string, body PostTransactionSendApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostTransactionSendRequestWithBody(server, "application/json-patch+json", bodyReader)
}

// NewPostTransactionSendRequestWithBody generates requests for PostTransactionSend with any type of body
func NewPostTransactionSendRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Transaction/send")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetTransactionUUserIdRequest generates requests for GetTransactionUUserId
func NewGetTransactionUUserIdRequest(server string, userId string, params *GetTransactionUUserIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Transaction/u/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetUserUserIdRequest generates requests for GetUserUserId
func NewGetUserUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdRequest generates requests for PostUserUserId
func NewPostUserUserIdRequest(server string, userId string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdOwnsRequestWithApplicationWildcardPlusJSONBody calls the generic PostUserUserIdOwns builder with application/*+json body
func NewPostUserUserIdOwnsRequestWithApplicationWildcardPlusJSONBody(server string, userId string, body PostUserUserIdOwnsApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsRequestWithBody(server, userId, "application/*+json", bodyReader)
}

// NewPostUserUserIdOwnsRequest calls the generic PostUserUserIdOwns builder with application/json body
func NewPostUserUserIdOwnsRequest(server string, userId string, body PostUserUserIdOwnsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUserUserIdOwnsRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostUserUserIdOwns builder with application/json-patch+json body
func NewPostUserUserIdOwnsRequestWithApplicationJSONPatchPlusJSONBody(server string, userId string, body PostUserUserIdOwnsApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsRequestWithBody(server, userId, "application/json-patch+json", bodyReader)
}

// NewPostUserUserIdOwnsRequestWithBody generates requests for PostUserUserIdOwns with any type of body
func NewPostUserUserIdOwnsRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/owns", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserUserIdOwnsLongestRequestWithApplicationWildcardPlusJSONBody calls the generic PostUserUserIdOwnsLongest builder with application/*+json body
func NewPostUserUserIdOwnsLongestRequestWithApplicationWildcardPlusJSONBody(server string, userId string, body PostUserUserIdOwnsLongestApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsLongestRequestWithBody(server, userId, "application/*+json", bodyReader)
}

// NewPostUserUserIdOwnsLongestRequest calls the generic PostUserUserIdOwnsLongest builder with application/json body
func NewPostUserUserIdOwnsLongestRequest(server string, userId string, body PostUserUserIdOwnsLongestJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsLongestRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUserUserIdOwnsLongestRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostUserUserIdOwnsLongest builder with application/json-patch+json body
func NewPostUserUserIdOwnsLongestRequestWithApplicationJSONPatchPlusJSONBody(server string, userId string, body PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsLongestRequestWithBody(server, userId, "application/json-patch+json", bodyReader)
}

// NewPostUserUserIdOwnsLongestRequestWithBody generates requests for PostUserUserIdOwnsLongest with any type of body
func NewPostUserUserIdOwnsLongestRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/owns/longest", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewPostUserUserIdOwnsUntilRequestWithApplicationWildcardPlusJSONBody calls the generic PostUserUserIdOwnsUntil builder with application/*+json body
func NewPostUserUserIdOwnsUntilRequestWithApplicationWildcardPlusJSONBody(server string, userId string, body PostUserUserIdOwnsUntilApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsUntilRequestWithBody(server, userId, "application/*+json", bodyReader)
}

// NewPostUserUserIdOwnsUntilRequest calls the generic PostUserUserIdOwnsUntil builder with application/json body
func NewPostUserUserIdOwnsUntilRequest(server string, userId string, body PostUserUserIdOwnsUntilJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsUntilRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUserUserIdOwnsUntilRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostUserUserIdOwnsUntil builder with application/json-patch+json body
func NewPostUserUserIdOwnsUntilRequestWithApplicationJSONPatchPlusJSONBody(server string, userId string, body PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdOwnsUntilRequestWithBody(server, userId, "application/json-patch+json", bodyReader)
}

// NewPostUserUserIdOwnsUntilRequestWithBody generates requests for PostUserUserIdOwnsUntil with any type of body
func NewPostUserUserIdOwnsUntilRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/owns/until", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetUserUserIdOwnsProductSlugUntilRequest generates requests for GetUserUserIdOwnsProductSlugUntil
func NewGetUserUserIdOwnsProductSlugUntilRequest(server string, userId string, productSlug string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productSlug", runtime.ParamLocationPath, productSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/owns/%s/until", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdPurchaseProductSlugRequest generates requests for PostUserUserIdPurchaseProductSlug
func NewPostUserUserIdPurchaseProductSlugRequest(server string, userId string, productSlug string, params *PostUserUserIdPurchaseProductSlugParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productSlug", runtime.ParamLocationPath, productSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/purchase/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Price != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "price", runtime.ParamLocationQuery, *params.Price); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdServicePurchaseProductSlugRequest generates requests for PostUserUserIdServicePurchaseProductSlug
func NewPostUserUserIdServicePurchaseProductSlugRequest(server string, userId string, productSlug string, params *PostUserUserIdServicePurchaseProductSlugParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "productSlug", runtime.ParamLocationPath, productSlug)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/service/purchase/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Reference != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "reference", runtime.ParamLocationQuery, *params.Reference); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostUserUserIdTransferRequestWithApplicationWildcardPlusJSONBody calls the generic PostUserUserIdTransfer builder with application/*+json body
func NewPostUserUserIdTransferRequestWithApplicationWildcardPlusJSONBody(server string, userId string, body PostUserUserIdTransferApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdTransferRequestWithBody(server, userId, "application/*+json", bodyReader)
}

// NewPostUserUserIdTransferRequest calls the generic PostUserUserIdTransfer builder with application/json body
func NewPostUserUserIdTransferRequest(server string, userId string, body PostUserUserIdTransferJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdTransferRequestWithBody(server, userId, "application/json", bodyReader)
}

// NewPostUserUserIdTransferRequestWithApplicationJSONPatchPlusJSONBody calls the generic PostUserUserIdTransfer builder with application/json-patch+json body
func NewPostUserUserIdTransferRequestWithApplicationJSONPatchPlusJSONBody(server string, userId string, body PostUserUserIdTransferApplicationJSONPatchPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostUserUserIdTransferRequestWithBody(server, userId, "application/json-patch+json", bodyReader)
}

// NewPostUserUserIdTransferRequestWithBody generates requests for PostUserUserIdTransfer with any type of body
func NewPostUserUserIdTransferRequestWithBody(server string, userId string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/transfer", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteUserUserIdTransactionIdRequest generates requests for DeleteUserUserIdTransactionId
func NewDeleteUserUserIdTransactionIdRequest(server string, userId string, transactionId int32) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "userId", runtime.ParamLocationPath, userId)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "transactionId", runtime.ParamLocationPath, transactionId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/User/%s/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// PostApplyWithBodyWithResponse request with any body
	PostApplyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplyResponse, error)

	PostApplyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApplyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplyResponse, error)

	PostApplyWithResponse(ctx context.Context, body PostApplyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplyResponse, error)

	PostApplyWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostApplyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplyResponse, error)

	// PostCallbackLemonsqueezyWithResponse request
	PostCallbackLemonsqueezyWithResponse(ctx context.Context, params *PostCallbackLemonsqueezyParams, reqEditors ...RequestEditorFn) (*PostCallbackLemonsqueezyResponse, error)

	// PostCallbackPaypalWithResponse request
	PostCallbackPaypalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCallbackPaypalResponse, error)

	// PostCallbackStripeWithResponse request
	PostCallbackStripeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCallbackStripeResponse, error)

	// GetGroupWithResponse request
	GetGroupWithResponse(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*GetGroupResponse, error)

	// PostGroupWithBodyWithResponse request with any body
	PostGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupResponse, error)

	PostGroupWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostGroupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error)

	PostGroupWithResponse(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error)

	PostGroupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error)

	// DeleteGroupGroupSlugWithResponse request
	DeleteGroupGroupSlugWithResponse(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugResponse, error)

	// GetGroupGroupSlugWithResponse request
	GetGroupGroupSlugWithResponse(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*GetGroupGroupSlugResponse, error)

	// PutGroupGroupSlugWithBodyWithResponse request with any body
	PutGroupGroupSlugWithBodyWithResponse(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error)

	PutGroupGroupSlugWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error)

	PutGroupGroupSlugWithResponse(ctx context.Context, groupSlug string, body PutGroupGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error)

	PutGroupGroupSlugWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error)

	// DeleteGroupGroupSlugProductsWithBodyWithResponse request with any body
	DeleteGroupGroupSlugProductsWithBodyWithResponse(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error)

	DeleteGroupGroupSlugProductsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error)

	DeleteGroupGroupSlugProductsWithResponse(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error)

	DeleteGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error)

	// PostGroupGroupSlugProductsWithBodyWithResponse request with any body
	PostGroupGroupSlugProductsWithBodyWithResponse(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error)

	PostGroupGroupSlugProductsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error)

	PostGroupGroupSlugProductsWithResponse(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error)

	PostGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error)

	// PostMaintenanceExtendWithResponse request
	PostMaintenanceExtendWithResponse(ctx context.Context, params *PostMaintenanceExtendParams, reqEditors ...RequestEditorFn) (*PostMaintenanceExtendResponse, error)

	// GetProductsWithResponse request
	GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error)

	// PutProductsWithBodyWithResponse request with any body
	PutProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsResponse, error)

	PutProductsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error)

	PutProductsWithResponse(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error)

	PutProductsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error)

	// GetProductsPProductSlugWithResponse request
	GetProductsPProductSlugWithResponse(ctx context.Context, productSlug string, reqEditors ...RequestEditorFn) (*GetProductsPProductSlugResponse, error)

	// GetProductsServiceServiceSlugCountWithResponse request
	GetProductsServiceServiceSlugCountWithResponse(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*GetProductsServiceServiceSlugCountResponse, error)

	// GetProductsServiceServiceSlugIdsWithResponse request
	GetProductsServiceServiceSlugIdsWithResponse(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*GetProductsServiceServiceSlugIdsResponse, error)

	// GetProductsServiceServiceSlugOwnedWithResponse request
	GetProductsServiceServiceSlugOwnedWithResponse(ctx context.Context, serviceSlug string, params *GetProductsServiceServiceSlugOwnedParams, reqEditors ...RequestEditorFn) (*GetProductsServiceServiceSlugOwnedResponse, error)

	// GetProductsServicesWithResponse request
	GetProductsServicesWithResponse(ctx context.Context, params *GetProductsServicesParams, reqEditors ...RequestEditorFn) (*GetProductsServicesResponse, error)

	// GetProductsTopupWithResponse request
	GetProductsTopupWithResponse(ctx context.Context, params *GetProductsTopupParams, reqEditors ...RequestEditorFn) (*GetProductsTopupResponse, error)

	// PutProductsTopupWithBodyWithResponse request with any body
	PutProductsTopupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error)

	PutProductsTopupWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutProductsTopupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error)

	PutProductsTopupWithResponse(ctx context.Context, body PutProductsTopupJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error)

	PutProductsTopupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutProductsTopupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error)

	// GetProductsUserUserIdWithResponse request
	GetProductsUserUserIdWithResponse(ctx context.Context, userId string, params *GetProductsUserUserIdParams, reqEditors ...RequestEditorFn) (*GetProductsUserUserIdResponse, error)

	// GetRulesWithResponse request
	GetRulesWithResponse(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*GetRulesResponse, error)

	// PostRulesWithBodyWithResponse request with any body
	PostRulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRulesResponse, error)

	PostRulesWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostRulesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRulesResponse, error)

	PostRulesWithResponse(ctx context.Context, body PostRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRulesResponse, error)

	PostRulesWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostRulesApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRulesResponse, error)

	// DeleteRulesRuleSlugWithResponse request
	DeleteRulesRuleSlugWithResponse(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*DeleteRulesRuleSlugResponse, error)

	// GetRulesRuleSlugWithResponse request
	GetRulesRuleSlugWithResponse(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*GetRulesRuleSlugResponse, error)

	// PostTopUpCompensateWithBodyWithResponse request with any body
	PostTopUpCompensateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error)

	PostTopUpCompensateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostTopUpCompensateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error)

	PostTopUpCompensateWithResponse(ctx context.Context, body PostTopUpCompensateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error)

	PostTopUpCompensateWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostTopUpCompensateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error)

	// PostTopUpCustomWithBodyWithResponse request with any body
	PostTopUpCustomWithBodyWithResponse(ctx context.Context, params *PostTopUpCustomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error)

	PostTopUpCustomWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error)

	PostTopUpCustomWithResponse(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error)

	PostTopUpCustomWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error)

	// PostTopUpLemonsqueezyWithBodyWithResponse request with any body
	PostTopUpLemonsqueezyWithBodyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error)

	PostTopUpLemonsqueezyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error)

	PostTopUpLemonsqueezyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error)

	PostTopUpLemonsqueezyWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error)

	// GetTopUpOptionsWithResponse request
	GetTopUpOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopUpOptionsResponse, error)

	// PostTopUpPaypalWithBodyWithResponse request with any body
	PostTopUpPaypalWithBodyWithResponse(ctx context.Context, params *PostTopUpPaypalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error)

	PostTopUpPaypalWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error)

	PostTopUpPaypalWithResponse(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error)

	PostTopUpPaypalWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error)

	// PostTopUpStripeWithBodyWithResponse request with any body
	PostTopUpStripeWithBodyWithResponse(ctx context.Context, params *PostTopUpStripeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error)

	PostTopUpStripeWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error)

	PostTopUpStripeWithResponse(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error)

	PostTopUpStripeWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error)

	// GetTransactionPlanedUUserIdWithResponse request
	GetTransactionPlanedUUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetTransactionPlanedUUserIdResponse, error)

	// PostTransactionPlanedUUserIdWithBodyWithResponse request with any body
	PostTransactionPlanedUUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error)

	PostTransactionPlanedUUserIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error)

	PostTransactionPlanedUUserIdWithResponse(ctx context.Context, userId string, body PostTransactionPlanedUUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error)

	PostTransactionPlanedUUserIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error)

	// DeleteTransactionPlanedUUserIdTTransactionIdWithResponse request
	DeleteTransactionPlanedUUserIdTTransactionIdWithResponse(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*DeleteTransactionPlanedUUserIdTTransactionIdResponse, error)

	// PutTransactionPlanedUUserIdTTransactionIdWithBodyWithResponse request with any body
	PutTransactionPlanedUUserIdTTransactionIdWithBodyWithResponse(ctx context.Context, userId string, transactionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error)

	PutTransactionPlanedUUserIdTTransactionIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error)

	PutTransactionPlanedUUserIdTTransactionIdWithResponse(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error)

	PutTransactionPlanedUUserIdTTransactionIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error)

	// PostTransactionSendWithBodyWithResponse request with any body
	PostTransactionSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error)

	PostTransactionSendWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostTransactionSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error)

	PostTransactionSendWithResponse(ctx context.Context, body PostTransactionSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error)

	PostTransactionSendWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostTransactionSendApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error)

	// GetTransactionUUserIdWithResponse request
	GetTransactionUUserIdWithResponse(ctx context.Context, userId string, params *GetTransactionUUserIdParams, reqEditors ...RequestEditorFn) (*GetTransactionUUserIdResponse, error)

	// GetUserUserIdWithResponse request
	GetUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdResponse, error)

	// PostUserUserIdWithResponse request
	PostUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*PostUserUserIdResponse, error)

	// PostUserUserIdOwnsWithBodyWithResponse request with any body
	PostUserUserIdOwnsWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error)

	PostUserUserIdOwnsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error)

	PostUserUserIdOwnsWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error)

	PostUserUserIdOwnsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error)

	// PostUserUserIdOwnsLongestWithBodyWithResponse request with any body
	PostUserUserIdOwnsLongestWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error)

	PostUserUserIdOwnsLongestWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error)

	PostUserUserIdOwnsLongestWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsLongestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error)

	PostUserUserIdOwnsLongestWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error)

	// PostUserUserIdOwnsUntilWithBodyWithResponse request with any body
	PostUserUserIdOwnsUntilWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error)

	PostUserUserIdOwnsUntilWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error)

	PostUserUserIdOwnsUntilWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsUntilJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error)

	PostUserUserIdOwnsUntilWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error)

	// GetUserUserIdOwnsProductSlugUntilWithResponse request
	GetUserUserIdOwnsProductSlugUntilWithResponse(ctx context.Context, userId string, productSlug string, reqEditors ...RequestEditorFn) (*GetUserUserIdOwnsProductSlugUntilResponse, error)

	// PostUserUserIdPurchaseProductSlugWithResponse request
	PostUserUserIdPurchaseProductSlugWithResponse(ctx context.Context, userId string, productSlug string, params *PostUserUserIdPurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*PostUserUserIdPurchaseProductSlugResponse, error)

	// PostUserUserIdServicePurchaseProductSlugWithResponse request
	PostUserUserIdServicePurchaseProductSlugWithResponse(ctx context.Context, userId string, productSlug string, params *PostUserUserIdServicePurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*PostUserUserIdServicePurchaseProductSlugResponse, error)

	// PostUserUserIdTransferWithBodyWithResponse request with any body
	PostUserUserIdTransferWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error)

	PostUserUserIdTransferWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdTransferApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error)

	PostUserUserIdTransferWithResponse(ctx context.Context, userId string, body PostUserUserIdTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error)

	PostUserUserIdTransferWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdTransferApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error)

	// DeleteUserUserIdTransactionIdWithResponse request
	DeleteUserUserIdTransactionIdWithResponse(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*DeleteUserUserIdTransactionIdResponse, error)
}

type PostApplyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostApplyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostApplyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallbackLemonsqueezyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallbackLemonsqueezyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallbackLemonsqueezyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallbackPaypalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallbackPaypalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallbackPaypalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostCallbackStripeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostCallbackStripeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostCallbackStripeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Group
}

// Status returns HTTPResponse.Status
func (r GetGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r PostGroupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r DeleteGroupGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetGroupGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r GetGroupGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetGroupGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutGroupGroupSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r PutGroupGroupSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutGroupGroupSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteGroupGroupSlugProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r DeleteGroupGroupSlugProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteGroupGroupSlugProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostGroupGroupSlugProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Group
}

// Status returns HTTPResponse.Status
func (r PostGroupGroupSlugProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostGroupGroupSlugProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostMaintenanceExtendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int32
}

// Status returns HTTPResponse.Status
func (r PostMaintenanceExtendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostMaintenanceExtendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PurchaseableProduct
}

// Status returns HTTPResponse.Status
func (r GetProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProductsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseableProduct
}

// Status returns HTTPResponse.Status
func (r PutProductsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProductsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsPProductSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PurchaseableProduct
}

// Status returns HTTPResponse.Status
func (r GetProductsPProductSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsPProductSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsServiceServiceSlugCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int32
}

// Status returns HTTPResponse.Status
func (r GetProductsServiceServiceSlugCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsServiceServiceSlugCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsServiceServiceSlugIdsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]string
}

// Status returns HTTPResponse.Status
func (r GetProductsServiceServiceSlugIdsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsServiceServiceSlugIdsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsServiceServiceSlugOwnedResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OwnershipTimeFrame
}

// Status returns HTTPResponse.Status
func (r GetProductsServiceServiceSlugOwnedResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsServiceServiceSlugOwnedResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsServicesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]PurchaseableProduct
}

// Status returns HTTPResponse.Status
func (r GetProductsServicesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsServicesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsTopupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TopUpProduct
}

// Status returns HTTPResponse.Status
func (r GetProductsTopupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsTopupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutProductsTopupResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopUpProduct
}

// Status returns HTTPResponse.Status
func (r PutProductsTopupResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutProductsTopupResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProductsUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]RuleResult
}

// Status returns HTTPResponse.Status
func (r GetProductsUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProductsUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]Rule
}

// Status returns HTTPResponse.Status
func (r GetRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostRulesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
}

// Status returns HTTPResponse.Status
func (r PostRulesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostRulesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteRulesRuleSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
}

// Status returns HTTPResponse.Status
func (r DeleteRulesRuleSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteRulesRuleSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetRulesRuleSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Rule
}

// Status returns HTTPResponse.Status
func (r GetRulesRuleSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetRulesRuleSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTopUpCompensateResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Int32Int32ValueTuple
}

// Status returns HTTPResponse.Status
func (r PostTopUpCompensateResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTopUpCompensateResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTopUpCustomResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopUpIdResponse
}

// Status returns HTTPResponse.Status
func (r PostTopUpCustomResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTopUpCustomResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTopUpLemonsqueezyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopUpIdResponse
}

// Status returns HTTPResponse.Status
func (r PostTopUpLemonsqueezyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTopUpLemonsqueezyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTopUpOptionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]TopUpProduct
}

// Status returns HTTPResponse.Status
func (r GetTopUpOptionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTopUpOptionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTopUpPaypalResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopUpIdResponse
}

// Status returns HTTPResponse.Status
func (r PostTopUpPaypalResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTopUpPaypalResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTopUpStripeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TopUpIdResponse
}

// Status returns HTTPResponse.Status
func (r PostTopUpStripeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTopUpStripeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionPlanedUUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ExternalTransaction
}

// Status returns HTTPResponse.Status
func (r GetTransactionPlanedUUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionPlanedUUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTransactionPlanedUUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlanedTransaction
}

// Status returns HTTPResponse.Status
func (r PostTransactionPlanedUUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTransactionPlanedUUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteTransactionPlanedUUserIdTTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlanedTransaction
}

// Status returns HTTPResponse.Status
func (r DeleteTransactionPlanedUUserIdTTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteTransactionPlanedUUserIdTTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PutTransactionPlanedUUserIdTTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *PlanedTransaction
}

// Status returns HTTPResponse.Status
func (r PutTransactionPlanedUUserIdTTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PutTransactionPlanedUUserIdTTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostTransactionSendResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostTransactionSendResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostTransactionSendResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetTransactionUUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ExternalTransaction
}

// Status returns HTTPResponse.Status
func (r GetTransactionUUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetTransactionUUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdOwnsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]OwnerShip
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdOwnsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdOwnsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdOwnsLongestResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *time.Time
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdOwnsLongestResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdOwnsLongestResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdOwnsUntilResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]time.Time
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdOwnsUntilResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdOwnsUntilResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetUserUserIdOwnsProductSlugUntilResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *time.Time
}

// Status returns HTTPResponse.Status
func (r GetUserUserIdOwnsProductSlugUntilResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetUserUserIdOwnsProductSlugUntilResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdPurchaseProductSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdPurchaseProductSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdPurchaseProductSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdServicePurchaseProductSlugResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *User
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdServicePurchaseProductSlugResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdServicePurchaseProductSlugResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostUserUserIdTransferResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionEvent
}

// Status returns HTTPResponse.Status
func (r PostUserUserIdTransferResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostUserUserIdTransferResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteUserUserIdTransactionIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *TransactionEvent
}

// Status returns HTTPResponse.Status
func (r DeleteUserUserIdTransactionIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteUserUserIdTransactionIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// PostApplyWithBodyWithResponse request with arbitrary body returning *PostApplyResponse
func (c *ClientWithResponses) PostApplyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostApplyResponse, error) {
	rsp, err := c.PostApplyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplyResponse(rsp)
}

func (c *ClientWithResponses) PostApplyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostApplyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplyResponse, error) {
	rsp, err := c.PostApplyWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplyResponse(rsp)
}

func (c *ClientWithResponses) PostApplyWithResponse(ctx context.Context, body PostApplyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplyResponse, error) {
	rsp, err := c.PostApply(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplyResponse(rsp)
}

func (c *ClientWithResponses) PostApplyWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostApplyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostApplyResponse, error) {
	rsp, err := c.PostApplyWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostApplyResponse(rsp)
}

// PostCallbackLemonsqueezyWithResponse request returning *PostCallbackLemonsqueezyResponse
func (c *ClientWithResponses) PostCallbackLemonsqueezyWithResponse(ctx context.Context, params *PostCallbackLemonsqueezyParams, reqEditors ...RequestEditorFn) (*PostCallbackLemonsqueezyResponse, error) {
	rsp, err := c.PostCallbackLemonsqueezy(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallbackLemonsqueezyResponse(rsp)
}

// PostCallbackPaypalWithResponse request returning *PostCallbackPaypalResponse
func (c *ClientWithResponses) PostCallbackPaypalWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCallbackPaypalResponse, error) {
	rsp, err := c.PostCallbackPaypal(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallbackPaypalResponse(rsp)
}

// PostCallbackStripeWithResponse request returning *PostCallbackStripeResponse
func (c *ClientWithResponses) PostCallbackStripeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostCallbackStripeResponse, error) {
	rsp, err := c.PostCallbackStripe(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostCallbackStripeResponse(rsp)
}

// GetGroupWithResponse request returning *GetGroupResponse
func (c *ClientWithResponses) GetGroupWithResponse(ctx context.Context, params *GetGroupParams, reqEditors ...RequestEditorFn) (*GetGroupResponse, error) {
	rsp, err := c.GetGroup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupResponse(rsp)
}

// PostGroupWithBodyWithResponse request with arbitrary body returning *PostGroupResponse
func (c *ClientWithResponses) PostGroupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupResponse, error) {
	rsp, err := c.PostGroupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

func (c *ClientWithResponses) PostGroupWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostGroupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error) {
	rsp, err := c.PostGroupWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

func (c *ClientWithResponses) PostGroupWithResponse(ctx context.Context, body PostGroupJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error) {
	rsp, err := c.PostGroup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

func (c *ClientWithResponses) PostGroupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostGroupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupResponse, error) {
	rsp, err := c.PostGroupWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupResponse(rsp)
}

// DeleteGroupGroupSlugWithResponse request returning *DeleteGroupGroupSlugResponse
func (c *ClientWithResponses) DeleteGroupGroupSlugWithResponse(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugResponse, error) {
	rsp, err := c.DeleteGroupGroupSlug(ctx, groupSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupGroupSlugResponse(rsp)
}

// GetGroupGroupSlugWithResponse request returning *GetGroupGroupSlugResponse
func (c *ClientWithResponses) GetGroupGroupSlugWithResponse(ctx context.Context, groupSlug string, reqEditors ...RequestEditorFn) (*GetGroupGroupSlugResponse, error) {
	rsp, err := c.GetGroupGroupSlug(ctx, groupSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetGroupGroupSlugResponse(rsp)
}

// PutGroupGroupSlugWithBodyWithResponse request with arbitrary body returning *PutGroupGroupSlugResponse
func (c *ClientWithResponses) PutGroupGroupSlugWithBodyWithResponse(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error) {
	rsp, err := c.PutGroupGroupSlugWithBody(ctx, groupSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupGroupSlugResponse(rsp)
}

func (c *ClientWithResponses) PutGroupGroupSlugWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error) {
	rsp, err := c.PutGroupGroupSlugWithApplicationWildcardPlusJSONBody(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupGroupSlugResponse(rsp)
}

func (c *ClientWithResponses) PutGroupGroupSlugWithResponse(ctx context.Context, groupSlug string, body PutGroupGroupSlugJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error) {
	rsp, err := c.PutGroupGroupSlug(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupGroupSlugResponse(rsp)
}

func (c *ClientWithResponses) PutGroupGroupSlugWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PutGroupGroupSlugApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutGroupGroupSlugResponse, error) {
	rsp, err := c.PutGroupGroupSlugWithApplicationJSONPatchPlusJSONBody(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutGroupGroupSlugResponse(rsp)
}

// DeleteGroupGroupSlugProductsWithBodyWithResponse request with arbitrary body returning *DeleteGroupGroupSlugProductsResponse
func (c *ClientWithResponses) DeleteGroupGroupSlugProductsWithBodyWithResponse(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error) {
	rsp, err := c.DeleteGroupGroupSlugProductsWithBody(ctx, groupSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupGroupSlugProductsResponse(rsp)
}

func (c *ClientWithResponses) DeleteGroupGroupSlugProductsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error) {
	rsp, err := c.DeleteGroupGroupSlugProductsWithApplicationWildcardPlusJSONBody(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupGroupSlugProductsResponse(rsp)
}

func (c *ClientWithResponses) DeleteGroupGroupSlugProductsWithResponse(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error) {
	rsp, err := c.DeleteGroupGroupSlugProducts(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupGroupSlugProductsResponse(rsp)
}

func (c *ClientWithResponses) DeleteGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body DeleteGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*DeleteGroupGroupSlugProductsResponse, error) {
	rsp, err := c.DeleteGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBody(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteGroupGroupSlugProductsResponse(rsp)
}

// PostGroupGroupSlugProductsWithBodyWithResponse request with arbitrary body returning *PostGroupGroupSlugProductsResponse
func (c *ClientWithResponses) PostGroupGroupSlugProductsWithBodyWithResponse(ctx context.Context, groupSlug string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error) {
	rsp, err := c.PostGroupGroupSlugProductsWithBody(ctx, groupSlug, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGroupSlugProductsResponse(rsp)
}

func (c *ClientWithResponses) PostGroupGroupSlugProductsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error) {
	rsp, err := c.PostGroupGroupSlugProductsWithApplicationWildcardPlusJSONBody(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGroupSlugProductsResponse(rsp)
}

func (c *ClientWithResponses) PostGroupGroupSlugProductsWithResponse(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error) {
	rsp, err := c.PostGroupGroupSlugProducts(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGroupSlugProductsResponse(rsp)
}

func (c *ClientWithResponses) PostGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, groupSlug string, body PostGroupGroupSlugProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostGroupGroupSlugProductsResponse, error) {
	rsp, err := c.PostGroupGroupSlugProductsWithApplicationJSONPatchPlusJSONBody(ctx, groupSlug, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostGroupGroupSlugProductsResponse(rsp)
}

// PostMaintenanceExtendWithResponse request returning *PostMaintenanceExtendResponse
func (c *ClientWithResponses) PostMaintenanceExtendWithResponse(ctx context.Context, params *PostMaintenanceExtendParams, reqEditors ...RequestEditorFn) (*PostMaintenanceExtendResponse, error) {
	rsp, err := c.PostMaintenanceExtend(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostMaintenanceExtendResponse(rsp)
}

// GetProductsWithResponse request returning *GetProductsResponse
func (c *ClientWithResponses) GetProductsWithResponse(ctx context.Context, params *GetProductsParams, reqEditors ...RequestEditorFn) (*GetProductsResponse, error) {
	rsp, err := c.GetProducts(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsResponse(rsp)
}

// PutProductsWithBodyWithResponse request with arbitrary body returning *PutProductsResponse
func (c *ClientWithResponses) PutProductsWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsResponse, error) {
	rsp, err := c.PutProductsWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsResponse(rsp)
}

func (c *ClientWithResponses) PutProductsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutProductsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error) {
	rsp, err := c.PutProductsWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsResponse(rsp)
}

func (c *ClientWithResponses) PutProductsWithResponse(ctx context.Context, body PutProductsJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error) {
	rsp, err := c.PutProducts(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsResponse(rsp)
}

func (c *ClientWithResponses) PutProductsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutProductsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsResponse, error) {
	rsp, err := c.PutProductsWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsResponse(rsp)
}

// GetProductsPProductSlugWithResponse request returning *GetProductsPProductSlugResponse
func (c *ClientWithResponses) GetProductsPProductSlugWithResponse(ctx context.Context, productSlug string, reqEditors ...RequestEditorFn) (*GetProductsPProductSlugResponse, error) {
	rsp, err := c.GetProductsPProductSlug(ctx, productSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsPProductSlugResponse(rsp)
}

// GetProductsServiceServiceSlugCountWithResponse request returning *GetProductsServiceServiceSlugCountResponse
func (c *ClientWithResponses) GetProductsServiceServiceSlugCountWithResponse(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*GetProductsServiceServiceSlugCountResponse, error) {
	rsp, err := c.GetProductsServiceServiceSlugCount(ctx, serviceSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsServiceServiceSlugCountResponse(rsp)
}

// GetProductsServiceServiceSlugIdsWithResponse request returning *GetProductsServiceServiceSlugIdsResponse
func (c *ClientWithResponses) GetProductsServiceServiceSlugIdsWithResponse(ctx context.Context, serviceSlug string, reqEditors ...RequestEditorFn) (*GetProductsServiceServiceSlugIdsResponse, error) {
	rsp, err := c.GetProductsServiceServiceSlugIds(ctx, serviceSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsServiceServiceSlugIdsResponse(rsp)
}

// GetProductsServiceServiceSlugOwnedWithResponse request returning *GetProductsServiceServiceSlugOwnedResponse
func (c *ClientWithResponses) GetProductsServiceServiceSlugOwnedWithResponse(ctx context.Context, serviceSlug string, params *GetProductsServiceServiceSlugOwnedParams, reqEditors ...RequestEditorFn) (*GetProductsServiceServiceSlugOwnedResponse, error) {
	rsp, err := c.GetProductsServiceServiceSlugOwned(ctx, serviceSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsServiceServiceSlugOwnedResponse(rsp)
}

// GetProductsServicesWithResponse request returning *GetProductsServicesResponse
func (c *ClientWithResponses) GetProductsServicesWithResponse(ctx context.Context, params *GetProductsServicesParams, reqEditors ...RequestEditorFn) (*GetProductsServicesResponse, error) {
	rsp, err := c.GetProductsServices(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsServicesResponse(rsp)
}

// GetProductsTopupWithResponse request returning *GetProductsTopupResponse
func (c *ClientWithResponses) GetProductsTopupWithResponse(ctx context.Context, params *GetProductsTopupParams, reqEditors ...RequestEditorFn) (*GetProductsTopupResponse, error) {
	rsp, err := c.GetProductsTopup(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsTopupResponse(rsp)
}

// PutProductsTopupWithBodyWithResponse request with arbitrary body returning *PutProductsTopupResponse
func (c *ClientWithResponses) PutProductsTopupWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error) {
	rsp, err := c.PutProductsTopupWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsTopupResponse(rsp)
}

func (c *ClientWithResponses) PutProductsTopupWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PutProductsTopupApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error) {
	rsp, err := c.PutProductsTopupWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsTopupResponse(rsp)
}

func (c *ClientWithResponses) PutProductsTopupWithResponse(ctx context.Context, body PutProductsTopupJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error) {
	rsp, err := c.PutProductsTopup(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsTopupResponse(rsp)
}

func (c *ClientWithResponses) PutProductsTopupWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PutProductsTopupApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutProductsTopupResponse, error) {
	rsp, err := c.PutProductsTopupWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutProductsTopupResponse(rsp)
}

// GetProductsUserUserIdWithResponse request returning *GetProductsUserUserIdResponse
func (c *ClientWithResponses) GetProductsUserUserIdWithResponse(ctx context.Context, userId string, params *GetProductsUserUserIdParams, reqEditors ...RequestEditorFn) (*GetProductsUserUserIdResponse, error) {
	rsp, err := c.GetProductsUserUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProductsUserUserIdResponse(rsp)
}

// GetRulesWithResponse request returning *GetRulesResponse
func (c *ClientWithResponses) GetRulesWithResponse(ctx context.Context, params *GetRulesParams, reqEditors ...RequestEditorFn) (*GetRulesResponse, error) {
	rsp, err := c.GetRules(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRulesResponse(rsp)
}

// PostRulesWithBodyWithResponse request with arbitrary body returning *PostRulesResponse
func (c *ClientWithResponses) PostRulesWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostRulesResponse, error) {
	rsp, err := c.PostRulesWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRulesResponse(rsp)
}

func (c *ClientWithResponses) PostRulesWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostRulesApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRulesResponse, error) {
	rsp, err := c.PostRulesWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRulesResponse(rsp)
}

func (c *ClientWithResponses) PostRulesWithResponse(ctx context.Context, body PostRulesJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRulesResponse, error) {
	rsp, err := c.PostRules(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRulesResponse(rsp)
}

func (c *ClientWithResponses) PostRulesWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostRulesApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostRulesResponse, error) {
	rsp, err := c.PostRulesWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostRulesResponse(rsp)
}

// DeleteRulesRuleSlugWithResponse request returning *DeleteRulesRuleSlugResponse
func (c *ClientWithResponses) DeleteRulesRuleSlugWithResponse(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*DeleteRulesRuleSlugResponse, error) {
	rsp, err := c.DeleteRulesRuleSlug(ctx, ruleSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteRulesRuleSlugResponse(rsp)
}

// GetRulesRuleSlugWithResponse request returning *GetRulesRuleSlugResponse
func (c *ClientWithResponses) GetRulesRuleSlugWithResponse(ctx context.Context, ruleSlug string, reqEditors ...RequestEditorFn) (*GetRulesRuleSlugResponse, error) {
	rsp, err := c.GetRulesRuleSlug(ctx, ruleSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetRulesRuleSlugResponse(rsp)
}

// PostTopUpCompensateWithBodyWithResponse request with arbitrary body returning *PostTopUpCompensateResponse
func (c *ClientWithResponses) PostTopUpCompensateWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error) {
	rsp, err := c.PostTopUpCompensateWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCompensateResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpCompensateWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostTopUpCompensateApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error) {
	rsp, err := c.PostTopUpCompensateWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCompensateResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpCompensateWithResponse(ctx context.Context, body PostTopUpCompensateJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error) {
	rsp, err := c.PostTopUpCompensate(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCompensateResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpCompensateWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostTopUpCompensateApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCompensateResponse, error) {
	rsp, err := c.PostTopUpCompensateWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCompensateResponse(rsp)
}

// PostTopUpCustomWithBodyWithResponse request with arbitrary body returning *PostTopUpCustomResponse
func (c *ClientWithResponses) PostTopUpCustomWithBodyWithResponse(ctx context.Context, params *PostTopUpCustomParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error) {
	rsp, err := c.PostTopUpCustomWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCustomResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpCustomWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error) {
	rsp, err := c.PostTopUpCustomWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCustomResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpCustomWithResponse(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error) {
	rsp, err := c.PostTopUpCustom(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCustomResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpCustomWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpCustomParams, body PostTopUpCustomApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpCustomResponse, error) {
	rsp, err := c.PostTopUpCustomWithApplicationJSONPatchPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpCustomResponse(rsp)
}

// PostTopUpLemonsqueezyWithBodyWithResponse request with arbitrary body returning *PostTopUpLemonsqueezyResponse
func (c *ClientWithResponses) PostTopUpLemonsqueezyWithBodyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error) {
	rsp, err := c.PostTopUpLemonsqueezyWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpLemonsqueezyResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpLemonsqueezyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error) {
	rsp, err := c.PostTopUpLemonsqueezyWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpLemonsqueezyResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpLemonsqueezyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error) {
	rsp, err := c.PostTopUpLemonsqueezy(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpLemonsqueezyResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpLemonsqueezyWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpLemonsqueezyParams, body PostTopUpLemonsqueezyApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpLemonsqueezyResponse, error) {
	rsp, err := c.PostTopUpLemonsqueezyWithApplicationJSONPatchPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpLemonsqueezyResponse(rsp)
}

// GetTopUpOptionsWithResponse request returning *GetTopUpOptionsResponse
func (c *ClientWithResponses) GetTopUpOptionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetTopUpOptionsResponse, error) {
	rsp, err := c.GetTopUpOptions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTopUpOptionsResponse(rsp)
}

// PostTopUpPaypalWithBodyWithResponse request with arbitrary body returning *PostTopUpPaypalResponse
func (c *ClientWithResponses) PostTopUpPaypalWithBodyWithResponse(ctx context.Context, params *PostTopUpPaypalParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error) {
	rsp, err := c.PostTopUpPaypalWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpPaypalResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpPaypalWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error) {
	rsp, err := c.PostTopUpPaypalWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpPaypalResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpPaypalWithResponse(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error) {
	rsp, err := c.PostTopUpPaypal(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpPaypalResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpPaypalWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpPaypalParams, body PostTopUpPaypalApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpPaypalResponse, error) {
	rsp, err := c.PostTopUpPaypalWithApplicationJSONPatchPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpPaypalResponse(rsp)
}

// PostTopUpStripeWithBodyWithResponse request with arbitrary body returning *PostTopUpStripeResponse
func (c *ClientWithResponses) PostTopUpStripeWithBodyWithResponse(ctx context.Context, params *PostTopUpStripeParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error) {
	rsp, err := c.PostTopUpStripeWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpStripeResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpStripeWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error) {
	rsp, err := c.PostTopUpStripeWithApplicationWildcardPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpStripeResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpStripeWithResponse(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error) {
	rsp, err := c.PostTopUpStripe(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpStripeResponse(rsp)
}

func (c *ClientWithResponses) PostTopUpStripeWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, params *PostTopUpStripeParams, body PostTopUpStripeApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTopUpStripeResponse, error) {
	rsp, err := c.PostTopUpStripeWithApplicationJSONPatchPlusJSONBody(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTopUpStripeResponse(rsp)
}

// GetTransactionPlanedUUserIdWithResponse request returning *GetTransactionPlanedUUserIdResponse
func (c *ClientWithResponses) GetTransactionPlanedUUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetTransactionPlanedUUserIdResponse, error) {
	rsp, err := c.GetTransactionPlanedUUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionPlanedUUserIdResponse(rsp)
}

// PostTransactionPlanedUUserIdWithBodyWithResponse request with arbitrary body returning *PostTransactionPlanedUUserIdResponse
func (c *ClientWithResponses) PostTransactionPlanedUUserIdWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error) {
	rsp, err := c.PostTransactionPlanedUUserIdWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionPlanedUUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionPlanedUUserIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error) {
	rsp, err := c.PostTransactionPlanedUUserIdWithApplicationWildcardPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionPlanedUUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionPlanedUUserIdWithResponse(ctx context.Context, userId string, body PostTransactionPlanedUUserIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error) {
	rsp, err := c.PostTransactionPlanedUUserId(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionPlanedUUserIdResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionPlanedUUserIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostTransactionPlanedUUserIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionPlanedUUserIdResponse, error) {
	rsp, err := c.PostTransactionPlanedUUserIdWithApplicationJSONPatchPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionPlanedUUserIdResponse(rsp)
}

// DeleteTransactionPlanedUUserIdTTransactionIdWithResponse request returning *DeleteTransactionPlanedUUserIdTTransactionIdResponse
func (c *ClientWithResponses) DeleteTransactionPlanedUUserIdTTransactionIdWithResponse(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*DeleteTransactionPlanedUUserIdTTransactionIdResponse, error) {
	rsp, err := c.DeleteTransactionPlanedUUserIdTTransactionId(ctx, userId, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteTransactionPlanedUUserIdTTransactionIdResponse(rsp)
}

// PutTransactionPlanedUUserIdTTransactionIdWithBodyWithResponse request with arbitrary body returning *PutTransactionPlanedUUserIdTTransactionIdResponse
func (c *ClientWithResponses) PutTransactionPlanedUUserIdTTransactionIdWithBodyWithResponse(ctx context.Context, userId string, transactionId int32, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error) {
	rsp, err := c.PutTransactionPlanedUUserIdTTransactionIdWithBody(ctx, userId, transactionId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionPlanedUUserIdTTransactionIdResponse(rsp)
}

func (c *ClientWithResponses) PutTransactionPlanedUUserIdTTransactionIdWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error) {
	rsp, err := c.PutTransactionPlanedUUserIdTTransactionIdWithApplicationWildcardPlusJSONBody(ctx, userId, transactionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionPlanedUUserIdTTransactionIdResponse(rsp)
}

func (c *ClientWithResponses) PutTransactionPlanedUUserIdTTransactionIdWithResponse(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error) {
	rsp, err := c.PutTransactionPlanedUUserIdTTransactionId(ctx, userId, transactionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionPlanedUUserIdTTransactionIdResponse(rsp)
}

func (c *ClientWithResponses) PutTransactionPlanedUUserIdTTransactionIdWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, transactionId int32, body PutTransactionPlanedUUserIdTTransactionIdApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error) {
	rsp, err := c.PutTransactionPlanedUUserIdTTransactionIdWithApplicationJSONPatchPlusJSONBody(ctx, userId, transactionId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePutTransactionPlanedUUserIdTTransactionIdResponse(rsp)
}

// PostTransactionSendWithBodyWithResponse request with arbitrary body returning *PostTransactionSendResponse
func (c *ClientWithResponses) PostTransactionSendWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error) {
	rsp, err := c.PostTransactionSendWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionSendResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionSendWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostTransactionSendApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error) {
	rsp, err := c.PostTransactionSendWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionSendResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionSendWithResponse(ctx context.Context, body PostTransactionSendJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error) {
	rsp, err := c.PostTransactionSend(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionSendResponse(rsp)
}

func (c *ClientWithResponses) PostTransactionSendWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, body PostTransactionSendApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostTransactionSendResponse, error) {
	rsp, err := c.PostTransactionSendWithApplicationJSONPatchPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostTransactionSendResponse(rsp)
}

// GetTransactionUUserIdWithResponse request returning *GetTransactionUUserIdResponse
func (c *ClientWithResponses) GetTransactionUUserIdWithResponse(ctx context.Context, userId string, params *GetTransactionUUserIdParams, reqEditors ...RequestEditorFn) (*GetTransactionUUserIdResponse, error) {
	rsp, err := c.GetTransactionUUserId(ctx, userId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetTransactionUUserIdResponse(rsp)
}

// GetUserUserIdWithResponse request returning *GetUserUserIdResponse
func (c *ClientWithResponses) GetUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*GetUserUserIdResponse, error) {
	rsp, err := c.GetUserUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdResponse(rsp)
}

// PostUserUserIdWithResponse request returning *PostUserUserIdResponse
func (c *ClientWithResponses) PostUserUserIdWithResponse(ctx context.Context, userId string, reqEditors ...RequestEditorFn) (*PostUserUserIdResponse, error) {
	rsp, err := c.PostUserUserId(ctx, userId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdResponse(rsp)
}

// PostUserUserIdOwnsWithBodyWithResponse request with arbitrary body returning *PostUserUserIdOwnsResponse
func (c *ClientWithResponses) PostUserUserIdOwnsWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error) {
	rsp, err := c.PostUserUserIdOwnsWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error) {
	rsp, err := c.PostUserUserIdOwnsWithApplicationWildcardPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error) {
	rsp, err := c.PostUserUserIdOwns(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsResponse, error) {
	rsp, err := c.PostUserUserIdOwnsWithApplicationJSONPatchPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsResponse(rsp)
}

// PostUserUserIdOwnsLongestWithBodyWithResponse request with arbitrary body returning *PostUserUserIdOwnsLongestResponse
func (c *ClientWithResponses) PostUserUserIdOwnsLongestWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error) {
	rsp, err := c.PostUserUserIdOwnsLongestWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsLongestResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsLongestWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error) {
	rsp, err := c.PostUserUserIdOwnsLongestWithApplicationWildcardPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsLongestResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsLongestWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsLongestJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error) {
	rsp, err := c.PostUserUserIdOwnsLongest(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsLongestResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsLongestWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsLongestApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsLongestResponse, error) {
	rsp, err := c.PostUserUserIdOwnsLongestWithApplicationJSONPatchPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsLongestResponse(rsp)
}

// PostUserUserIdOwnsUntilWithBodyWithResponse request with arbitrary body returning *PostUserUserIdOwnsUntilResponse
func (c *ClientWithResponses) PostUserUserIdOwnsUntilWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error) {
	rsp, err := c.PostUserUserIdOwnsUntilWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsUntilResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsUntilWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error) {
	rsp, err := c.PostUserUserIdOwnsUntilWithApplicationWildcardPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsUntilResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsUntilWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsUntilJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error) {
	rsp, err := c.PostUserUserIdOwnsUntil(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsUntilResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdOwnsUntilWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdOwnsUntilApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdOwnsUntilResponse, error) {
	rsp, err := c.PostUserUserIdOwnsUntilWithApplicationJSONPatchPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdOwnsUntilResponse(rsp)
}

// GetUserUserIdOwnsProductSlugUntilWithResponse request returning *GetUserUserIdOwnsProductSlugUntilResponse
func (c *ClientWithResponses) GetUserUserIdOwnsProductSlugUntilWithResponse(ctx context.Context, userId string, productSlug string, reqEditors ...RequestEditorFn) (*GetUserUserIdOwnsProductSlugUntilResponse, error) {
	rsp, err := c.GetUserUserIdOwnsProductSlugUntil(ctx, userId, productSlug, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetUserUserIdOwnsProductSlugUntilResponse(rsp)
}

// PostUserUserIdPurchaseProductSlugWithResponse request returning *PostUserUserIdPurchaseProductSlugResponse
func (c *ClientWithResponses) PostUserUserIdPurchaseProductSlugWithResponse(ctx context.Context, userId string, productSlug string, params *PostUserUserIdPurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*PostUserUserIdPurchaseProductSlugResponse, error) {
	rsp, err := c.PostUserUserIdPurchaseProductSlug(ctx, userId, productSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdPurchaseProductSlugResponse(rsp)
}

// PostUserUserIdServicePurchaseProductSlugWithResponse request returning *PostUserUserIdServicePurchaseProductSlugResponse
func (c *ClientWithResponses) PostUserUserIdServicePurchaseProductSlugWithResponse(ctx context.Context, userId string, productSlug string, params *PostUserUserIdServicePurchaseProductSlugParams, reqEditors ...RequestEditorFn) (*PostUserUserIdServicePurchaseProductSlugResponse, error) {
	rsp, err := c.PostUserUserIdServicePurchaseProductSlug(ctx, userId, productSlug, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdServicePurchaseProductSlugResponse(rsp)
}

// PostUserUserIdTransferWithBodyWithResponse request with arbitrary body returning *PostUserUserIdTransferResponse
func (c *ClientWithResponses) PostUserUserIdTransferWithBodyWithResponse(ctx context.Context, userId string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error) {
	rsp, err := c.PostUserUserIdTransferWithBody(ctx, userId, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdTransferResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdTransferWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdTransferApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error) {
	rsp, err := c.PostUserUserIdTransferWithApplicationWildcardPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdTransferResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdTransferWithResponse(ctx context.Context, userId string, body PostUserUserIdTransferJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error) {
	rsp, err := c.PostUserUserIdTransfer(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdTransferResponse(rsp)
}

func (c *ClientWithResponses) PostUserUserIdTransferWithApplicationJSONPatchPlusJSONBodyWithResponse(ctx context.Context, userId string, body PostUserUserIdTransferApplicationJSONPatchPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostUserUserIdTransferResponse, error) {
	rsp, err := c.PostUserUserIdTransferWithApplicationJSONPatchPlusJSONBody(ctx, userId, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostUserUserIdTransferResponse(rsp)
}

// DeleteUserUserIdTransactionIdWithResponse request returning *DeleteUserUserIdTransactionIdResponse
func (c *ClientWithResponses) DeleteUserUserIdTransactionIdWithResponse(ctx context.Context, userId string, transactionId int32, reqEditors ...RequestEditorFn) (*DeleteUserUserIdTransactionIdResponse, error) {
	rsp, err := c.DeleteUserUserIdTransactionId(ctx, userId, transactionId, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteUserUserIdTransactionIdResponse(rsp)
}

// ParsePostApplyResponse parses an HTTP response from a PostApplyWithResponse call
func ParsePostApplyResponse(rsp *http.Response) (*PostApplyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostApplyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallbackLemonsqueezyResponse parses an HTTP response from a PostCallbackLemonsqueezyWithResponse call
func ParsePostCallbackLemonsqueezyResponse(rsp *http.Response) (*PostCallbackLemonsqueezyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallbackLemonsqueezyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallbackPaypalResponse parses an HTTP response from a PostCallbackPaypalWithResponse call
func ParsePostCallbackPaypalResponse(rsp *http.Response) (*PostCallbackPaypalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallbackPaypalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostCallbackStripeResponse parses an HTTP response from a PostCallbackStripeWithResponse call
func ParsePostCallbackStripeResponse(rsp *http.Response) (*PostCallbackStripeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostCallbackStripeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetGroupResponse parses an HTTP response from a GetGroupWithResponse call
func ParseGetGroupResponse(rsp *http.Response) (*GetGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostGroupResponse parses an HTTP response from a PostGroupWithResponse call
func ParsePostGroupResponse(rsp *http.Response) (*PostGroupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteGroupGroupSlugResponse parses an HTTP response from a DeleteGroupGroupSlugWithResponse call
func ParseDeleteGroupGroupSlugResponse(rsp *http.Response) (*DeleteGroupGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetGroupGroupSlugResponse parses an HTTP response from a GetGroupGroupSlugWithResponse call
func ParseGetGroupGroupSlugResponse(rsp *http.Response) (*GetGroupGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetGroupGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutGroupGroupSlugResponse parses an HTTP response from a PutGroupGroupSlugWithResponse call
func ParsePutGroupGroupSlugResponse(rsp *http.Response) (*PutGroupGroupSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutGroupGroupSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteGroupGroupSlugProductsResponse parses an HTTP response from a DeleteGroupGroupSlugProductsWithResponse call
func ParseDeleteGroupGroupSlugProductsResponse(rsp *http.Response) (*DeleteGroupGroupSlugProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteGroupGroupSlugProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostGroupGroupSlugProductsResponse parses an HTTP response from a PostGroupGroupSlugProductsWithResponse call
func ParsePostGroupGroupSlugProductsResponse(rsp *http.Response) (*PostGroupGroupSlugProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostGroupGroupSlugProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Group
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostMaintenanceExtendResponse parses an HTTP response from a PostMaintenanceExtendWithResponse call
func ParsePostMaintenanceExtendResponse(rsp *http.Response) (*PostMaintenanceExtendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostMaintenanceExtendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsResponse parses an HTTP response from a GetProductsWithResponse call
func ParseGetProductsResponse(rsp *http.Response) (*GetProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PurchaseableProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutProductsResponse parses an HTTP response from a PutProductsWithResponse call
func ParsePutProductsResponse(rsp *http.Response) (*PutProductsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProductsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseableProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsPProductSlugResponse parses an HTTP response from a GetProductsPProductSlugWithResponse call
func ParseGetProductsPProductSlugResponse(rsp *http.Response) (*GetProductsPProductSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsPProductSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PurchaseableProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsServiceServiceSlugCountResponse parses an HTTP response from a GetProductsServiceServiceSlugCountWithResponse call
func ParseGetProductsServiceServiceSlugCountResponse(rsp *http.Response) (*GetProductsServiceServiceSlugCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsServiceServiceSlugCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsServiceServiceSlugIdsResponse parses an HTTP response from a GetProductsServiceServiceSlugIdsWithResponse call
func ParseGetProductsServiceServiceSlugIdsResponse(rsp *http.Response) (*GetProductsServiceServiceSlugIdsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsServiceServiceSlugIdsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsServiceServiceSlugOwnedResponse parses an HTTP response from a GetProductsServiceServiceSlugOwnedWithResponse call
func ParseGetProductsServiceServiceSlugOwnedResponse(rsp *http.Response) (*GetProductsServiceServiceSlugOwnedResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsServiceServiceSlugOwnedResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OwnershipTimeFrame
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsServicesResponse parses an HTTP response from a GetProductsServicesWithResponse call
func ParseGetProductsServicesResponse(rsp *http.Response) (*GetProductsServicesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsServicesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []PurchaseableProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsTopupResponse parses an HTTP response from a GetProductsTopupWithResponse call
func ParseGetProductsTopupResponse(rsp *http.Response) (*GetProductsTopupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsTopupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TopUpProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutProductsTopupResponse parses an HTTP response from a PutProductsTopupWithResponse call
func ParsePutProductsTopupResponse(rsp *http.Response) (*PutProductsTopupResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutProductsTopupResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopUpProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProductsUserUserIdResponse parses an HTTP response from a GetProductsUserUserIdWithResponse call
func ParseGetProductsUserUserIdResponse(rsp *http.Response) (*GetProductsUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProductsUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []RuleResult
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetRulesResponse parses an HTTP response from a GetRulesWithResponse call
func ParseGetRulesResponse(rsp *http.Response) (*GetRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostRulesResponse parses an HTTP response from a PostRulesWithResponse call
func ParsePostRulesResponse(rsp *http.Response) (*PostRulesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostRulesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteRulesRuleSlugResponse parses an HTTP response from a DeleteRulesRuleSlugWithResponse call
func ParseDeleteRulesRuleSlugResponse(rsp *http.Response) (*DeleteRulesRuleSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteRulesRuleSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetRulesRuleSlugResponse parses an HTTP response from a GetRulesRuleSlugWithResponse call
func ParseGetRulesRuleSlugResponse(rsp *http.Response) (*GetRulesRuleSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetRulesRuleSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Rule
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTopUpCompensateResponse parses an HTTP response from a PostTopUpCompensateWithResponse call
func ParsePostTopUpCompensateResponse(rsp *http.Response) (*PostTopUpCompensateResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTopUpCompensateResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Int32Int32ValueTuple
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTopUpCustomResponse parses an HTTP response from a PostTopUpCustomWithResponse call
func ParsePostTopUpCustomResponse(rsp *http.Response) (*PostTopUpCustomResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTopUpCustomResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopUpIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTopUpLemonsqueezyResponse parses an HTTP response from a PostTopUpLemonsqueezyWithResponse call
func ParsePostTopUpLemonsqueezyResponse(rsp *http.Response) (*PostTopUpLemonsqueezyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTopUpLemonsqueezyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopUpIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetTopUpOptionsResponse parses an HTTP response from a GetTopUpOptionsWithResponse call
func ParseGetTopUpOptionsResponse(rsp *http.Response) (*GetTopUpOptionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTopUpOptionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []TopUpProduct
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTopUpPaypalResponse parses an HTTP response from a PostTopUpPaypalWithResponse call
func ParsePostTopUpPaypalResponse(rsp *http.Response) (*PostTopUpPaypalResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTopUpPaypalResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopUpIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTopUpStripeResponse parses an HTTP response from a PostTopUpStripeWithResponse call
func ParsePostTopUpStripeResponse(rsp *http.Response) (*PostTopUpStripeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTopUpStripeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TopUpIdResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetTransactionPlanedUUserIdResponse parses an HTTP response from a GetTransactionPlanedUUserIdWithResponse call
func ParseGetTransactionPlanedUUserIdResponse(rsp *http.Response) (*GetTransactionPlanedUUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionPlanedUUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ExternalTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTransactionPlanedUUserIdResponse parses an HTTP response from a PostTransactionPlanedUUserIdWithResponse call
func ParsePostTransactionPlanedUUserIdResponse(rsp *http.Response) (*PostTransactionPlanedUUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTransactionPlanedUUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanedTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteTransactionPlanedUUserIdTTransactionIdResponse parses an HTTP response from a DeleteTransactionPlanedUUserIdTTransactionIdWithResponse call
func ParseDeleteTransactionPlanedUUserIdTTransactionIdResponse(rsp *http.Response) (*DeleteTransactionPlanedUUserIdTTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteTransactionPlanedUUserIdTTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanedTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePutTransactionPlanedUUserIdTTransactionIdResponse parses an HTTP response from a PutTransactionPlanedUUserIdTTransactionIdWithResponse call
func ParsePutTransactionPlanedUUserIdTTransactionIdResponse(rsp *http.Response) (*PutTransactionPlanedUUserIdTTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PutTransactionPlanedUUserIdTTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest PlanedTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostTransactionSendResponse parses an HTTP response from a PostTransactionSendWithResponse call
func ParsePostTransactionSendResponse(rsp *http.Response) (*PostTransactionSendResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostTransactionSendResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetTransactionUUserIdResponse parses an HTTP response from a GetTransactionUUserIdWithResponse call
func ParseGetTransactionUUserIdResponse(rsp *http.Response) (*GetTransactionUUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetTransactionUUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ExternalTransaction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetUserUserIdResponse parses an HTTP response from a GetUserUserIdWithResponse call
func ParseGetUserUserIdResponse(rsp *http.Response) (*GetUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported
	}

	return response, nil
}

// ParsePostUserUserIdResponse parses an HTTP response from a PostUserUserIdWithResponse call
func ParsePostUserUserIdResponse(rsp *http.Response) (*PostUserUserIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostUserUserIdOwnsResponse parses an HTTP response from a PostUserUserIdOwnsWithResponse call
func ParsePostUserUserIdOwnsResponse(rsp *http.Response) (*PostUserUserIdOwnsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdOwnsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []OwnerShip
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostUserUserIdOwnsLongestResponse parses an HTTP response from a PostUserUserIdOwnsLongestWithResponse call
func ParsePostUserUserIdOwnsLongestResponse(rsp *http.Response) (*PostUserUserIdOwnsLongestResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdOwnsLongestResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest time.Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostUserUserIdOwnsUntilResponse parses an HTTP response from a PostUserUserIdOwnsUntilWithResponse call
func ParsePostUserUserIdOwnsUntilResponse(rsp *http.Response) (*PostUserUserIdOwnsUntilResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdOwnsUntilResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]time.Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetUserUserIdOwnsProductSlugUntilResponse parses an HTTP response from a GetUserUserIdOwnsProductSlugUntilWithResponse call
func ParseGetUserUserIdOwnsProductSlugUntilResponse(rsp *http.Response) (*GetUserUserIdOwnsProductSlugUntilResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetUserUserIdOwnsProductSlugUntilResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest time.Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostUserUserIdPurchaseProductSlugResponse parses an HTTP response from a PostUserUserIdPurchaseProductSlugWithResponse call
func ParsePostUserUserIdPurchaseProductSlugResponse(rsp *http.Response) (*PostUserUserIdPurchaseProductSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdPurchaseProductSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostUserUserIdServicePurchaseProductSlugResponse parses an HTTP response from a PostUserUserIdServicePurchaseProductSlugWithResponse call
func ParsePostUserUserIdServicePurchaseProductSlugResponse(rsp *http.Response) (*PostUserUserIdServicePurchaseProductSlugResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdServicePurchaseProductSlugResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest User
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostUserUserIdTransferResponse parses an HTTP response from a PostUserUserIdTransferWithResponse call
func ParsePostUserUserIdTransferResponse(rsp *http.Response) (*PostUserUserIdTransferResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostUserUserIdTransferResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseDeleteUserUserIdTransactionIdResponse parses an HTTP response from a DeleteUserUserIdTransactionIdWithResponse call
func ParseDeleteUserUserIdTransactionIdResponse(rsp *http.Response) (*DeleteUserUserIdTransactionIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteUserUserIdTransactionIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest TransactionEvent
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd63Pbtpb/VzDc/ZDsKlaS3tvZ8TdH9U09dWOPLLez09vpQOShhBoEGAC0o3jyv9/B",
	"gy+JFEFKcl764pEl4OD1O08cAI9ByJOUM2BKBqePgQyXkGDzccKTFJjEinCm/8dRRPRnTK8FT0EoAjI4",
	"jTGVMAoikKEgqS1bq4piLpDkCaA7wiLEY0RYSCJgKhgFaYXSY4ATnjGlP9XJ/cwfUJKFS6Q4CnPSEIyC",
	"mIsEq+A0IEz98DoYBWqVgv0XFiCCT6aFKAvVRbRJdrYE5H5GJEL8gYGQuoMPS9LQGMsoxXMKwakSGRRt",
	"SSUIW+imBMQggIWw2dQZEoClmwy1hJIy4WyEMJUcSRD3IBGWKOLZnNbLoFTAPTBDzqMrD0tgDb1Q6GGJ",
	"FVIkATfcJUn1iCc8pgzUyTVeJRoKJ7/yCKg8uXbTI5c8oxGaA6Kc30FkxvFM95iEIFFCFkuF4ENKBERI",
	"EhbC8+ryRFjBC91qsNHXT8U3fP43hEr3fpJJxZMZT2/TnsCbQipA6hEgjEJDBuHo70wqPSy9pJihTOp1",
	"nmOK9VoNASGOorHM5lIJHKo1HP74j744/F2vSQ5EtSQShVyATDmLpG7tmaoANcQMRRATBqicF0SY7QLh",
	"7PmOUJ3mP42nFrKmR4qnWYoU53copTiEEYqyNKUkxAokeiCUanAI0EsIUXcXmpb9/IMCwTCdCcwkDr3k",
	"TtvaldAzvFQuCcuSuV0RYpaic6pqC9dvYjtLa5a4UThJ613uxy1vBc/68skZWuhaiBg+4ZSCmW4tCjgD",
	"xAVKuIAusbDBO6QB3deCJFis0C+w6iWxZRMp+wsiDpVmEMEoIAoSU/6/BcTBafBf41KrjZ1KG+ed/tQK",
	"TiwEXunfJc0Wm81faKVFYgJCz1OtAwn+cAlsoZbB6Q+vB4H/Qs+H+fMbphnMspRCT/TrWXhVQ1L7JOuy",
	"r73KNnX2SuuOmyXZRTyzugYyFkIu5OYr+7+W1Cf/Fv9mP2Np1KbVXFpDAzNflDSs9pEnG6B0PzRLdMrZ",
	"wlNTjbbC+yLqpQc6wZqJcIklaBQVwG1dCj0BM5LAvwRO+qIGWOQrfUaBVFgo/+J6/bwEZ9PIrilmEPVR",
	"BusyDpJ0CQJTpEoiSGltq7WoVE5rhUvMFhCdII20C6aARc7CIeyeGwPHVErwqlJJGw8UIi0r5ySKiMGR",
	"nymhDU9JPoIVI1DtXg2LHarraYBYSs0tRoO12FBRAkVYYWfsauuhHKBh51zTI1KIVDlCjCuQI5SAwrp6",
	"Xaz+38uRnz6VuT5dm/P8p0J2t816P+17XU5jD2y+wRJQSLGUZpJyxbaBoJDLFvzABxwqZBFmx1NYiFwq",
	"YzemTob4YarWxHqLP715cQn3QFHla8MPjCvNDRGRKcUriHS7GtLAIiO9UUQEhIqu0DPKQ0yJc2c0+2Vx",
	"7GWs7sWqKBTFDYTasG5XB/XZJNLomEjrJOc7aPNDOiperNZsTmSMvM8A3dBsUXJKWlhW/UwKjX1FoQn3",
	"ikKB+UbyfqxlvvCSFTNddBuzzByttZ6uUjDud1pyA7AsCU7/CN5dvTsPRsHN+fS3i4n+NLm6vDyfzM7e",
	"XOr/ZlfXf91eB6Pg8mryy/lPwSj46eJG/6Y//nY2vdCf/7qe6rp/NgyuSdv2Y+jCNC3UyxwKBoyOfH3k",
	"62+Zr6eZh7Oy5gpkFKRhFGt+IayUIPNM1WUAmmv+QXzd2ucxwoyrJQhvq+uswlMio7nd5xwLLBZgojCa",
	"0sqPtWKKF51upx7ov0zBDsjfwapYT90/X2+ZcEHUqsFdZTbax0UEwkSt0pSuzGg1eelHX8D7LHeftg3T",
	"RiH6+M5ujN0INUvj24E2eE4EYNUXpGdikZnAh2HkUJMgbIEwYvCQ9//rAd9wqKBnS7JYglQoJkKq5/2g",
	"UwSo1rVdPhec0ZVpkoBExPpERiDzByYRrmhApjDRQrsWANIeBYmRBtKo6DPC9AGvZEHW6S831Tb69Qw+",
	"hJAqxO9BCO2KWGVgxIoh4qXGDgX4zmmrDA1TWorM9ejYAN+7xM1G++ZrlPCIxCvLDG1Rwqkd75oNd/Hu",
	"t/PpLBgF1+fTyfm7mbHa3r09n1qrbXJ1a747P5te/v9fb6bnZ78Eo+CNNuz+ur6dTn4+u2m24XRrU5AZ",
	"VT0DIGYoBKLr/g6xEaMu8ubFi93Bx6bVuFlJBcmN6i/ATB0NEA16jf9ojghTXLPMrYQ4o0ayLYji6ab3",
	"aQAk25usDHxjObpCrO1bIBItuOmk24dzvWglWc5Te+T47B4TU7fqXPhFjZsCcd3DK6DRYPX4Nl1RWx4t",
	"Kp7epg1Nzniapc4vwQJQmAkBTFvuOFTkHnx7Y7bjvGegCcaGwkU0NVtbsrfB6KrlWsDIHobIpnMVERGq",
	"S8LuGvwd67UQdqeZQoD1YkqFo/hQx2WyhPCOZ8p2aIDINbNzZcjJnhLMxiJvBd3s1tU9iAdBtBDQ3A8x",
	"zqgqB54JKwAwW6mlnlGgEtA8Uyi1wtxnOmLCFiBSQZoMnzeCP+iZrRTKw556xgc4RMbfbPCILs337cT/",
	"6aPLszAEKYdOJY4VCOSIaOHaYxYN/561mI/XIEIiIY8L8BiFPKYhJ8xaNprH/XxWPS/nCSYNA7wwbtc9",
	"iSAaWQviHtMMit3dTHtixc6LDflq88ZAWDvUxkCG6ARdxCaAUFILXeFyqxjLOxtVAKbnTC2BCAS6YwhH",
	"kQApfSbNbDCkzZEUkrZj4R//HM6jvgGizxbxsRI+XE14BM1N5iVQqIvUWdBj1o8hpYOFlFJBQmhLVSJh",
	"GfFpM7qrENWt+5Q7mVQR44Uxx9riptH5yc05U6RIIEE24eAeU2K317QV+iwicQyCKRSDCwg5vxHZX4Ap",
	"O3T5vI7UVz8Ods6+wxBdZR/1/B5Y3/i2qePGkGsBXNtX5WGYCdlrD7Ra3ZUbvP1pJD4rthU7tlbbGdBw",
	"cE/GNzqNYqmQ2R0meSqc3Dk17NYCNR9PpU0JShG2kL1yapq51bCBm68Spb6JUbO+6Ny6kWwNYEzLreRg",
	"t33f3629Ut/vtWCFyDvzo0xkWI/yVG0MpARZLEBXagDfEHtDE4hBTOF9BrIvz+a1jUAF6dIfbXTLmUT+",
	"vJrbJ9yOKjbVPXh1a1Ksk8Nl2oC2dWyia54Em7cm/SNnt3pszQJiLSjnls3GGVyOq4AQyL018uPMKu4B",
	"S5d3ok+02dkMIU5NqILHKMF3BkwlkBokbB7beOMyWhuH7tJdUVEaPWszDXTXTxwxlBCWSe0fticDrufp",
	"PPdDxrytu3nTuchzWPWxfDVGRUOAe2J/KOlpQyQWPEHPLm6u0A+vfvzxxSuEabrEL16v2Rk+FgC4hJa2",
	"NPNN4OHQdBZJE9sbYHQ0KcG03Ery0wvkML7TYZ10/sBkY1ycLWRlhU0xz+BWmdDoEWn72DZrH0lqPKr2",
	"4b16OUCY6K8Ii7lulJIQXOyMmVy/4NeLWcUGDXLuDEbBPQhpO/fy5OXJKzN1KTCckuA0+MF8NQpSrJZm",
	"esZnaUoN66TOVdVCxrhgGtXBNZfKFrE7OyDVGx6trG/LVG5SuqRwwtn4f/73b2k9RDvNXYtQDXPrMVdp",
	"7ZfSixSrcLlj9xR8UDv165NRjzaqaZbg9cuXDdaZjSaZJmWWaP42YTWD9uq+z8hFyhFmERKcgrRRdI3E",
	"BbkH7UdjBdrpMgZrRKSG4TgCCgrKEKCN3Jg0XSS5BjEKsYA4o2btldkV+iOwWPhTd2s8wZTOcXg3ppBw",
	"Jt9nAB87oJRXuazW0HAUOAGl9f3pH48B0TOwBBwZRnKI//BCkgXDKhNaCZQzv85If/ad3nxoed/WR5fi",
	"VYqp37iubdnhK4xDszcZOnpOXaU52a6+6lmwhnl3X29s2eF9/R3mS87vis7aM1851ZauFvubC2jo31tQ",
	"b93+ZRMm3mcgViUkeBxLUDU0uABtcPpy5JPk3ky38Eob6L72ItwCwhaRuSlOvNRXkXyxuQnTLKT2QTWl",
	"mOyT7MamYBNr2sp/avezFdY5bg6jpco8k+H6qZ3GIM1USX3pr5Pyym3ayBupB+9hO+68xtcHXoV8Gj8a",
	"pXpDs8Uny/1aWW7i7ifzvanyNq/QIrq0xVVKmEWltAt8Rrll2Fu1fZdrNdquQI7L8dTLkWZNgjl74uU4",
	"yv6j7N+f7B/Xc4v8lUD1aM+XCPf2DK4Nq8/TUO1PqBX4PWh2GbpdFI4s0Me6PsL7CO+vW8L/irWPzjAL",
	"YQwflDsF3Q77SvlzW9wrMFEmf5TjGRyNMKevZ3aLsoHc1pOrzRTDJYR3N1niFTlp3L7e2fb1uoCgGVbe",
	"VRtA1V13K6TK2JdFgz3IQUkM+RUFmFJUXJAzX1XCsEVQKcdlBVsOndcVa6PNu+kQvccImUca917jZb3a",
	"GBo982vEE7tvQdW2ECqYLNC1zaOrQPAwDlfbNRjDdZUvxUHOWOutHf3VYjOpjXWtXg2lOMrSyB0XOJiy",
	"P/gYhxkCnvPVzAe3ZtqqR83mKyQgpTgkbIGIQg9ELd25P87AXGJxRaPyyEqIWZHgarxAk94aZyImlOab",
	"/WZ3DSBq4bOq4B+n48dK0tYnH0VwfV3J8vKxx9Na+S8j3PUtwuttfvgKFCbUnG/GlUy7Lig4K2L86D7Y",
	"gESY52p1weLG1SorT5zK7kZIpcUnRcjXbhRO8mMa9q5B/mCPK+UG4eBFJ5EctuQXkfyiF/wJXWEPA6zT",
	"m/bme5uiYdNH94gDk6U8DAlXpuohsbDNe92b52o98J60nsTVaLiRbd+eRp8mhjoaXm14MsIlkUYapiAI",
	"j2R5uZ87MDOAIfrIwaOLfHSRd3GRZQmjLnTak5ge0Jy5I5tHXPY9eL5XQPoRH4rEDup93Adz/zJP8yMA",
	"g8I0OeYOE6upD3anIE0nqUHRmQ2qA3zKNRoH3VY5QH+HOb/rg+4bVKmC1zey4qBuLi6xv0qaLUxuMxaA",
	"EizutOEg8zTmyEM4a4tj/GiNca+Iyq0EcWuPfvkYzFledGdbuRKZqe8debsoTyKaK3fu7Fsw+5AeKpa3",
	"0u4TOjcvC0DkzifbmzTyUx8tYJzmF8O0YS+/IuZoGPheqLR33B0GccOxNgWVCWZDCfnVfTm8LFy2p2zk",
	"kDqM3q9eU7ST1u8gNEjnr9EcoEFrFA6q7y1IhvdysH53lX1jm2YyZP0WxHU4FqJu/KhLeOZPmxpTV95L",
	"5Yqy8Jexf/GVLKKdb72ILQs42q6gjov0BItUyH173+N8ZWzgFm4zRvq48mLV1nQmU3pSfd7qMMqh9ojY",
	"buqhk9QgBbFBdQAk1mgcVEk0vhMzsN/bafWEdgsx7w2zHIoy3zOLy7Bw8YacOaFaYQD7RliNAcxNYz7g",
	"twW9DO3CsfsMZw6qj6HtyEAdlIbxzxrRIexTI3H4kErlCspdoipNZIYEVmp0ettg7pE79z7bEptryAiT",
	"Cps7PkMBEVG16Mgmz/if2jblPY5s9+ef7YGQz8V8tUs59xDT3EZqeEyzSnUomksaRwbsTCTfZCFeXtza",
	"ZjfXpvm4cfIEGydnlFbuO2rbQtlcTJ97HmwP89sYjjLwG5OBG3dzlW+t5gg6isk+doq7CRlJkJJwZrd9",
	"Nm4z2eRFn3tMTMniEpMjLx558ciLvXlx47qeGi+Wt/vp/jKIxpnXTmqlor0n8Paw+6lPsvHU9FD1vu2r",
	"Xm0MNbP8GvEziSsktu9GfRZIHEIYN87eTjLZl+Ig0dxGfIAsayZ1UMdx8zXgoadC2gn1PRPSQGkAr3TK",
	"17EaP1ZugHUSd/tOWhuTzWZVQofOaqkTUmtNt9M7fILB9wm19hTB7wIvRyVwVAJfiRKQnRdSVErf2MMw",
	"B3I51x+O2NHt9CE3zPVsojzEUduk0/+mXr9V7u1D3X6WbNRD5RlSkpAWsq9efjl5hkd3zwfXt77J1YdP",
	"qj6kcWjedRgoWep1eyoaV7nP0dPygQuilpULaEh1O9jQ3e6xH1fsCVasnlbpu2wbnDfOX0dIiwfnUgEh",
	"VuUybFvgK/towpcXiPE8+DByb3td2OK6S3u7282T9q7XvbU0s9ux90aiO9vq/d/W2P8x6O2Udzr93EJ6",
	"QNZ+8aQgirDC7slVdwI6UzbXjbpD0uYVM5D1pJ2t7D6mnC3c+1A+Ulwz+aWrcuT1I6/3u5Jl62UNnbey",
	"eNTedjHLtuo9+VIr1jlZmIfRzJ1964xYvOtZu7BpOydmTBHahw9vTYUjFx650IsL2x7i93vGcP1hqdYx",
	"HqSZBr7ebztfnmKu3eFWCodu11iLhsp1bgeVEqMv6nK4b1LPGAWjwbXMH5DF5SN1CDsHb/NKuFZ05S+C",
	"b94S6KN48htS+l4Y+NnB1ZqVZe8OGhqfPIYfghwSLv5Q2D4xAsazxdK+hWruXihSan2Amt9fthtg3UVO",
	"3xpuq48c964cth/Sf3UEfS/QuxvgZeXE2c7AL55J9oT4rHxW+etKg1p/pHoP+4Md1IZvD64RHro7WCNz",
	"2PMyh9vUHJh+2rA76sds+cxJFHKi7aKN18g7eap3GtQaex3znr4TrN2yyD58m5sdtePEDVD79Ok/AQAA",
	"//+8LXueCqsAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
