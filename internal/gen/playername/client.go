// Package playernamegen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package playernamegen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// PostPlayerNameNamesBatchApplicationWildcardPlusJSONBody defines parameters for PostPlayerNameNamesBatch.
type PostPlayerNameNamesBatchApplicationWildcardPlusJSONBody = []string

// PostPlayerNameNamesBatchJSONBody defines parameters for PostPlayerNameNamesBatch.
type PostPlayerNameNamesBatchJSONBody = []string

// PostPlayerNameNamesBatchApplicationWildcardPlusJSONRequestBody defines body for PostPlayerNameNamesBatch for application/*+json ContentType.
type PostPlayerNameNamesBatchApplicationWildcardPlusJSONRequestBody = PostPlayerNameNamesBatchApplicationWildcardPlusJSONBody

// PostPlayerNameNamesBatchJSONRequestBody defines body for PostPlayerNameNamesBatch for application/json ContentType.
type PostPlayerNameNamesBatchJSONRequestBody = PostPlayerNameNamesBatchJSONBody

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetPlayerNameNameUuid request
	GetPlayerNameNameUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostPlayerNameNamesBatchWithBody request with any body
	PostPlayerNameNamesBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlayerNameNamesBatchWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostPlayerNameNamesBatchApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostPlayerNameNamesBatch(ctx context.Context, body PostPlayerNameNamesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetPlayerNameUuidName request
	GetPlayerNameUuidName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetPlayerNameNameUuid(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayerNameNameUuidRequest(c.Server, uuid)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlayerNameNamesBatchWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayerNameNamesBatchRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlayerNameNamesBatchWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostPlayerNameNamesBatchApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayerNameNamesBatchRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostPlayerNameNamesBatch(ctx context.Context, body PostPlayerNameNamesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostPlayerNameNamesBatchRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetPlayerNameUuidName(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetPlayerNameUuidNameRequest(c.Server, name)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetPlayerNameNameUuidRequest generates requests for GetPlayerNameNameUuid
func NewGetPlayerNameNameUuidRequest(server string, uuid string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "uuid", runtime.ParamLocationPath, uuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/PlayerName/name/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostPlayerNameNamesBatchRequestWithApplicationWildcardPlusJSONBody calls the generic PostPlayerNameNamesBatch builder with application/*+json body
func NewPostPlayerNameNamesBatchRequestWithApplicationWildcardPlusJSONBody(server string, body PostPlayerNameNamesBatchApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlayerNameNamesBatchRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostPlayerNameNamesBatchRequest calls the generic PostPlayerNameNamesBatch builder with application/json body
func NewPostPlayerNameNamesBatchRequest(server string, body PostPlayerNameNamesBatchJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostPlayerNameNamesBatchRequestWithBody(server, "application/json", bodyReader)
}

// NewPostPlayerNameNamesBatchRequestWithBody generates requests for PostPlayerNameNamesBatch with any type of body
func NewPostPlayerNameNamesBatchRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/PlayerName/names/batch")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetPlayerNameUuidNameRequest generates requests for GetPlayerNameUuidName
func NewGetPlayerNameUuidNameRequest(server string, name string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "name", runtime.ParamLocationPath, name)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/PlayerName/uuid/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetPlayerNameNameUuidWithResponse request
	GetPlayerNameNameUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPlayerNameNameUuidResponse, error)

	// PostPlayerNameNamesBatchWithBodyWithResponse request with any body
	PostPlayerNameNamesBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlayerNameNamesBatchResponse, error)

	PostPlayerNameNamesBatchWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostPlayerNameNamesBatchApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayerNameNamesBatchResponse, error)

	PostPlayerNameNamesBatchWithResponse(ctx context.Context, body PostPlayerNameNamesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayerNameNamesBatchResponse, error)

	// GetPlayerNameUuidNameWithResponse request
	GetPlayerNameUuidNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetPlayerNameUuidNameResponse, error)
}

type GetPlayerNameNameUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetPlayerNameNameUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayerNameNameUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostPlayerNameNamesBatchResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *map[string]string
}

// Status returns HTTPResponse.Status
func (r PostPlayerNameNamesBatchResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostPlayerNameNamesBatchResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetPlayerNameUuidNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetPlayerNameUuidNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetPlayerNameUuidNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetPlayerNameNameUuidWithResponse request returning *GetPlayerNameNameUuidResponse
func (c *ClientWithResponses) GetPlayerNameNameUuidWithResponse(ctx context.Context, uuid string, reqEditors ...RequestEditorFn) (*GetPlayerNameNameUuidResponse, error) {
	rsp, err := c.GetPlayerNameNameUuid(ctx, uuid, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayerNameNameUuidResponse(rsp)
}

// PostPlayerNameNamesBatchWithBodyWithResponse request with arbitrary body returning *PostPlayerNameNamesBatchResponse
func (c *ClientWithResponses) PostPlayerNameNamesBatchWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostPlayerNameNamesBatchResponse, error) {
	rsp, err := c.PostPlayerNameNamesBatchWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayerNameNamesBatchResponse(rsp)
}

func (c *ClientWithResponses) PostPlayerNameNamesBatchWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostPlayerNameNamesBatchApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayerNameNamesBatchResponse, error) {
	rsp, err := c.PostPlayerNameNamesBatchWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayerNameNamesBatchResponse(rsp)
}

func (c *ClientWithResponses) PostPlayerNameNamesBatchWithResponse(ctx context.Context, body PostPlayerNameNamesBatchJSONRequestBody, reqEditors ...RequestEditorFn) (*PostPlayerNameNamesBatchResponse, error) {
	rsp, err := c.PostPlayerNameNamesBatch(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostPlayerNameNamesBatchResponse(rsp)
}

// GetPlayerNameUuidNameWithResponse request returning *GetPlayerNameUuidNameResponse
func (c *ClientWithResponses) GetPlayerNameUuidNameWithResponse(ctx context.Context, name string, reqEditors ...RequestEditorFn) (*GetPlayerNameUuidNameResponse, error) {
	rsp, err := c.GetPlayerNameUuidName(ctx, name, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetPlayerNameUuidNameResponse(rsp)
}

// ParseGetPlayerNameNameUuidResponse parses an HTTP response from a GetPlayerNameNameUuidWithResponse call
func ParseGetPlayerNameNameUuidResponse(rsp *http.Response) (*GetPlayerNameNameUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayerNameNameUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostPlayerNameNamesBatchResponse parses an HTTP response from a PostPlayerNameNamesBatchWithResponse call
func ParsePostPlayerNameNamesBatchResponse(rsp *http.Response) (*PostPlayerNameNamesBatchResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostPlayerNameNamesBatchResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest map[string]string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetPlayerNameUuidNameResponse parses an HTTP response from a GetPlayerNameUuidNameWithResponse call
func ParseGetPlayerNameUuidNameResponse(rsp *http.Response) (*GetPlayerNameUuidNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetPlayerNameUuidNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+RUwW7UMBD9FWuOYDVbuPnYC+KCViqcUA+uM924JLbxTCqiyP+OxmnVst1NFypx6WHX",
	"kj3zMu+90ZvBxSHFgIEJzFw0+HATwczAnnsEA5c/pm1vJ8xf7ICg4Q4z+RjAwN05FA0xYbDJg4GPZ5uz",
	"c9CQLHcCBs1jYxPkbx5H3xZ52iHLERNmyz6Gzy0Y+IT82CG/b6NvK2C2AzJmAvN9hhbJZZ94meJrh0pg",
	"FUe1Q1bcoZKPqZuYQeiAqROBBrkGA+OCmvHn6DO2YDiPqIFch4Ot1KckdcTZhx2UciXFlGIgrLw+bDZy",
	"uBgYQ+VhU+q9q0yaW5K55hU8DYy/+PTC1Fv/QmXRe7Jcjs4hUQWhcRhsnhaF6Q+FlFX3crDdibzwxOwr",
	"ad43kZpry66TIVKkAy5uI+3ZSBe1Y5EciS9iO60I+O79c2U840AHiOuHC5uznSrbdS/+AuiISScjPPNk",
	"dVXLK5fMtq2XJ9tvsxjCHlenjNe36HiN6GsRD6ztP0P+n/2W0maW3hNDSgLqPhdfDKk60hPn6yYcDamw",
	"oL7pkHpQSFEcFv2O+ljK7wAAAP//XuKYYsoGAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
