// Package proxygen provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.2 DO NOT EDIT.
package proxygen

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for Category.
const (
	CategoryN0 Category = 0
	CategoryN1 Category = 1
	CategoryN2 Category = 2
	CategoryN3 Category = 3
	CategoryN4 Category = 4
	CategoryN5 Category = 5
	CategoryN6 Category = 6
)

// Defines values for EnchantmentType.
const (
	EnchantmentTypeMinus114 EnchantmentType = -114
	EnchantmentTypeMinus115 EnchantmentType = -115
	EnchantmentTypeMinus116 EnchantmentType = -116
	EnchantmentTypeMinus117 EnchantmentType = -117
	EnchantmentTypeMinus118 EnchantmentType = -118
	EnchantmentTypeMinus119 EnchantmentType = -119
	EnchantmentTypeMinus120 EnchantmentType = -120
	EnchantmentTypeN0       EnchantmentType = 0
	EnchantmentTypeN1       EnchantmentType = 1
	EnchantmentTypeN10      EnchantmentType = 10
	EnchantmentTypeN100     EnchantmentType = 100
	EnchantmentTypeN101     EnchantmentType = 101
	EnchantmentTypeN102     EnchantmentType = 102
	EnchantmentTypeN103     EnchantmentType = 103
	EnchantmentTypeN104     EnchantmentType = 104
	EnchantmentTypeN105     EnchantmentType = 105
	EnchantmentTypeN106     EnchantmentType = 106
	EnchantmentTypeN107     EnchantmentType = 107
	EnchantmentTypeN108     EnchantmentType = 108
	EnchantmentTypeN109     EnchantmentType = 109
	EnchantmentTypeN11      EnchantmentType = 11
	EnchantmentTypeN110     EnchantmentType = 110
	EnchantmentTypeN111     EnchantmentType = 111
	EnchantmentTypeN112     EnchantmentType = 112
	EnchantmentTypeN113     EnchantmentType = 113
	EnchantmentTypeN114     EnchantmentType = 114
	EnchantmentTypeN115     EnchantmentType = 115
	EnchantmentTypeN116     EnchantmentType = 116
	EnchantmentTypeN117     EnchantmentType = 117
	EnchantmentTypeN118     EnchantmentType = 118
	EnchantmentTypeN119     EnchantmentType = 119
	EnchantmentTypeN12      EnchantmentType = 12
	EnchantmentTypeN120     EnchantmentType = 120
	EnchantmentTypeN121     EnchantmentType = 121
	EnchantmentTypeN122     EnchantmentType = 122
	EnchantmentTypeN123     EnchantmentType = 123
	EnchantmentTypeN124     EnchantmentType = 124
	EnchantmentTypeN125     EnchantmentType = 125
	EnchantmentTypeN126     EnchantmentType = 126
	EnchantmentTypeN127     EnchantmentType = 127
	EnchantmentTypeN13      EnchantmentType = 13
	EnchantmentTypeN14      EnchantmentType = 14
	EnchantmentTypeN15      EnchantmentType = 15
	EnchantmentTypeN16      EnchantmentType = 16
	EnchantmentTypeN17      EnchantmentType = 17
	EnchantmentTypeN18      EnchantmentType = 18
	EnchantmentTypeN19      EnchantmentType = 19
	EnchantmentTypeN2       EnchantmentType = 2
	EnchantmentTypeN20      EnchantmentType = 20
	EnchantmentTypeN21      EnchantmentType = 21
	EnchantmentTypeN22      EnchantmentType = 22
	EnchantmentTypeN23      EnchantmentType = 23
	EnchantmentTypeN24      EnchantmentType = 24
	EnchantmentTypeN25      EnchantmentType = 25
	EnchantmentTypeN26      EnchantmentType = 26
	EnchantmentTypeN27      EnchantmentType = 27
	EnchantmentTypeN28      EnchantmentType = 28
	EnchantmentTypeN29      EnchantmentType = 29
	EnchantmentTypeN3       EnchantmentType = 3
	EnchantmentTypeN30      EnchantmentType = 30
	EnchantmentTypeN31      EnchantmentType = 31
	EnchantmentTypeN32      EnchantmentType = 32
	EnchantmentTypeN33      EnchantmentType = 33
	EnchantmentTypeN34      EnchantmentType = 34
	EnchantmentTypeN35      EnchantmentType = 35
	EnchantmentTypeN36      EnchantmentType = 36
	EnchantmentTypeN37      EnchantmentType = 37
	EnchantmentTypeN38      EnchantmentType = 38
	EnchantmentTypeN39      EnchantmentType = 39
	EnchantmentTypeN4       EnchantmentType = 4
	EnchantmentTypeN40      EnchantmentType = 40
	EnchantmentTypeN41      EnchantmentType = 41
	EnchantmentTypeN42      EnchantmentType = 42
	EnchantmentTypeN43      EnchantmentType = 43
	EnchantmentTypeN44      EnchantmentType = 44
	EnchantmentTypeN45      EnchantmentType = 45
	EnchantmentTypeN46      EnchantmentType = 46
	EnchantmentTypeN47      EnchantmentType = 47
	EnchantmentTypeN48      EnchantmentType = 48
	EnchantmentTypeN49      EnchantmentType = 49
	EnchantmentTypeN5       EnchantmentType = 5
	EnchantmentTypeN50      EnchantmentType = 50
	EnchantmentTypeN51      EnchantmentType = 51
	EnchantmentTypeN52      EnchantmentType = 52
	EnchantmentTypeN53      EnchantmentType = 53
	EnchantmentTypeN54      EnchantmentType = 54
	EnchantmentTypeN55      EnchantmentType = 55
	EnchantmentTypeN56      EnchantmentType = 56
	EnchantmentTypeN57      EnchantmentType = 57
	EnchantmentTypeN58      EnchantmentType = 58
	EnchantmentTypeN6       EnchantmentType = 6
	EnchantmentTypeN60      EnchantmentType = 60
	EnchantmentTypeN61      EnchantmentType = 61
	EnchantmentTypeN62      EnchantmentType = 62
	EnchantmentTypeN63      EnchantmentType = 63
	EnchantmentTypeN64      EnchantmentType = 64
	EnchantmentTypeN65      EnchantmentType = 65
	EnchantmentTypeN66      EnchantmentType = 66
	EnchantmentTypeN67      EnchantmentType = 67
	EnchantmentTypeN68      EnchantmentType = 68
	EnchantmentTypeN69      EnchantmentType = 69
	EnchantmentTypeN7       EnchantmentType = 7
	EnchantmentTypeN70      EnchantmentType = 70
	EnchantmentTypeN71      EnchantmentType = 71
	EnchantmentTypeN72      EnchantmentType = 72
	EnchantmentTypeN73      EnchantmentType = 73
	EnchantmentTypeN74      EnchantmentType = 74
	EnchantmentTypeN75      EnchantmentType = 75
	EnchantmentTypeN76      EnchantmentType = 76
	EnchantmentTypeN77      EnchantmentType = 77
	EnchantmentTypeN78      EnchantmentType = 78
	EnchantmentTypeN79      EnchantmentType = 79
	EnchantmentTypeN8       EnchantmentType = 8
	EnchantmentTypeN80      EnchantmentType = 80
	EnchantmentTypeN81      EnchantmentType = 81
	EnchantmentTypeN82      EnchantmentType = 82
	EnchantmentTypeN83      EnchantmentType = 83
	EnchantmentTypeN84      EnchantmentType = 84
	EnchantmentTypeN85      EnchantmentType = 85
	EnchantmentTypeN86      EnchantmentType = 86
	EnchantmentTypeN87      EnchantmentType = 87
	EnchantmentTypeN88      EnchantmentType = 88
	EnchantmentTypeN89      EnchantmentType = 89
	EnchantmentTypeN9       EnchantmentType = 9
	EnchantmentTypeN90      EnchantmentType = 90
	EnchantmentTypeN91      EnchantmentType = 91
	EnchantmentTypeN92      EnchantmentType = 92
	EnchantmentTypeN93      EnchantmentType = 93
	EnchantmentTypeN94      EnchantmentType = 94
	EnchantmentTypeN95      EnchantmentType = 95
	EnchantmentTypeN96      EnchantmentType = 96
	EnchantmentTypeN97      EnchantmentType = 97
	EnchantmentTypeN98      EnchantmentType = 98
	EnchantmentTypeN99      EnchantmentType = 99
)

// Defines values for Reforge.
const (
	ReforgeMinus100 Reforge = -100
	ReforgeMinus124 Reforge = -124
	ReforgeMinus125 Reforge = -125
	ReforgeMinus81  Reforge = -81
	ReforgeMinus82  Reforge = -82
	ReforgeMinus83  Reforge = -83
	ReforgeMinus84  Reforge = -84
	ReforgeMinus85  Reforge = -85
	ReforgeMinus86  Reforge = -86
	ReforgeMinus87  Reforge = -87
	ReforgeMinus88  Reforge = -88
	ReforgeMinus89  Reforge = -89
	ReforgeMinus90  Reforge = -90
	ReforgeMinus91  Reforge = -91
	ReforgeMinus92  Reforge = -92
	ReforgeMinus93  Reforge = -93
	ReforgeMinus94  Reforge = -94
	ReforgeMinus95  Reforge = -95
	ReforgeMinus96  Reforge = -96
	ReforgeMinus97  Reforge = -97
	ReforgeMinus98  Reforge = -98
	ReforgeMinus99  Reforge = -99
	ReforgeN0       Reforge = 0
	ReforgeN1       Reforge = 1
	ReforgeN10      Reforge = 10
	ReforgeN100     Reforge = 100
	ReforgeN101     Reforge = 101
	ReforgeN102     Reforge = 102
	ReforgeN103     Reforge = 103
	ReforgeN104     Reforge = 104
	ReforgeN105     Reforge = 105
	ReforgeN106     Reforge = 106
	ReforgeN107     Reforge = 107
	ReforgeN108     Reforge = 108
	ReforgeN109     Reforge = 109
	ReforgeN11      Reforge = 11
	ReforgeN110     Reforge = 110
	ReforgeN111     Reforge = 111
	ReforgeN112     Reforge = 112
	ReforgeN113     Reforge = 113
	ReforgeN114     Reforge = 114
	ReforgeN115     Reforge = 115
	ReforgeN116     Reforge = 116
	ReforgeN117     Reforge = 117
	ReforgeN118     Reforge = 118
	ReforgeN119     Reforge = 119
	ReforgeN12      Reforge = 12
	ReforgeN120     Reforge = 120
	ReforgeN121     Reforge = 121
	ReforgeN122     Reforge = 122
	ReforgeN123     Reforge = 123
	ReforgeN124     Reforge = 124
	ReforgeN125     Reforge = 125
	ReforgeN126     Reforge = 126
	ReforgeN127     Reforge = 127
	ReforgeN13      Reforge = 13
	ReforgeN14      Reforge = 14
	ReforgeN15      Reforge = 15
	ReforgeN16      Reforge = 16
	ReforgeN17      Reforge = 17
	ReforgeN18      Reforge = 18
	ReforgeN19      Reforge = 19
	ReforgeN2       Reforge = 2
	ReforgeN20      Reforge = 20
	ReforgeN21      Reforge = 21
	ReforgeN22      Reforge = 22
	ReforgeN23      Reforge = 23
	ReforgeN24      Reforge = 24
	ReforgeN25      Reforge = 25
	ReforgeN26      Reforge = 26
	ReforgeN27      Reforge = 27
	ReforgeN28      Reforge = 28
	ReforgeN29      Reforge = 29
	ReforgeN3       Reforge = 3
	ReforgeN30      Reforge = 30
	ReforgeN31      Reforge = 31
	ReforgeN32      Reforge = 32
	ReforgeN33      Reforge = 33
	ReforgeN34      Reforge = 34
	ReforgeN35      Reforge = 35
	ReforgeN36      Reforge = 36
	ReforgeN37      Reforge = 37
	ReforgeN38      Reforge = 38
	ReforgeN39      Reforge = 39
	ReforgeN4       Reforge = 4
	ReforgeN40      Reforge = 40
	ReforgeN41      Reforge = 41
	ReforgeN42      Reforge = 42
	ReforgeN43      Reforge = 43
	ReforgeN44      Reforge = 44
	ReforgeN45      Reforge = 45
	ReforgeN46      Reforge = 46
	ReforgeN47      Reforge = 47
	ReforgeN48      Reforge = 48
	ReforgeN49      Reforge = 49
	ReforgeN5       Reforge = 5
	ReforgeN50      Reforge = 50
	ReforgeN51      Reforge = 51
	ReforgeN52      Reforge = 52
	ReforgeN53      Reforge = 53
	ReforgeN54      Reforge = 54
	ReforgeN55      Reforge = 55
	ReforgeN56      Reforge = 56
	ReforgeN57      Reforge = 57
	ReforgeN58      Reforge = 58
	ReforgeN59      Reforge = 59
	ReforgeN6       Reforge = 6
	ReforgeN60      Reforge = 60
	ReforgeN61      Reforge = 61
	ReforgeN62      Reforge = 62
	ReforgeN63      Reforge = 63
	ReforgeN64      Reforge = 64
	ReforgeN65      Reforge = 65
	ReforgeN66      Reforge = 66
	ReforgeN67      Reforge = 67
	ReforgeN68      Reforge = 68
	ReforgeN69      Reforge = 69
	ReforgeN7       Reforge = 7
	ReforgeN70      Reforge = 70
	ReforgeN71      Reforge = 71
	ReforgeN72      Reforge = 72
	ReforgeN73      Reforge = 73
	ReforgeN74      Reforge = 74
	ReforgeN75      Reforge = 75
	ReforgeN76      Reforge = 76
	ReforgeN77      Reforge = 77
	ReforgeN78      Reforge = 78
	ReforgeN79      Reforge = 79
	ReforgeN8       Reforge = 8
	ReforgeN80      Reforge = 80
	ReforgeN81      Reforge = 81
	ReforgeN82      Reforge = 82
	ReforgeN83      Reforge = 83
	ReforgeN84      Reforge = 84
	ReforgeN85      Reforge = 85
	ReforgeN86      Reforge = 86
	ReforgeN87      Reforge = 87
	ReforgeN88      Reforge = 88
	ReforgeN89      Reforge = 89
	ReforgeN9       Reforge = 9
	ReforgeN90      Reforge = 90
	ReforgeN91      Reforge = 91
	ReforgeN92      Reforge = 92
	ReforgeN93      Reforge = 93
	ReforgeN94      Reforge = 94
	ReforgeN95      Reforge = 95
	ReforgeN96      Reforge = 96
	ReforgeN97      Reforge = 97
	ReforgeN98      Reforge = 98
	ReforgeN99      Reforge = 99
)

// Defines values for Tier.
const (
	TierN0  Tier = 0
	TierN1  Tier = 1
	TierN10 Tier = 10
	TierN2  Tier = 2
	TierN3  Tier = 3
	TierN4  Tier = 4
	TierN5  Tier = 5
	TierN6  Tier = 6
	TierN7  Tier = 7
	TierN8  Tier = 8
	TierN9  Tier = 9
)

// ApiKey defines model for ApiKey.
type ApiKey struct {
	Created      *time.Time `json:"created,omitempty"`
	IsValid      *bool      `json:"isValid,omitempty"`
	Key          *string    `json:"key"`
	LastServerIp *string    `json:"lastServerIp"`
	LastUsed     *time.Time `json:"lastUsed,omitempty"`
	Owner        *string    `json:"owner"`
	Party        *string    `json:"party"`
	UseCount     *int32     `json:"useCount,omitempty"`
}

// Category defines model for Category.
type Category int32

// Enchantment defines model for Enchantment.
type Enchantment struct {
	Id            *int32           `json:"id,omitempty"`
	ItemType      *int32           `json:"itemType,omitempty"`
	Level         *int32           `json:"level,omitempty"`
	SaveAuctionId *int32           `json:"saveAuctionId,omitempty"`
	Type          *EnchantmentType `json:"type,omitempty"`
}

// EnchantmentType defines model for EnchantmentType.
type EnchantmentType int32

// KeyCreate defines model for KeyCreate.
type KeyCreate struct {
	Key   *string `json:"key"`
	Owner *string `json:"owner"`
	Party *string `json:"party"`

	// ServerCount By how many servers can this key be used (if higher rate limit)
	ServerCount *int32 `json:"serverCount,omitempty"`
}

// NBTLookup defines model for NBTLookup.
type NBTLookup struct {
	AuctionId *int32 `json:"auctionId,omitempty"`
	KeyId     *int32 `json:"keyId,omitempty"`
	Value     *int64 `json:"value,omitempty"`
}

// NbtData defines model for NbtData.
type NbtData struct {
	Data *map[string]*interface{} `json:"data"`
	Id   *int32                   `json:"id,omitempty"`
}

// Reforge defines model for Reforge.
type Reforge int32

// SaveAuction defines model for SaveAuction.
type SaveAuction struct {
	AnvilUses        *int32              `json:"anvilUses,omitempty"`
	AuctioneerId     *string             `json:"auctioneerId"`
	Bids             *[]SaveBids         `json:"bids"`
	Bin              *bool               `json:"bin,omitempty"`
	Category         *Category           `json:"category,omitempty"`
	Claimed          *bool               `json:"claimed,omitempty"`
	ClaimedBidders   *[]interface{}      `json:"claimedBidders"`
	ClaimedBids      *[]UuId             `json:"claimedBids"`
	Context          *map[string]*string `json:"context"`
	Coop             *[]string           `json:"coop"`
	CoopMembers      *[]UuId             `json:"coopMembers"`
	Count            *int32              `json:"count,omitempty"`
	Enchantments     *[]Enchantment      `json:"enchantments"`
	End              *time.Time          `json:"end,omitempty"`
	FindTime         *time.Time          `json:"findTime,omitempty"`
	FlatNbt          *map[string]*string `json:"flatNbt"`
	HighestBidAmount *int64              `json:"highestBidAmount,omitempty"`
	Id               *int32              `json:"id,omitempty"`
	ItemCreatedAt    *time.Time          `json:"itemCreatedAt,omitempty"`
	ItemId           *int32              `json:"itemId,omitempty"`
	ItemName         *string             `json:"itemName"`
	NbtData          *NbtData            `json:"nbtData,omitempty"`
	NbtLookup        *[]NBTLookup        `json:"nbtLookup"`
	OldCategory      *string             `json:"oldCategory"`
	OldTier          *string             `json:"oldTier"`
	ProfileId        *string             `json:"profileId"`
	Reforge          *Reforge            `json:"reforge,omitempty"`
	SellerId         *int32              `json:"sellerId,omitempty"`
	Start            *time.Time          `json:"start,omitempty"`
	StartingBid      *int64              `json:"startingBid,omitempty"`
	Tag              *string             `json:"tag"`
	Tier             *Tier               `json:"tier,omitempty"`
	TraceContext     *map[string]string  `json:"traceContext"`
	UId              *int64              `json:"uId,omitempty"`
	Uuid             *string             `json:"uuid"`
}

// SaveBids defines model for SaveBids.
type SaveBids struct {
	Amount    *int64       `json:"amount,omitempty"`
	Auction   *SaveAuction `json:"auction,omitempty"`
	Bidder    *string      `json:"bidder"`
	BidderId  *int32       `json:"bidderId,omitempty"`
	Id        *int32       `json:"id,omitempty"`
	ProfileId *string      `json:"profileId"`
	Timestamp *time.Time   `json:"timestamp,omitempty"`
}

// Tier defines model for Tier.
type Tier int32

// UuId defines model for UuId.
type UuId struct {
	Id    *int32  `json:"id,omitempty"`
	Value *string `json:"value"`
}

// PostBaseAhPlayerIdParams defines parameters for PostBaseAhPlayerId.
type PostBaseAhPlayerIdParams struct {
	HintSource *string `form:"hintSource,omitempty" json:"hintSource,omitempty"`
}

// GetBaseKeysPartyInvalidParams defines parameters for GetBaseKeysPartyInvalid.
type GetBaseKeysPartyInvalidParams struct {
	Count *int32 `form:"count,omitempty" json:"count,omitempty"`
}

// GetProxyHypixelParams defines parameters for GetProxyHypixel.
type GetProxyHypixelParams struct {
	Path *string `form:"path,omitempty" json:"path,omitempty"`
}

// GetProxyHypixelAhPlayerPlayerUuidParams defines parameters for GetProxyHypixelAhPlayerPlayerUuid.
type GetProxyHypixelAhPlayerPlayerUuidParams struct {
	// MaxAgeSeconds prefilter auctions to end in the future or less than x seconds ago, 0 is no limit (default)
	MaxAgeSeconds *int32 `form:"maxAgeSeconds,omitempty" json:"maxAgeSeconds,omitempty"`

	// HintOwner Identifer for whoever provided the hint
	HintOwner *string `form:"hintOwner,omitempty" json:"hintOwner,omitempty"`
}

// PostSkyblockAuctionParams defines parameters for PostSkyblockAuction.
type PostSkyblockAuctionParams struct {
	Key *string `form:"key,omitempty" json:"key,omitempty"`
}

// PostBaseKeyApplicationWildcardPlusJSONRequestBody defines body for PostBaseKey for application/*+json ContentType.
type PostBaseKeyApplicationWildcardPlusJSONRequestBody = KeyCreate

// PostBaseKeyJSONRequestBody defines body for PostBaseKey for application/json ContentType.
type PostBaseKeyJSONRequestBody = KeyCreate

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetApiTime request
	GetApiTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBaseAhPlayerId request
	PostBaseAhPlayerId(ctx context.Context, playerId string, params *PostBaseAhPlayerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostBaseKeyWithBody request with any body
	PostBaseKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBaseKeyWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostBaseKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	PostBaseKey(ctx context.Context, body PostBaseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBaseKeysPartyCount request
	GetBaseKeysPartyCount(ctx context.Context, party string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetBaseKeysPartyInvalid request
	GetBaseKeysPartyInvalid(ctx context.Context, party string, params *GetBaseKeysPartyInvalidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProxyHypixel request
	GetProxyHypixel(ctx context.Context, params *GetProxyHypixelParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProxyHypixelAhPlayerPlayerUuid request
	GetProxyHypixelAhPlayerPlayerUuid(ctx context.Context, playerUuid string, params *GetProxyHypixelAhPlayerPlayerUuidParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProxyHypixelStatus request
	GetProxyHypixelStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkyblockAuction request
	PostSkyblockAuction(ctx context.Context, params *PostSkyblockAuctionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetSkyblockAuctions request
	GetSkyblockAuctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PostSkyblockAuctions request
	PostSkyblockAuctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetApiTime(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetApiTimeRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBaseAhPlayerId(ctx context.Context, playerId string, params *PostBaseAhPlayerIdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBaseAhPlayerIdRequest(c.Server, playerId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBaseKeyWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBaseKeyRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBaseKeyWithApplicationWildcardPlusJSONBody(ctx context.Context, body PostBaseKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBaseKeyRequestWithApplicationWildcardPlusJSONBody(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostBaseKey(ctx context.Context, body PostBaseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostBaseKeyRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBaseKeysPartyCount(ctx context.Context, party string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBaseKeysPartyCountRequest(c.Server, party)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetBaseKeysPartyInvalid(ctx context.Context, party string, params *GetBaseKeysPartyInvalidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetBaseKeysPartyInvalidRequest(c.Server, party, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProxyHypixel(ctx context.Context, params *GetProxyHypixelParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProxyHypixelRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProxyHypixelAhPlayerPlayerUuid(ctx context.Context, playerUuid string, params *GetProxyHypixelAhPlayerPlayerUuidParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProxyHypixelAhPlayerPlayerUuidRequest(c.Server, playerUuid, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProxyHypixelStatus(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProxyHypixelStatusRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkyblockAuction(ctx context.Context, params *PostSkyblockAuctionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkyblockAuctionRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetSkyblockAuctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetSkyblockAuctionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PostSkyblockAuctions(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPostSkyblockAuctionsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetApiTimeRequest generates requests for GetApiTime
func NewGetApiTimeRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Api/time")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBaseAhPlayerIdRequest generates requests for PostBaseAhPlayerId
func NewPostBaseAhPlayerIdRequest(server string, playerId string, params *PostBaseAhPlayerIdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerId", runtime.ParamLocationPath, playerId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Base/ah/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.HintSource != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hintSource", runtime.ParamLocationQuery, *params.HintSource); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostBaseKeyRequestWithApplicationWildcardPlusJSONBody calls the generic PostBaseKey builder with application/*+json body
func NewPostBaseKeyRequestWithApplicationWildcardPlusJSONBody(server string, body PostBaseKeyApplicationWildcardPlusJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBaseKeyRequestWithBody(server, "application/*+json", bodyReader)
}

// NewPostBaseKeyRequest calls the generic PostBaseKey builder with application/json body
func NewPostBaseKeyRequest(server string, body PostBaseKeyJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPostBaseKeyRequestWithBody(server, "application/json", bodyReader)
}

// NewPostBaseKeyRequestWithBody generates requests for PostBaseKey with any type of body
func NewPostBaseKeyRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Base/key")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetBaseKeysPartyCountRequest generates requests for GetBaseKeysPartyCount
func NewGetBaseKeysPartyCountRequest(server string, party string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "party", runtime.ParamLocationPath, party)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Base/keys/%s/count", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetBaseKeysPartyInvalidRequest generates requests for GetBaseKeysPartyInvalid
func NewGetBaseKeysPartyInvalidRequest(server string, party string, params *GetBaseKeysPartyInvalidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "party", runtime.ParamLocationPath, party)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Base/keys/%s/invalid", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Count != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "count", runtime.ParamLocationQuery, *params.Count); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProxyHypixelRequest generates requests for GetProxyHypixel
func NewGetProxyHypixelRequest(server string, params *GetProxyHypixelParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Proxy/hypixel")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Path != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "path", runtime.ParamLocationQuery, *params.Path); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {

				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProxyHypixelAhPlayerPlayerUuidRequest generates requests for GetProxyHypixelAhPlayerPlayerUuid
func NewGetProxyHypixelAhPlayerPlayerUuidRequest(server string, playerUuid string, params *GetProxyHypixelAhPlayerPlayerUuidParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "playerUuid", runtime.ParamLocationPath, playerUuid)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Proxy/hypixel/ah/player/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.MaxAgeSeconds != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "maxAgeSeconds", runtime.ParamLocationQuery, *params.MaxAgeSeconds); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.HintOwner != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "hintOwner", runtime.ParamLocationQuery, *params.HintOwner); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetProxyHypixelStatusRequest generates requests for GetProxyHypixelStatus
func NewGetProxyHypixelStatusRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/Proxy/hypixel/status")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkyblockAuctionRequest generates requests for PostSkyblockAuction
func NewPostSkyblockAuctionRequest(server string, params *PostSkyblockAuctionParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/skyblock/auction")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Key != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "key", runtime.ParamLocationQuery, *params.Key); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetSkyblockAuctionsRequest generates requests for GetSkyblockAuctions
func NewGetSkyblockAuctionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/skyblock/auctions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewPostSkyblockAuctionsRequest generates requests for PostSkyblockAuctions
func NewPostSkyblockAuctionsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/skyblock/auctions")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetApiTimeWithResponse request
	GetApiTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTimeResponse, error)

	// PostBaseAhPlayerIdWithResponse request
	PostBaseAhPlayerIdWithResponse(ctx context.Context, playerId string, params *PostBaseAhPlayerIdParams, reqEditors ...RequestEditorFn) (*PostBaseAhPlayerIdResponse, error)

	// PostBaseKeyWithBodyWithResponse request with any body
	PostBaseKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBaseKeyResponse, error)

	PostBaseKeyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostBaseKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBaseKeyResponse, error)

	PostBaseKeyWithResponse(ctx context.Context, body PostBaseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBaseKeyResponse, error)

	// GetBaseKeysPartyCountWithResponse request
	GetBaseKeysPartyCountWithResponse(ctx context.Context, party string, reqEditors ...RequestEditorFn) (*GetBaseKeysPartyCountResponse, error)

	// GetBaseKeysPartyInvalidWithResponse request
	GetBaseKeysPartyInvalidWithResponse(ctx context.Context, party string, params *GetBaseKeysPartyInvalidParams, reqEditors ...RequestEditorFn) (*GetBaseKeysPartyInvalidResponse, error)

	// GetProxyHypixelWithResponse request
	GetProxyHypixelWithResponse(ctx context.Context, params *GetProxyHypixelParams, reqEditors ...RequestEditorFn) (*GetProxyHypixelResponse, error)

	// GetProxyHypixelAhPlayerPlayerUuidWithResponse request
	GetProxyHypixelAhPlayerPlayerUuidWithResponse(ctx context.Context, playerUuid string, params *GetProxyHypixelAhPlayerPlayerUuidParams, reqEditors ...RequestEditorFn) (*GetProxyHypixelAhPlayerPlayerUuidResponse, error)

	// GetProxyHypixelStatusWithResponse request
	GetProxyHypixelStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProxyHypixelStatusResponse, error)

	// PostSkyblockAuctionWithResponse request
	PostSkyblockAuctionWithResponse(ctx context.Context, params *PostSkyblockAuctionParams, reqEditors ...RequestEditorFn) (*PostSkyblockAuctionResponse, error)

	// GetSkyblockAuctionsWithResponse request
	GetSkyblockAuctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSkyblockAuctionsResponse, error)

	// PostSkyblockAuctionsWithResponse request
	PostSkyblockAuctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSkyblockAuctionsResponse, error)
}

type GetApiTimeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *time.Time
}

// Status returns HTTPResponse.Status
func (r GetApiTimeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetApiTimeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBaseAhPlayerIdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBaseAhPlayerIdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBaseAhPlayerIdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostBaseKeyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PostBaseKeyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostBaseKeyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBaseKeysPartyCountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *int32
}

// Status returns HTTPResponse.Status
func (r GetBaseKeysPartyCountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBaseKeysPartyCountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetBaseKeysPartyInvalidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]ApiKey
}

// Status returns HTTPResponse.Status
func (r GetBaseKeysPartyInvalidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetBaseKeysPartyInvalidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProxyHypixelResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetProxyHypixelResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProxyHypixelResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProxyHypixelAhPlayerPlayerUuidResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *[]SaveAuction
}

// Status returns HTTPResponse.Status
func (r GetProxyHypixelAhPlayerPlayerUuidResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProxyHypixelAhPlayerPlayerUuidResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProxyHypixelStatusResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r GetProxyHypixelStatusResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProxyHypixelStatusResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkyblockAuctionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PostSkyblockAuctionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkyblockAuctionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetSkyblockAuctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r GetSkyblockAuctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetSkyblockAuctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PostSkyblockAuctionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *string
}

// Status returns HTTPResponse.Status
func (r PostSkyblockAuctionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PostSkyblockAuctionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetApiTimeWithResponse request returning *GetApiTimeResponse
func (c *ClientWithResponses) GetApiTimeWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetApiTimeResponse, error) {
	rsp, err := c.GetApiTime(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetApiTimeResponse(rsp)
}

// PostBaseAhPlayerIdWithResponse request returning *PostBaseAhPlayerIdResponse
func (c *ClientWithResponses) PostBaseAhPlayerIdWithResponse(ctx context.Context, playerId string, params *PostBaseAhPlayerIdParams, reqEditors ...RequestEditorFn) (*PostBaseAhPlayerIdResponse, error) {
	rsp, err := c.PostBaseAhPlayerId(ctx, playerId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBaseAhPlayerIdResponse(rsp)
}

// PostBaseKeyWithBodyWithResponse request with arbitrary body returning *PostBaseKeyResponse
func (c *ClientWithResponses) PostBaseKeyWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PostBaseKeyResponse, error) {
	rsp, err := c.PostBaseKeyWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBaseKeyResponse(rsp)
}

func (c *ClientWithResponses) PostBaseKeyWithApplicationWildcardPlusJSONBodyWithResponse(ctx context.Context, body PostBaseKeyApplicationWildcardPlusJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBaseKeyResponse, error) {
	rsp, err := c.PostBaseKeyWithApplicationWildcardPlusJSONBody(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBaseKeyResponse(rsp)
}

func (c *ClientWithResponses) PostBaseKeyWithResponse(ctx context.Context, body PostBaseKeyJSONRequestBody, reqEditors ...RequestEditorFn) (*PostBaseKeyResponse, error) {
	rsp, err := c.PostBaseKey(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostBaseKeyResponse(rsp)
}

// GetBaseKeysPartyCountWithResponse request returning *GetBaseKeysPartyCountResponse
func (c *ClientWithResponses) GetBaseKeysPartyCountWithResponse(ctx context.Context, party string, reqEditors ...RequestEditorFn) (*GetBaseKeysPartyCountResponse, error) {
	rsp, err := c.GetBaseKeysPartyCount(ctx, party, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBaseKeysPartyCountResponse(rsp)
}

// GetBaseKeysPartyInvalidWithResponse request returning *GetBaseKeysPartyInvalidResponse
func (c *ClientWithResponses) GetBaseKeysPartyInvalidWithResponse(ctx context.Context, party string, params *GetBaseKeysPartyInvalidParams, reqEditors ...RequestEditorFn) (*GetBaseKeysPartyInvalidResponse, error) {
	rsp, err := c.GetBaseKeysPartyInvalid(ctx, party, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetBaseKeysPartyInvalidResponse(rsp)
}

// GetProxyHypixelWithResponse request returning *GetProxyHypixelResponse
func (c *ClientWithResponses) GetProxyHypixelWithResponse(ctx context.Context, params *GetProxyHypixelParams, reqEditors ...RequestEditorFn) (*GetProxyHypixelResponse, error) {
	rsp, err := c.GetProxyHypixel(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProxyHypixelResponse(rsp)
}

// GetProxyHypixelAhPlayerPlayerUuidWithResponse request returning *GetProxyHypixelAhPlayerPlayerUuidResponse
func (c *ClientWithResponses) GetProxyHypixelAhPlayerPlayerUuidWithResponse(ctx context.Context, playerUuid string, params *GetProxyHypixelAhPlayerPlayerUuidParams, reqEditors ...RequestEditorFn) (*GetProxyHypixelAhPlayerPlayerUuidResponse, error) {
	rsp, err := c.GetProxyHypixelAhPlayerPlayerUuid(ctx, playerUuid, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProxyHypixelAhPlayerPlayerUuidResponse(rsp)
}

// GetProxyHypixelStatusWithResponse request returning *GetProxyHypixelStatusResponse
func (c *ClientWithResponses) GetProxyHypixelStatusWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProxyHypixelStatusResponse, error) {
	rsp, err := c.GetProxyHypixelStatus(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProxyHypixelStatusResponse(rsp)
}

// PostSkyblockAuctionWithResponse request returning *PostSkyblockAuctionResponse
func (c *ClientWithResponses) PostSkyblockAuctionWithResponse(ctx context.Context, params *PostSkyblockAuctionParams, reqEditors ...RequestEditorFn) (*PostSkyblockAuctionResponse, error) {
	rsp, err := c.PostSkyblockAuction(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkyblockAuctionResponse(rsp)
}

// GetSkyblockAuctionsWithResponse request returning *GetSkyblockAuctionsResponse
func (c *ClientWithResponses) GetSkyblockAuctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetSkyblockAuctionsResponse, error) {
	rsp, err := c.GetSkyblockAuctions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetSkyblockAuctionsResponse(rsp)
}

// PostSkyblockAuctionsWithResponse request returning *PostSkyblockAuctionsResponse
func (c *ClientWithResponses) PostSkyblockAuctionsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*PostSkyblockAuctionsResponse, error) {
	rsp, err := c.PostSkyblockAuctions(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePostSkyblockAuctionsResponse(rsp)
}

// ParseGetApiTimeResponse parses an HTTP response from a GetApiTimeWithResponse call
func ParseGetApiTimeResponse(rsp *http.Response) (*GetApiTimeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetApiTimeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest time.Time
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostBaseAhPlayerIdResponse parses an HTTP response from a PostBaseAhPlayerIdWithResponse call
func ParsePostBaseAhPlayerIdResponse(rsp *http.Response) (*PostBaseAhPlayerIdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBaseAhPlayerIdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostBaseKeyResponse parses an HTTP response from a PostBaseKeyWithResponse call
func ParsePostBaseKeyResponse(rsp *http.Response) (*PostBaseKeyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostBaseKeyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseGetBaseKeysPartyCountResponse parses an HTTP response from a GetBaseKeysPartyCountWithResponse call
func ParseGetBaseKeysPartyCountResponse(rsp *http.Response) (*GetBaseKeysPartyCountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBaseKeysPartyCountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest int32
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetBaseKeysPartyInvalidResponse parses an HTTP response from a GetBaseKeysPartyInvalidWithResponse call
func ParseGetBaseKeysPartyInvalidResponse(rsp *http.Response) (*GetBaseKeysPartyInvalidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetBaseKeysPartyInvalidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []ApiKey
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProxyHypixelResponse parses an HTTP response from a GetProxyHypixelWithResponse call
func ParseGetProxyHypixelResponse(rsp *http.Response) (*GetProxyHypixelResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProxyHypixelResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProxyHypixelAhPlayerPlayerUuidResponse parses an HTTP response from a GetProxyHypixelAhPlayerPlayerUuidWithResponse call
func ParseGetProxyHypixelAhPlayerPlayerUuidResponse(rsp *http.Response) (*GetProxyHypixelAhPlayerPlayerUuidResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProxyHypixelAhPlayerPlayerUuidResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest []SaveAuction
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetProxyHypixelStatusResponse parses an HTTP response from a GetProxyHypixelStatusWithResponse call
func ParseGetProxyHypixelStatusResponse(rsp *http.Response) (*GetProxyHypixelStatusResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProxyHypixelStatusResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParsePostSkyblockAuctionResponse parses an HTTP response from a PostSkyblockAuctionWithResponse call
func ParsePostSkyblockAuctionResponse(rsp *http.Response) (*PostSkyblockAuctionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkyblockAuctionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParseGetSkyblockAuctionsResponse parses an HTTP response from a GetSkyblockAuctionsWithResponse call
func ParseGetSkyblockAuctionsResponse(rsp *http.Response) (*GetSkyblockAuctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetSkyblockAuctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// ParsePostSkyblockAuctionsResponse parses an HTTP response from a PostSkyblockAuctionsWithResponse call
func ParsePostSkyblockAuctionsResponse(rsp *http.Response) (*PostSkyblockAuctionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PostSkyblockAuctionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest string
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case rsp.StatusCode == 200:
		// Content-type (text/plain) unsupported

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
