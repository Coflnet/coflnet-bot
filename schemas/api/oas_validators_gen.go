// Code generated by ogen, DO NOT EDIT.

package api

import (
	"fmt"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/validate"
)

func (s APIModDescriptionModificationsPostOKApplicationJSON) Validate() error {
	alias := ([][]DescModification)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if elem == nil {
				return errors.New("nil is invalid value")
			}
			var failures []validate.FieldError
			for i, elem := range elem {
				if err := func() error {
					if err := elem.Validate(); err != nil {
						return err
					}
					return nil
				}(); err != nil {
					failures = append(failures, validate.FieldError{
						Name:  fmt.Sprintf("[%d]", i),
						Error: err,
					})
				}
			}
			if len(failures) > 0 {
				return &validate.Error{Fields: failures}
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s APIModDescriptionPostOKApplicationJSON) Validate() error {
	alias := ([][]string)(s)
	if alias == nil {
		return errors.New("nil is invalid value")
	}
	var failures []validate.FieldError
	for i, elem := range alias {
		if err := func() error {
			if elem == nil {
				return errors.New("nil is invalid value")
			}
			return nil
		}(); err != nil {
			failures = append(failures, validate.FieldError{
				Name:  fmt.Sprintf("[%d]", i),
				Error: err,
			})
		}
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *AveragePrice) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Min.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "min",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Max.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "max",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Avg.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "avg",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *BuyOrder) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PricePerUnit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pricePerUnit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s Category) Validate() error {
	switch s {
	case "UNKNOWN":
		return nil
	case "WEAPON":
		return nil
	case "ARMOR":
		return nil
	case "ACCESSORIES":
		return nil
	case "CONSUMABLES":
		return nil
	case "BLOCKS":
		return nil
	case "MISC":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ColorEnchant) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ColorSaveAuction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Enchantments.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enchantments",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tag.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "itemName",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Coop.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coop",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CoopMembers.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coopMembers",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Bids.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bids",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Reforge.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reforge",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Category.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "category",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tier",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *CurrentPrice) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Sell.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sell",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Buy.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "buy",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *DescModification) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s DescriptionField) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "LBIN":
		return nil
	case "LBIN_KEY":
		return nil
	case "MEDIAN":
		return nil
	case "MEDIAN_KEY":
		return nil
	case "VOLUME":
		return nil
	case "TAG":
		return nil
	case "CRAFT_COST":
		return nil
	case "BazaarBuy":
		return nil
	case "BazaarSell":
		return nil
	case "PRICE_PAID":
		return nil
	case "ITEM_KEY":
		return nil
	case "BAZAAR_COST":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *DescriptionSetting) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Fields.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if elem == nil {
							return errors.New("nil is invalid value")
						}
						var failures []validate.FieldError
						for i, elem := range elem {
							if err := func() error {
								if err := elem.Validate(); err != nil {
									return err
								}
								return nil
							}(); err != nil {
								failures = append(failures, validate.FieldError{
									Name:  fmt.Sprintf("[%d]", i),
									Error: err,
								})
							}
						}
						if len(failures) > 0 {
							return &validate.Error{Fields: failures}
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "fields",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Enchantment) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s EnchantmentType) Validate() error {
	switch s {
	case "unknown":
		return nil
	case "cleave":
		return nil
	case "critical":
		return nil
	case "cubism":
		return nil
	case "ender_slayer":
		return nil
	case "execute":
		return nil
	case "experience":
		return nil
	case "first_strike":
		return nil
	case "giant_killer":
		return nil
	case "impaling":
		return nil
	case "lethality":
		return nil
	case "life_steal":
		return nil
	case "luck":
		return nil
	case "scavenger":
		return nil
	case "thunderlord":
		return nil
	case "telekinesis":
		return nil
	case "vampirism":
		return nil
	case "venomous":
		return nil
	case "growth":
		return nil
	case "aiming":
		return nil
	case "dragon_hunter":
		return nil
	case "infinite_quiver":
		return nil
	case "piercing":
		return nil
	case "snipe":
		return nil
	case "harvesting":
		return nil
	case "rainbow":
		return nil
	case "smelting_touch":
		return nil
	case "angler":
		return nil
	case "blessing":
		return nil
	case "caster":
		return nil
	case "frail":
		return nil
	case "magnet":
		return nil
	case "spiked_hook":
		return nil
	case "bane_of_arthropods":
		return nil
	case "fire_aspect":
		return nil
	case "looting":
		return nil
	case "knockback":
		return nil
	case "sharpness":
		return nil
	case "smite":
		return nil
	case "aqua_affinity":
		return nil
	case "blast_protection":
		return nil
	case "depth_strider":
		return nil
	case "feather_falling":
		return nil
	case "fire_protection":
		return nil
	case "frost_walker":
		return nil
	case "projectile_protection":
		return nil
	case "protection":
		return nil
	case "respiration":
		return nil
	case "thorns":
		return nil
	case "flame":
		return nil
	case "power":
		return nil
	case "punch":
		return nil
	case "efficiency":
		return nil
	case "fortune":
		return nil
	case "silk_touch":
		return nil
	case "lure":
		return nil
	case "luck_of_the_sea":
		return nil
	case "true_protection":
		return nil
	case "sugar_rush":
		return nil
	case "replenish":
		return nil
	case "rejuvenate":
		return nil
	case "ultimate_bank":
		return nil
	case "ultimate_combo":
		return nil
	case "ultimate_jerry":
		return nil
	case "ultimate_last_stand":
		return nil
	case "ultimate_no_pain_no_gain":
		return nil
	case "ultimate_wisdom":
		return nil
	case "ultimate_wise":
		return nil
	case "expertise":
		return nil
	case "ultimate_chimera":
		return nil
	case "ultimate_rend":
		return nil
	case "overload":
		return nil
	case "ultimate_legion":
		return nil
	case "ultimate_swarm":
		return nil
	case "big_brain":
		return nil
	case "compact":
		return nil
	case "vicious":
		return nil
	case "counter_strike":
		return nil
	case "turbo_carrot":
		return nil
	case "turbo_cactus":
		return nil
	case "turbo_cane":
		return nil
	case "turbo_coco":
		return nil
	case "turbo_melon":
		return nil
	case "turbo_mushrooms":
		return nil
	case "turbo_pumpkin":
		return nil
	case "turbo_potato":
		return nil
	case "turbo_warts":
		return nil
	case "turbo_wheat":
		return nil
	case "chance":
		return nil
	case "PROSECUTE":
		return nil
	case "syphon":
		return nil
	case "respite":
		return nil
	case "thunderbolt":
		return nil
	case "titan_killer":
		return nil
	case "triple_strike":
		return nil
	case "ultimate_soul_eater":
		return nil
	case "ultimate_one_for_all":
		return nil
	case "None":
		return nil
	case "cultivating":
		return nil
	case "delicate":
		return nil
	case "mana_steal":
		return nil
	case "smarty_pants":
		return nil
	case "pristine":
		return nil
	case "ultimate_fatal_tempo":
		return nil
	case "ultimate_inferno":
		return nil
	case "charm":
		return nil
	case "corruption":
		return nil
	case "ferocious_mana":
		return nil
	case "strong_mana":
		return nil
	case "hardened_mana":
		return nil
	case "mana_vampire":
		return nil
	case "smoldering":
		return nil
	case "ultimate_duplex":
		return nil
	case "ultimate_flash":
		return nil
	case "hecatomb":
		return nil
	case "champion":
		return nil
	case "ultimate_habanero_tactics":
		return nil
	case "cayenne":
		return nil
	case "divine_gift":
		return nil
	case "piscary":
		return nil
	case "ultimate_bobbin_time":
		return nil
	case "tabasco":
		return nil
	case "prosperity":
		return nil
	case "sunder":
		return nil
	case "Any":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *FilterOptions) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Options.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "options",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *FilterQuery) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Auction.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "auction",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s FilterType) Validate() error {
	switch s {
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 8:
		return nil
	case 16:
		return nil
	case 32:
		return nil
	case 64:
		return nil
	case 128:
		return nil
	case 256:
		return nil
	case 512:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s FinderType) Validate() error {
	switch s {
	case 0:
		return nil
	case 1:
		return nil
	case 2:
		return nil
	case 4:
		return nil
	case 6:
		return nil
	case 7:
		return nil
	case 8:
		return nil
	case 16:
		return nil
	case 32:
		return nil
	case 64:
		return nil
	case 128:
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *FlipDetails) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Finder.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "finder",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.PropertyChanges.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "propertyChanges",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *FlipSettings) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Blacklist.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "blacklist",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Whitelist.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "whitelist",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Mod.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mod",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Finders.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "finders",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MinVolume.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "minVolume",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *FlipSumary) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Flips.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "flips",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *GraphResult) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.MaxBuy.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maxBuy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaxSell.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "maxSell",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MinBuy.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "minBuy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MinSell.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "minSell",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Buy.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "buy",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Sell.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sell",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *Ingredient) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Cost.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cost",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *InventoryBatchLookup) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Uuids.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "uuids",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *InventoryData) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Settings.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "settings",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ItemCategory) Validate() error {
	switch s {
	case "UNKNOWN":
		return nil
	case "PET_ITEM":
		return nil
	case "SWORD":
		return nil
	case "CHESTPLATE":
		return nil
	case "HELMET":
		return nil
	case "REFORGE_STONE":
		return nil
	case "COSMETIC":
		return nil
	case "AXE":
		return nil
	case "LEGGINGS":
		return nil
	case "ACCESSORY":
		return nil
	case "BOW":
		return nil
	case "TRAVEL_SCROLL":
		return nil
	case "BOOTS":
		return nil
	case "HOE":
		return nil
	case "BAIT":
		return nil
	case "FISHING_ROD":
		return nil
	case "DUNGEON_PASS":
		return nil
	case "ARROW":
		return nil
	case "SPADE":
		return nil
	case "SHEARS":
		return nil
	case "PICKAXE":
		return nil
	case "ARROW_POISON":
		return nil
	case "WAND":
		return nil
	case "DRILL":
		return nil
	case "FISHING_WEAPON":
		return nil
	case "GAUNTLET":
		return nil
	case "FURNITURE":
		return nil
	case "GENERATOR":
		return nil
	case "MINION_SKIN":
		return nil
	case "PRIVATE_ISLAND":
		return nil
	case "ISLAND_CRYSTAL":
		return nil
	case "FRAGMENT":
		return nil
	case "SLAYER":
		return nil
	case "DUNGEON":
		return nil
	case "DUNGEON_ITEM":
		return nil
	case "SACK":
		return nil
	case "PORTAL":
		return nil
	case "DEEP_CAVERNS":
		return nil
	case "BACKPACK":
		return nil
	case "TALISMAN_ENRICHMENT":
		return nil
	case "THE_FISH":
		return nil
	case "PET":
		return nil
	case "PET_SKIN":
		return nil
	case "RUNE":
		return nil
	case "ArmorDye":
		return nil
	case "Vanilla":
		return nil
	case "NullNamed":
		return nil
	case "CLOAK":
		return nil
	case "NECKLACE":
		return nil
	case "BELT":
		return nil
	case "GLOVES":
		return nil
	case "BRACELET":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s ItemFlags) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "BAZAAR":
		return nil
	case "TRADEABLE":
		return nil
	case "AUCTION":
		return nil
	case "CRAFT":
		return nil
	case "GLOWING":
		return nil
	case "MUSEUM":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ItemMetadataElement) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Flags.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "flags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *KatFlip) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Volume.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.UpgradeCost.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "upgradeCost",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.MaterialCost.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "materialCost",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CoreData.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coreData",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.TargetRarity.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "targetRarity",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Profit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "profit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *KatUpgradeCost) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BaseRarity.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "baseRarity",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ListEntry) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Tags.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tags",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ModSettings) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.TimerScale.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "timerScale",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ModType) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "INSERT":
		return nil
	case "REPLACE":
		return nil
	case "APPEND":
		return nil
	case "DELETE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ModelCandidate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Perks.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "perks",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *ModelElectionPeriod) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Candidates.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "candidates",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Winner.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "winner",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PriceEstimate) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Volume.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "volume",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PriceSumary) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Mean.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "mean",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Volume.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "volume",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *PrivacySettings) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.CommandPrefixes.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "commandPrefixes",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s ProductType) Validate() error {
	switch s {
	case "NONE":
		return nil
	case "SERVICE":
		return nil
	case "COLLECTABLE":
		return nil
	case "TOP_UP":
		return nil
	case "LOCKED":
		return nil
	case "DISABLED":
		return nil
	case "VARIABLE_PRICE":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *ProfitableCraft) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.SellPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sellPrice",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CraftCost.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "craftCost",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Ingredients.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "ingredients",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Volume.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "volume",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Median.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "median",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s Reforge) Validate() error {
	switch s {
	case "None":
		return nil
	case "Demonic":
		return nil
	case "Forceful":
		return nil
	case "Gentle":
		return nil
	case "Godly":
		return nil
	case "Hurtful":
		return nil
	case "Keen":
		return nil
	case "Strong":
		return nil
	case "Superior":
		return nil
	case "Unpleasant":
		return nil
	case "Zealous":
		return nil
	case "Odd":
		return nil
	case "Rich":
		return nil
	case "Epic":
		return nil
	case "Fair":
		return nil
	case "Fast":
		return nil
	case "Heroic":
		return nil
	case "Legendary":
		return nil
	case "Spicy":
		return nil
	case "Deadly":
		return nil
	case "Fine":
		return nil
	case "Grand":
		return nil
	case "Hasty":
		return nil
	case "Neat":
		return nil
	case "Papid":
		return nil
	case "Unreal":
		return nil
	case "Clean":
		return nil
	case "Fierce":
		return nil
	case "Heavy":
		return nil
	case "Light":
		return nil
	case "Mythic":
		return nil
	case "Pure":
		return nil
	case "Smart":
		return nil
	case "Titanic":
		return nil
	case "Wise":
		return nil
	case "Very":
		return nil
	case "Highly":
		return nil
	case "Bizarre":
		return nil
	case "Itchy":
		return nil
	case "Omnious":
		return nil
	case "Pleasant":
		return nil
	case "Pretty":
		return nil
	case "Shiny":
		return nil
	case "Simple":
		return nil
	case "Strange":
		return nil
	case "Vivid":
		return nil
	case "Ominous":
		return nil
	case "Sharp":
		return nil
	case "Rapid":
		return nil
	case "Necrotic":
		return nil
	case "Fabled":
		return nil
	case "Precise":
		return nil
	case "Giant":
		return nil
	case "aote_stone":
		return nil
	case "Spiritual":
		return nil
	case "Treacherous":
		return nil
	case "Renowned":
		return nil
	case "Reinforced":
		return nil
	case "rich_bow":
		return nil
	case "Spiked":
		return nil
	case "Perfect":
		return nil
	case "Magnetic":
		return nil
	case "Loving":
		return nil
	case "Gilded":
		return nil
	case "odd_sword":
		return nil
	case "Salty":
		return nil
	case "Silky":
		return nil
	case "Refined":
		return nil
	case "suspicious":
		return nil
	case "toil":
		return nil
	case "empowered":
		return nil
	case "fruitful":
		return nil
	case "blessed":
		return nil
	case "shaded":
		return nil
	case "awkward":
		return nil
	case "dirty":
		return nil
	case "undead":
		return nil
	case "cubic":
		return nil
	case "bloody":
		return nil
	case "moil":
		return nil
	case "ridiculous":
		return nil
	case "rich_sword":
		return nil
	case "warped":
		return nil
	case "odd_bow":
		return nil
	case "candied":
		return nil
	case "submerged":
		return nil
	case "ancient":
		return nil
	case "withered":
		return nil
	case "sweet":
		return nil
	case "fleet":
		return nil
	case "stellar":
		return nil
	case "mithraic":
		return nil
	case "Auspicious":
		return nil
	case "headstrong":
		return nil
	case "stiff":
		return nil
	case "bulky":
		return nil
	case "lucky":
		return nil
	case "bountiful":
		return nil
	case "heated":
		return nil
	case "jaded":
		return nil
	case "ambered":
		return nil
	case "double_bit":
		return nil
	case "excellent":
		return nil
	case "fortunate":
		return nil
	case "prospector":
		return nil
	case "lush":
		return nil
	case "sturdy":
		return nil
	case "lumberjack":
		return nil
	case "unyielding":
		return nil
	case "great":
		return nil
	case "robust":
		return nil
	case "rugged":
		return nil
	case "zooming":
		return nil
	case "peasant":
		return nil
	case "strengthened":
		return nil
	case "glistening":
		return nil
	case "waxed":
		return nil
	case "fortified":
		return nil
	case "green_thumb":
		return nil
	case "pitchin":
		return nil
	case "coldfusion":
		return nil
	case "Unknown":
		return nil
	case "Any":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *SaveAuction) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Tag.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    40,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tag",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.ItemName.Get(); ok {
			if err := func() error {
				if err := (validate.String{
					MinLength:    0,
					MinLengthSet: false,
					MaxLength:    45,
					MaxLengthSet: true,
					Email:        false,
					Hostname:     false,
					Regex:        nil,
				}).Validate(string(value)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "itemName",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Coop.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coop",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.CoopMembers.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "coopMembers",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Bids.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "bids",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Enchantments.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "enchantments",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Reforge.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "reforge",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Category.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "category",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tier",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SearchResultItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Tier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tier",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SellOrder) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.PricePerUnit.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "pricePerUnit",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SkyblockItem) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.NpcSellPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "npcSellPrice",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Flags.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "flags",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Tier.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "tier",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Category.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "category",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *StorageQuickStatus) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.BuyPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "buyPrice",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SellPrice.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sellPrice",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.BuyOrders.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "buyOrders",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.SellOrders.Get(); ok {
			if err := func() error {
				if value == nil {
					return errors.New("nil is invalid value")
				}
				var failures []validate.FieldError
				for i, elem := range value {
					if err := func() error {
						if err := elem.Validate(); err != nil {
							return err
						}
						return nil
					}(); err != nil {
						failures = append(failures, validate.FieldError{
							Name:  fmt.Sprintf("[%d]", i),
							Error: err,
						})
					}
				}
				if len(failures) > 0 {
					return &validate.Error{Fields: failures}
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "sellOrders",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s *SupplyElement) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Volume.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "volume",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}

func (s Tier) Validate() error {
	switch s {
	case "UNKNOWN":
		return nil
	case "COMMON":
		return nil
	case "UNCOMMON":
		return nil
	case "RARE":
		return nil
	case "EPIC":
		return nil
	case "LEGENDARY":
		return nil
	case "SPECIAL":
		return nil
	case "VERY_SPECIAL":
		return nil
	case "MYTHIC":
		return nil
	case "SUPREME":
		return nil
	default:
		return errors.Errorf("invalid value: %v", s)
	}
}

func (s *TopUpProduct) Validate() error {
	var failures []validate.FieldError
	if err := func() error {
		if value, ok := s.Type.Get(); ok {
			if err := func() error {
				if err := value.Validate(); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "type",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Price.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "price",
			Error: err,
		})
	}
	if err := func() error {
		if value, ok := s.Cost.Get(); ok {
			if err := func() error {
				if err := (validate.Float{}).Validate(float64(value)); err != nil {
					return errors.Wrap(err, "float")
				}
				return nil
			}(); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		failures = append(failures, validate.FieldError{
			Name:  "cost",
			Error: err,
		})
	}
	if len(failures) > 0 {
		return &validate.Error{Fields: failures}
	}
	return nil
}
