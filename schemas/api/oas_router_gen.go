// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
	}
	if prefix := s.cfg.Prefix; len(prefix) > 0 {
		if strings.HasPrefix(elem, prefix) {
			// Cut prefix from the path.
			elem = strings.TrimPrefix(elem, prefix)
		} else {
			// Prefix doesn't match.
			s.notFound(w, r)
			return
		}
	}
	if len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [1]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/"
			if l := len("/api/"); len(elem) >= l && elem[0:l] == "/api/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'F': // Prefix: "Filter"
				if l := len("Filter"); len(elem) >= l && elem[0:l] == "Filter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "POST":
						s.handleAPIFilterPostRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "POST")
					}

					return
				}
			case 'a': // Prefix: "auction"
				if l := len("auction"); len(elem) >= l && elem[0:l] == "auction" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "auctionUuid"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAPIAuctionAuctionUuidGetRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/uid"
						if l := len("/uid"); len(elem) >= l && elem[0:l] == "/uid" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIAuctionAuctionUuidUIDGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				case 's': // Prefix: "s/"
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "active/uuid"
						if l := len("active/uuid"); len(elem) >= l && elem[0:l] == "active/uuid" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAPIAuctionsActiveUUIDPostRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					case 'b': // Prefix: "batch"
						if l := len("batch"); len(elem) >= l && elem[0:l] == "batch" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIAuctionsBatchGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 's': // Prefix: "supply/low"
						if l := len("supply/low"); len(elem) >= l && elem[0:l] == "supply/low" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIAuctionsSupplyLowGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 't': // Prefix: "tag/"
						if l := len("tag/"); len(elem) >= l && elem[0:l] == "tag/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "itemTag"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "active/"
								if l := len("active/"); len(elem) >= l && elem[0:l] == "active/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bin"
									if l := len("bin"); len(elem) >= l && elem[0:l] == "bin" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAPIAuctionsTagItemTagActiveBinGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'o': // Prefix: "overview"
									if l := len("overview"); len(elem) >= l && elem[0:l] == "overview" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAPIAuctionsTagItemTagActiveOverviewGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							case 'r': // Prefix: "recent/overview"
								if l := len("recent/overview"); len(elem) >= l && elem[0:l] == "recent/overview" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIAuctionsTagItemTagRecentOverviewGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 's': // Prefix: "sold"
								if l := len("sold"); len(elem) >= l && elem[0:l] == "sold" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIAuctionsTagItemTagSoldGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					case 'u': // Prefix: "uid"
						if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "uid"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/sold"
								if l := len("/sold"); len(elem) >= l && elem[0:l] == "/sold" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIAuctionsUIDUIDSoldGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						case 's': // Prefix: "s/sold"
							if l := len("s/sold"); len(elem) >= l && elem[0:l] == "s/sold" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIAuctionsUidsSoldPostRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					}
				}
			case 'b': // Prefix: "bazaar/"
				if l := len("bazaar/"); len(elem) >= l && elem[0:l] == "bazaar/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "item/history/"
					if l := len("item/history/"); len(elem) >= l && elem[0:l] == "item/history/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "itemTag"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/status"
						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIBazaarItemHistoryItemTagStatusGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
				// Param: "itemTag"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "history"
						if l := len("history"); len(elem) >= l && elem[0:l] == "history" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleAPIBazaarItemTagHistoryGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "day"
								if l := len("day"); len(elem) >= l && elem[0:l] == "day" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIBazaarItemTagHistoryDayGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'h': // Prefix: "hour"
								if l := len("hour"); len(elem) >= l && elem[0:l] == "hour" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIBazaarItemTagHistoryHourGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'w': // Prefix: "week"
								if l := len("week"); len(elem) >= l && elem[0:l] == "week" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIBazaarItemTagHistoryWeekGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							}
						}
					case 's': // Prefix: "snapshot"
						if l := len("snapshot"); len(elem) >= l && elem[0:l] == "snapshot" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIBazaarItemTagSnapshotGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'c': // Prefix: "craft/"
				if l := len("craft/"); len(elem) >= l && elem[0:l] == "craft/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "api/craft"
					if l := len("api/craft"); len(elem) >= l && elem[0:l] == "api/craft" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPICraftAPICraftGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'p': // Prefix: "profit"
					if l := len("profit"); len(elem) >= l && elem[0:l] == "profit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPICraftProfitGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'r': // Prefix: "recipe/"
					if l := len("recipe/"); len(elem) >= l && elem[0:l] == "recipe/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "itemTag"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPICraftRecipeItemTagGetRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'd': // Prefix: "data/p"
				if l := len("data/p"); len(elem) >= l && elem[0:l] == "data/p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "layerName"
					if l := len("layerName"); len(elem) >= l && elem[0:l] == "layerName" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "POST":
							s.handleAPIDataPlayerNamePostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAPIDataPlayerNamesPostRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				case 'r': // Prefix: "roxy"
					if l := len("roxy"); len(elem) >= l && elem[0:l] == "roxy" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAPIDataProxyPostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'f': // Prefix: "f"
				if l := len("f"); len(elem) >= l && elem[0:l] == "f" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "ilter/options"
					if l := len("ilter/options"); len(elem) >= l && elem[0:l] == "ilter/options" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPIFilterOptionsGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'l': // Prefix: "lip/"
					if l := len("lip/"); len(elem) >= l && elem[0:l] == "lip/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "ettings/options"
							if l := len("ettings/options"); len(elem) >= l && elem[0:l] == "ettings/options" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAPIFlipSettingsOptionsGetRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 't': // Prefix: "tats/"
							if l := len("tats/"); len(elem) >= l && elem[0:l] == "tats/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "finder/"
								if l := len("finder/"); len(elem) >= l && elem[0:l] == "finder/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "finderName"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIFlipStatsFinderFinderNameGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'p': // Prefix: "player/"
								if l := len("player/"); len(elem) >= l && elem[0:l] == "player/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "playerUuid"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch r.Method {
									case "GET":
										s.handleAPIFlipStatsPlayerPlayerUuidGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
								switch elem[0] {
								case '/': // Prefix: "/hour"
									if l := len("/hour"); len(elem) >= l && elem[0:l] == "/hour" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAPIFlipStatsPlayerPlayerUuidHourGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						}
					case 't': // Prefix: "track/"
						if l := len("track/"); len(elem) >= l && elem[0:l] == "track/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "found/"
							if l := len("found/"); len(elem) >= l && elem[0:l] == "found/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "auctionId"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIFlipTrackFoundAuctionIdPostRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'p': // Prefix: "purchase/"
							if l := len("purchase/"); len(elem) >= l && elem[0:l] == "purchase/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "auctionId"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIFlipTrackPurchaseAuctionIdPostRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'u': // Prefix: "update/when"
						if l := len("update/when"); len(elem) >= l && elem[0:l] == "update/when" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIFlipUpdateWhenGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'i': // Prefix: "item"
				if l := len("item"); len(elem) >= l && elem[0:l] == "item" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "price/"
						if l := len("price/"); len(elem) >= l && elem[0:l] == "price/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "itemTag"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch r.Method {
							case "GET":
								s.handleAPIItemPriceItemTagGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "bin"
								if l := len("bin"); len(elem) >= l && elem[0:l] == "bin" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIItemPriceItemTagBinGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'c': // Prefix: "current"
								if l := len("current"); len(elem) >= l && elem[0:l] == "current" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									// Leaf node.
									switch r.Method {
									case "GET":
										s.handleAPIItemPriceItemTagCurrentGetRequest([1]string{
											args[0],
										}, w, r)
									default:
										s.notAllowed(w, r, "GET")
									}

									return
								}
							case 'h': // Prefix: "history/"
								if l := len("history/"); len(elem) >= l && elem[0:l] == "history/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "day"
									if l := len("day"); len(elem) >= l && elem[0:l] == "day" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAPIItemPriceItemTagHistoryDayGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'f': // Prefix: "full"
									if l := len("full"); len(elem) >= l && elem[0:l] == "full" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAPIItemPriceItemTagHistoryFullGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'm': // Prefix: "month"
									if l := len("month"); len(elem) >= l && elem[0:l] == "month" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAPIItemPriceItemTagHistoryMonthGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								case 'w': // Prefix: "week"
									if l := len("week"); len(elem) >= l && elem[0:l] == "week" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										// Leaf node.
										switch r.Method {
										case "GET":
											s.handleAPIItemPriceItemTagHistoryWeekGetRequest([1]string{
												args[0],
											}, w, r)
										default:
											s.notAllowed(w, r, "GET")
										}

										return
									}
								}
							}
						}
					case 's': // Prefix: "search/"
						if l := len("search/"); len(elem) >= l && elem[0:l] == "search/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "searchVal"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIItemSearchSearchValGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
					// Param: "itemTag"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "details"
							if l := len("details"); len(elem) >= l && elem[0:l] == "details" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAPIItemItemTagDetailsGetRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 's': // Prefix: "similar"
							if l := len("similar"); len(elem) >= l && elem[0:l] == "similar" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAPIItemItemTagSimilarGetRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAPIItemsGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bazaar/tags"
							if l := len("bazaar/tags"); len(elem) >= l && elem[0:l] == "bazaar/tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAPIItemsBazaarTagsGetRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'n': // Prefix: "names"
							if l := len("names"); len(elem) >= l && elem[0:l] == "names" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIItemsNamesPostRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					}
				}
			case 'k': // Prefix: "kat/"
				if l := len("kat/"); len(elem) >= l && elem[0:l] == "kat/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "data"
					if l := len("data"); len(elem) >= l && elem[0:l] == "data" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPIKatDataGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'p': // Prefix: "profit"
					if l := len("profit"); len(elem) >= l && elem[0:l] == "profit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPIKatProfitGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				}
			case 'm': // Prefix: "m"
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ayor"
					if l := len("ayor"); len(elem) >= l && elem[0:l] == "ayor" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch r.Method {
						case "GET":
							s.handleAPIMayorGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "year"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIMayorYearGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				case 'o': // Prefix: "od/"
					if l := len("od/"); len(elem) >= l && elem[0:l] == "od/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "commands"
						if l := len("commands"); len(elem) >= l && elem[0:l] == "commands" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIModCommandsGetRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					case 'd': // Prefix: "description"
						if l := len("description"); len(elem) >= l && elem[0:l] == "description" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch r.Method {
							case "POST":
								s.handleAPIModDescriptionPostRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
						switch elem[0] {
						case '/': // Prefix: "/modifications"
							if l := len("/modifications"); len(elem) >= l && elem[0:l] == "/modifications" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIModDescriptionModificationsPostRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'i': // Prefix: "item/"
						if l := len("item/"); len(elem) >= l && elem[0:l] == "item/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "uuid"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIModItemUUIDGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
				}
			case 'p': // Prefix: "p"
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "layer/"
					if l := len("layer/"); len(elem) >= l && elem[0:l] == "layer/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "playerUuid"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "auctions"
							if l := len("auctions"); len(elem) >= l && elem[0:l] == "auctions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAPIPlayerPlayerUuidAuctionsGetRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'b': // Prefix: "bids"
							if l := len("bids"); len(elem) >= l && elem[0:l] == "bids" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAPIPlayerPlayerUuidBidsGetRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET")
								}

								return
							}
						case 'n': // Prefix: "name"
							if l := len("name"); len(elem) >= l && elem[0:l] == "name" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "GET":
									s.handleAPIPlayerPlayerUuidNameGetRequest([1]string{
										args[0],
									}, w, r)
								case "POST":
									s.handleAPIPlayerPlayerUuidNamePostRequest([1]string{
										args[0],
									}, w, r)
								default:
									s.notAllowed(w, r, "GET,POST")
								}

								return
							}
						}
					}
				case 'r': // Prefix: "r"
					if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "emium/"
						if l := len("emium/"); len(elem) >= l && elem[0:l] == "emium/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'p': // Prefix: "prices/adjusted"
							if l := len("prices/adjusted"); len(elem) >= l && elem[0:l] == "prices/adjusted" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIPremiumPricesAdjustedPostRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						case 'u': // Prefix: "user/owns"
							if l := len("user/owns"); len(elem) >= l && elem[0:l] == "user/owns" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								// Leaf node.
								switch r.Method {
								case "POST":
									s.handleAPIPremiumUserOwnsPostRequest([0]string{}, w, r)
								default:
									s.notAllowed(w, r, "POST")
								}

								return
							}
						}
					case 'i': // Prefix: "ice/nbt"
						if l := len("ice/nbt"); len(elem) >= l && elem[0:l] == "ice/nbt" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "POST":
								s.handleAPIPriceNbtPostRequest([0]string{}, w, r)
							default:
								s.notAllowed(w, r, "POST")
							}

							return
						}
					}
				}
			case 'r': // Prefix: "referral/"
				if l := len("referral/"); len(elem) >= l && elem[0:l] == "referral/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "info"
					if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPIReferralInfoGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'r': // Prefix: "referred/by"
					if l := len("referred/by"); len(elem) >= l && elem[0:l] == "referred/by" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAPIReferralReferredByPostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 's': // Prefix: "se"
				if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "arch/"
					if l := len("arch/"); len(elem) >= l && elem[0:l] == "arch/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "player/"
						if l := len("player/"); len(elem) >= l && elem[0:l] == "player/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "playerName"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPISearchPlayerPlayerNameGetRequest([1]string{
									args[0],
								}, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}
					}
					// Param: "searchVal"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPISearchSearchValGetRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'r': // Prefix: "rvice/purchase"
					if l := len("rvice/purchase"); len(elem) >= l && elem[0:l] == "rvice/purchase" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAPIServicePurchasePostRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 't': // Prefix: "topup/"
				if l := len("topup/"); len(elem) >= l && elem[0:l] == "topup/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "options"
					if l := len("options"); len(elem) >= l && elem[0:l] == "options" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "GET":
							s.handleAPITopupOptionsGetRequest([0]string{}, w, r)
						default:
							s.notAllowed(w, r, "GET")
						}

						return
					}
				case 'p': // Prefix: "paypal/"
					if l := len("paypal/"); len(elem) >= l && elem[0:l] == "paypal/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "productSlug"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAPITopupPaypalProductSlugPostRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				case 's': // Prefix: "stripe/"
					if l := len("stripe/"); len(elem) >= l && elem[0:l] == "stripe/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "productSlug"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						// Leaf node.
						switch r.Method {
						case "POST":
							s.handleAPITopupStripeProductSlugPostRequest([1]string{
								args[0],
							}, w, r)
						default:
							s.notAllowed(w, r, "POST")
						}

						return
					}
				}
			case 'u': // Prefix: "user/privacy"
				if l := len("user/privacy"); len(elem) >= l && elem[0:l] == "user/privacy" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "GET":
						s.handleAPIUserPrivacyGetRequest([0]string{}, w, r)
					case "POST":
						s.handleAPIUserPrivacyPostRequest([0]string{}, w, r)
					default:
						s.notAllowed(w, r, "GET,POST")
					}

					return
				}
			}
		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	operationID string
	pathPattern string
	count       int
	args        [1]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/"
			if l := len("/api/"); len(elem) >= l && elem[0:l] == "/api/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'F': // Prefix: "Filter"
				if l := len("Filter"); len(elem) >= l && elem[0:l] == "Filter" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "POST":
						// Leaf: APIFilterPost
						r.name = "APIFilterPost"
						r.operationID = ""
						r.pathPattern = "/api/Filter"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			case 'a': // Prefix: "auction"
				if l := len("auction"); len(elem) >= l && elem[0:l] == "auction" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "auctionUuid"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "APIAuctionAuctionUuidGet"
							r.operationID = ""
							r.pathPattern = "/api/auction/{auctionUuid}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/uid"
						if l := len("/uid"); len(elem) >= l && elem[0:l] == "/uid" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIAuctionAuctionUuidUIDGet
								r.name = "APIAuctionAuctionUuidUIDGet"
								r.operationID = ""
								r.pathPattern = "/api/auction/{auctionUuid}/uid"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				case 's': // Prefix: "s/"
					if l := len("s/"); len(elem) >= l && elem[0:l] == "s/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'a': // Prefix: "active/uuid"
						if l := len("active/uuid"); len(elem) >= l && elem[0:l] == "active/uuid" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: APIAuctionsActiveUUIDPost
								r.name = "APIAuctionsActiveUUIDPost"
								r.operationID = ""
								r.pathPattern = "/api/auctions/active/uuid"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'b': // Prefix: "batch"
						if l := len("batch"); len(elem) >= l && elem[0:l] == "batch" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIAuctionsBatchGet
								r.name = "APIAuctionsBatchGet"
								r.operationID = ""
								r.pathPattern = "/api/auctions/batch"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 's': // Prefix: "supply/low"
						if l := len("supply/low"); len(elem) >= l && elem[0:l] == "supply/low" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIAuctionsSupplyLowGet
								r.name = "APIAuctionsSupplyLowGet"
								r.operationID = ""
								r.pathPattern = "/api/auctions/supply/low"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 't': // Prefix: "tag/"
						if l := len("tag/"); len(elem) >= l && elem[0:l] == "tag/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "itemTag"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'a': // Prefix: "active/"
								if l := len("active/"); len(elem) >= l && elem[0:l] == "active/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'b': // Prefix: "bin"
									if l := len("bin"); len(elem) >= l && elem[0:l] == "bin" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: APIAuctionsTagItemTagActiveBinGet
											r.name = "APIAuctionsTagItemTagActiveBinGet"
											r.operationID = ""
											r.pathPattern = "/api/auctions/tag/{itemTag}/active/bin"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'o': // Prefix: "overview"
									if l := len("overview"); len(elem) >= l && elem[0:l] == "overview" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: APIAuctionsTagItemTagActiveOverviewGet
											r.name = "APIAuctionsTagItemTagActiveOverviewGet"
											r.operationID = ""
											r.pathPattern = "/api/auctions/tag/{itemTag}/active/overview"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							case 'r': // Prefix: "recent/overview"
								if l := len("recent/overview"); len(elem) >= l && elem[0:l] == "recent/overview" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIAuctionsTagItemTagRecentOverviewGet
										r.name = "APIAuctionsTagItemTagRecentOverviewGet"
										r.operationID = ""
										r.pathPattern = "/api/auctions/tag/{itemTag}/recent/overview"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 's': // Prefix: "sold"
								if l := len("sold"); len(elem) >= l && elem[0:l] == "sold" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIAuctionsTagItemTagSoldGet
										r.name = "APIAuctionsTagItemTagSoldGet"
										r.operationID = ""
										r.pathPattern = "/api/auctions/tag/{itemTag}/sold"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					case 'u': // Prefix: "uid"
						if l := len("uid"); len(elem) >= l && elem[0:l] == "uid" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "uid"
							// Match until "/"
							idx := strings.IndexByte(elem, '/')
							if idx < 0 {
								idx = len(elem)
							}
							args[0] = elem[:idx]
							elem = elem[idx:]

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case '/': // Prefix: "/sold"
								if l := len("/sold"); len(elem) >= l && elem[0:l] == "/sold" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIAuctionsUIDUIDSoldGet
										r.name = "APIAuctionsUIDUIDSoldGet"
										r.operationID = ""
										r.pathPattern = "/api/auctions/uid/{uid}/sold"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						case 's': // Prefix: "s/sold"
							if l := len("s/sold"); len(elem) >= l && elem[0:l] == "s/sold" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIAuctionsUidsSoldPost
									r.name = "APIAuctionsUidsSoldPost"
									r.operationID = ""
									r.pathPattern = "/api/auctions/uids/sold"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'b': // Prefix: "bazaar/"
				if l := len("bazaar/"); len(elem) >= l && elem[0:l] == "bazaar/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "item/history/"
					if l := len("item/history/"); len(elem) >= l && elem[0:l] == "item/history/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "itemTag"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/status"
						if l := len("/status"); len(elem) >= l && elem[0:l] == "/status" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIBazaarItemHistoryItemTagStatusGet
								r.name = "APIBazaarItemHistoryItemTagStatusGet"
								r.operationID = ""
								r.pathPattern = "/api/bazaar/item/history/{itemTag}/status"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
				// Param: "itemTag"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'h': // Prefix: "history"
						if l := len("history"); len(elem) >= l && elem[0:l] == "history" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "APIBazaarItemTagHistoryGet"
								r.operationID = ""
								r.pathPattern = "/api/bazaar/{itemTag}/history"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'd': // Prefix: "day"
								if l := len("day"); len(elem) >= l && elem[0:l] == "day" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIBazaarItemTagHistoryDayGet
										r.name = "APIBazaarItemTagHistoryDayGet"
										r.operationID = ""
										r.pathPattern = "/api/bazaar/{itemTag}/history/day"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'h': // Prefix: "hour"
								if l := len("hour"); len(elem) >= l && elem[0:l] == "hour" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIBazaarItemTagHistoryHourGet
										r.name = "APIBazaarItemTagHistoryHourGet"
										r.operationID = ""
										r.pathPattern = "/api/bazaar/{itemTag}/history/hour"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'w': // Prefix: "week"
								if l := len("week"); len(elem) >= l && elem[0:l] == "week" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIBazaarItemTagHistoryWeekGet
										r.name = "APIBazaarItemTagHistoryWeekGet"
										r.operationID = ""
										r.pathPattern = "/api/bazaar/{itemTag}/history/week"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							}
						}
					case 's': // Prefix: "snapshot"
						if l := len("snapshot"); len(elem) >= l && elem[0:l] == "snapshot" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIBazaarItemTagSnapshotGet
								r.name = "APIBazaarItemTagSnapshotGet"
								r.operationID = ""
								r.pathPattern = "/api/bazaar/{itemTag}/snapshot"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'c': // Prefix: "craft/"
				if l := len("craft/"); len(elem) >= l && elem[0:l] == "craft/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "api/craft"
					if l := len("api/craft"); len(elem) >= l && elem[0:l] == "api/craft" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APICraftAPICraftGet
							r.name = "APICraftAPICraftGet"
							r.operationID = ""
							r.pathPattern = "/api/craft/api/craft"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'p': // Prefix: "profit"
					if l := len("profit"); len(elem) >= l && elem[0:l] == "profit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APICraftProfitGet
							r.name = "APICraftProfitGet"
							r.operationID = ""
							r.pathPattern = "/api/craft/profit"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'r': // Prefix: "recipe/"
					if l := len("recipe/"); len(elem) >= l && elem[0:l] == "recipe/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "itemTag"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APICraftRecipeItemTagGet
							r.name = "APICraftRecipeItemTagGet"
							r.operationID = ""
							r.pathPattern = "/api/craft/recipe/{itemTag}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'd': // Prefix: "data/p"
				if l := len("data/p"); len(elem) >= l && elem[0:l] == "data/p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "layerName"
					if l := len("layerName"); len(elem) >= l && elem[0:l] == "layerName" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							r.name = "APIDataPlayerNamePost"
							r.operationID = ""
							r.pathPattern = "/api/data/playerName"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: APIDataPlayerNamesPost
								r.name = "APIDataPlayerNamesPost"
								r.operationID = ""
								r.pathPattern = "/api/data/playerNames"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				case 'r': // Prefix: "roxy"
					if l := len("roxy"); len(elem) >= l && elem[0:l] == "roxy" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: APIDataProxyPost
							r.name = "APIDataProxyPost"
							r.operationID = ""
							r.pathPattern = "/api/data/proxy"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'f': // Prefix: "f"
				if l := len("f"); len(elem) >= l && elem[0:l] == "f" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "ilter/options"
					if l := len("ilter/options"); len(elem) >= l && elem[0:l] == "ilter/options" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APIFilterOptionsGet
							r.name = "APIFilterOptionsGet"
							r.operationID = ""
							r.pathPattern = "/api/filter/options"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'l': // Prefix: "lip/"
					if l := len("lip/"); len(elem) >= l && elem[0:l] == "lip/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 's': // Prefix: "s"
						if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'e': // Prefix: "ettings/options"
							if l := len("ettings/options"); len(elem) >= l && elem[0:l] == "ettings/options" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: APIFlipSettingsOptionsGet
									r.name = "APIFlipSettingsOptionsGet"
									r.operationID = ""
									r.pathPattern = "/api/flip/settings/options"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 't': // Prefix: "tats/"
							if l := len("tats/"); len(elem) >= l && elem[0:l] == "tats/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'f': // Prefix: "finder/"
								if l := len("finder/"); len(elem) >= l && elem[0:l] == "finder/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "finderName"
								// Leaf parameter
								args[0] = elem
								elem = ""

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIFlipStatsFinderFinderNameGet
										r.name = "APIFlipStatsFinderFinderNameGet"
										r.operationID = ""
										r.pathPattern = "/api/flip/stats/finder/{finderName}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'p': // Prefix: "player/"
								if l := len("player/"); len(elem) >= l && elem[0:l] == "player/" {
									elem = elem[l:]
								} else {
									break
								}

								// Param: "playerUuid"
								// Match until "/"
								idx := strings.IndexByte(elem, '/')
								if idx < 0 {
									idx = len(elem)
								}
								args[0] = elem[:idx]
								elem = elem[idx:]

								if len(elem) == 0 {
									switch method {
									case "GET":
										r.name = "APIFlipStatsPlayerPlayerUuidGet"
										r.operationID = ""
										r.pathPattern = "/api/flip/stats/player/{playerUuid}"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
								switch elem[0] {
								case '/': // Prefix: "/hour"
									if l := len("/hour"); len(elem) >= l && elem[0:l] == "/hour" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: APIFlipStatsPlayerPlayerUuidHourGet
											r.name = "APIFlipStatsPlayerPlayerUuidHourGet"
											r.operationID = ""
											r.pathPattern = "/api/flip/stats/player/{playerUuid}/hour"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					case 't': // Prefix: "track/"
						if l := len("track/"); len(elem) >= l && elem[0:l] == "track/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'f': // Prefix: "found/"
							if l := len("found/"); len(elem) >= l && elem[0:l] == "found/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "auctionId"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIFlipTrackFoundAuctionIdPost
									r.name = "APIFlipTrackFoundAuctionIdPost"
									r.operationID = ""
									r.pathPattern = "/api/flip/track/found/{auctionId}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'p': // Prefix: "purchase/"
							if l := len("purchase/"); len(elem) >= l && elem[0:l] == "purchase/" {
								elem = elem[l:]
							} else {
								break
							}

							// Param: "auctionId"
							// Leaf parameter
							args[0] = elem
							elem = ""

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIFlipTrackPurchaseAuctionIdPost
									r.name = "APIFlipTrackPurchaseAuctionIdPost"
									r.operationID = ""
									r.pathPattern = "/api/flip/track/purchase/{auctionId}"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					case 'u': // Prefix: "update/when"
						if l := len("update/when"); len(elem) >= l && elem[0:l] == "update/when" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIFlipUpdateWhenGet
								r.name = "APIFlipUpdateWhenGet"
								r.operationID = ""
								r.pathPattern = "/api/flip/update/when"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'i': // Prefix: "item"
				if l := len("item"); len(elem) >= l && elem[0:l] == "item" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/"
					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "price/"
						if l := len("price/"); len(elem) >= l && elem[0:l] == "price/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "itemTag"
						// Match until "/"
						idx := strings.IndexByte(elem, '/')
						if idx < 0 {
							idx = len(elem)
						}
						args[0] = elem[:idx]
						elem = elem[idx:]

						if len(elem) == 0 {
							switch method {
							case "GET":
								r.name = "APIItemPriceItemTagGet"
								r.operationID = ""
								r.pathPattern = "/api/item/price/{itemTag}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/"
							if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								break
							}
							switch elem[0] {
							case 'b': // Prefix: "bin"
								if l := len("bin"); len(elem) >= l && elem[0:l] == "bin" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIItemPriceItemTagBinGet
										r.name = "APIItemPriceItemTagBinGet"
										r.operationID = ""
										r.pathPattern = "/api/item/price/{itemTag}/bin"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'c': // Prefix: "current"
								if l := len("current"); len(elem) >= l && elem[0:l] == "current" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									switch method {
									case "GET":
										// Leaf: APIItemPriceItemTagCurrentGet
										r.name = "APIItemPriceItemTagCurrentGet"
										r.operationID = ""
										r.pathPattern = "/api/item/price/{itemTag}/current"
										r.args = args
										r.count = 1
										return r, true
									default:
										return
									}
								}
							case 'h': // Prefix: "history/"
								if l := len("history/"); len(elem) >= l && elem[0:l] == "history/" {
									elem = elem[l:]
								} else {
									break
								}

								if len(elem) == 0 {
									break
								}
								switch elem[0] {
								case 'd': // Prefix: "day"
									if l := len("day"); len(elem) >= l && elem[0:l] == "day" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: APIItemPriceItemTagHistoryDayGet
											r.name = "APIItemPriceItemTagHistoryDayGet"
											r.operationID = ""
											r.pathPattern = "/api/item/price/{itemTag}/history/day"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'f': // Prefix: "full"
									if l := len("full"); len(elem) >= l && elem[0:l] == "full" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: APIItemPriceItemTagHistoryFullGet
											r.name = "APIItemPriceItemTagHistoryFullGet"
											r.operationID = ""
											r.pathPattern = "/api/item/price/{itemTag}/history/full"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'm': // Prefix: "month"
									if l := len("month"); len(elem) >= l && elem[0:l] == "month" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: APIItemPriceItemTagHistoryMonthGet
											r.name = "APIItemPriceItemTagHistoryMonthGet"
											r.operationID = ""
											r.pathPattern = "/api/item/price/{itemTag}/history/month"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								case 'w': // Prefix: "week"
									if l := len("week"); len(elem) >= l && elem[0:l] == "week" {
										elem = elem[l:]
									} else {
										break
									}

									if len(elem) == 0 {
										switch method {
										case "GET":
											// Leaf: APIItemPriceItemTagHistoryWeekGet
											r.name = "APIItemPriceItemTagHistoryWeekGet"
											r.operationID = ""
											r.pathPattern = "/api/item/price/{itemTag}/history/week"
											r.args = args
											r.count = 1
											return r, true
										default:
											return
										}
									}
								}
							}
						}
					case 's': // Prefix: "search/"
						if l := len("search/"); len(elem) >= l && elem[0:l] == "search/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "searchVal"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIItemSearchSearchValGet
								r.name = "APIItemSearchSearchValGet"
								r.operationID = ""
								r.pathPattern = "/api/item/search/{searchVal}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
					// Param: "itemTag"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'd': // Prefix: "details"
							if l := len("details"); len(elem) >= l && elem[0:l] == "details" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: APIItemItemTagDetailsGet
									r.name = "APIItemItemTagDetailsGet"
									r.operationID = ""
									r.pathPattern = "/api/item/{itemTag}/details"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 's': // Prefix: "similar"
							if l := len("similar"); len(elem) >= l && elem[0:l] == "similar" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: APIItemItemTagSimilarGet
									r.name = "APIItemItemTagSimilarGet"
									r.operationID = ""
									r.pathPattern = "/api/item/{itemTag}/similar"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				case 's': // Prefix: "s"
					if l := len("s"); len(elem) >= l && elem[0:l] == "s" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "APIItemsGet"
							r.operationID = ""
							r.pathPattern = "/api/items"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'b': // Prefix: "bazaar/tags"
							if l := len("bazaar/tags"); len(elem) >= l && elem[0:l] == "bazaar/tags" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: APIItemsBazaarTagsGet
									r.name = "APIItemsBazaarTagsGet"
									r.operationID = ""
									r.pathPattern = "/api/items/bazaar/tags"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'n': // Prefix: "names"
							if l := len("names"); len(elem) >= l && elem[0:l] == "names" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIItemsNamesPost
									r.name = "APIItemsNamesPost"
									r.operationID = ""
									r.pathPattern = "/api/items/names"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					}
				}
			case 'k': // Prefix: "kat/"
				if l := len("kat/"); len(elem) >= l && elem[0:l] == "kat/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'd': // Prefix: "data"
					if l := len("data"); len(elem) >= l && elem[0:l] == "data" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APIKatDataGet
							r.name = "APIKatDataGet"
							r.operationID = ""
							r.pathPattern = "/api/kat/data"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'p': // Prefix: "profit"
					if l := len("profit"); len(elem) >= l && elem[0:l] == "profit" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APIKatProfitGet
							r.name = "APIKatProfitGet"
							r.operationID = ""
							r.pathPattern = "/api/kat/profit"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 'm': // Prefix: "m"
				if l := len("m"); len(elem) >= l && elem[0:l] == "m" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "ayor"
					if l := len("ayor"); len(elem) >= l && elem[0:l] == "ayor" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							r.name = "APIMayorGet"
							r.operationID = ""
							r.pathPattern = "/api/mayor"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "year"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIMayorYearGet
								r.name = "APIMayorYearGet"
								r.operationID = ""
								r.pathPattern = "/api/mayor/{year}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				case 'o': // Prefix: "od/"
					if l := len("od/"); len(elem) >= l && elem[0:l] == "od/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'c': // Prefix: "commands"
						if l := len("commands"); len(elem) >= l && elem[0:l] == "commands" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIModCommandsGet
								r.name = "APIModCommandsGet"
								r.operationID = ""
								r.pathPattern = "/api/mod/commands"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					case 'd': // Prefix: "description"
						if l := len("description"); len(elem) >= l && elem[0:l] == "description" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								r.name = "APIModDescriptionPost"
								r.operationID = ""
								r.pathPattern = "/api/mod/description"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
						switch elem[0] {
						case '/': // Prefix: "/modifications"
							if l := len("/modifications"); len(elem) >= l && elem[0:l] == "/modifications" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIModDescriptionModificationsPost
									r.name = "APIModDescriptionModificationsPost"
									r.operationID = ""
									r.pathPattern = "/api/mod/description/modifications"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'i': // Prefix: "item/"
						if l := len("item/"); len(elem) >= l && elem[0:l] == "item/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "uuid"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APIModItemUUIDGet
								r.name = "APIModItemUUIDGet"
								r.operationID = ""
								r.pathPattern = "/api/mod/item/{uuid}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'p': // Prefix: "p"
				if l := len("p"); len(elem) >= l && elem[0:l] == "p" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'l': // Prefix: "layer/"
					if l := len("layer/"); len(elem) >= l && elem[0:l] == "layer/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "playerUuid"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/"
						if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'a': // Prefix: "auctions"
							if l := len("auctions"); len(elem) >= l && elem[0:l] == "auctions" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: APIPlayerPlayerUuidAuctionsGet
									r.name = "APIPlayerPlayerUuidAuctionsGet"
									r.operationID = ""
									r.pathPattern = "/api/player/{playerUuid}/auctions"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'b': // Prefix: "bids"
							if l := len("bids"); len(elem) >= l && elem[0:l] == "bids" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: APIPlayerPlayerUuidBidsGet
									r.name = "APIPlayerPlayerUuidBidsGet"
									r.operationID = ""
									r.pathPattern = "/api/player/{playerUuid}/bids"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						case 'n': // Prefix: "name"
							if l := len("name"); len(elem) >= l && elem[0:l] == "name" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "GET":
									// Leaf: APIPlayerPlayerUuidNameGet
									r.name = "APIPlayerPlayerUuidNameGet"
									r.operationID = ""
									r.pathPattern = "/api/player/{playerUuid}/name"
									r.args = args
									r.count = 1
									return r, true
								case "POST":
									// Leaf: APIPlayerPlayerUuidNamePost
									r.name = "APIPlayerPlayerUuidNamePost"
									r.operationID = ""
									r.pathPattern = "/api/player/{playerUuid}/name"
									r.args = args
									r.count = 1
									return r, true
								default:
									return
								}
							}
						}
					}
				case 'r': // Prefix: "r"
					if l := len("r"); len(elem) >= l && elem[0:l] == "r" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'e': // Prefix: "emium/"
						if l := len("emium/"); len(elem) >= l && elem[0:l] == "emium/" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							break
						}
						switch elem[0] {
						case 'p': // Prefix: "prices/adjusted"
							if l := len("prices/adjusted"); len(elem) >= l && elem[0:l] == "prices/adjusted" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIPremiumPricesAdjustedPost
									r.name = "APIPremiumPricesAdjustedPost"
									r.operationID = ""
									r.pathPattern = "/api/premium/prices/adjusted"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						case 'u': // Prefix: "user/owns"
							if l := len("user/owns"); len(elem) >= l && elem[0:l] == "user/owns" {
								elem = elem[l:]
							} else {
								break
							}

							if len(elem) == 0 {
								switch method {
								case "POST":
									// Leaf: APIPremiumUserOwnsPost
									r.name = "APIPremiumUserOwnsPost"
									r.operationID = ""
									r.pathPattern = "/api/premium/user/owns"
									r.args = args
									r.count = 0
									return r, true
								default:
									return
								}
							}
						}
					case 'i': // Prefix: "ice/nbt"
						if l := len("ice/nbt"); len(elem) >= l && elem[0:l] == "ice/nbt" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							switch method {
							case "POST":
								// Leaf: APIPriceNbtPost
								r.name = "APIPriceNbtPost"
								r.operationID = ""
								r.pathPattern = "/api/price/nbt"
								r.args = args
								r.count = 0
								return r, true
							default:
								return
							}
						}
					}
				}
			case 'r': // Prefix: "referral/"
				if l := len("referral/"); len(elem) >= l && elem[0:l] == "referral/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'i': // Prefix: "info"
					if l := len("info"); len(elem) >= l && elem[0:l] == "info" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APIReferralInfoGet
							r.name = "APIReferralInfoGet"
							r.operationID = ""
							r.pathPattern = "/api/referral/info"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'r': // Prefix: "referred/by"
					if l := len("referred/by"); len(elem) >= l && elem[0:l] == "referred/by" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: APIReferralReferredByPost
							r.name = "APIReferralReferredByPost"
							r.operationID = ""
							r.pathPattern = "/api/referral/referred/by"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 's': // Prefix: "se"
				if l := len("se"); len(elem) >= l && elem[0:l] == "se" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'a': // Prefix: "arch/"
					if l := len("arch/"); len(elem) >= l && elem[0:l] == "arch/" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'p': // Prefix: "player/"
						if l := len("player/"); len(elem) >= l && elem[0:l] == "player/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "playerName"
						// Leaf parameter
						args[0] = elem
						elem = ""

						if len(elem) == 0 {
							switch method {
							case "GET":
								// Leaf: APISearchPlayerPlayerNameGet
								r.name = "APISearchPlayerPlayerNameGet"
								r.operationID = ""
								r.pathPattern = "/api/search/player/{playerName}"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}
					}
					// Param: "searchVal"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APISearchSearchValGet
							r.name = "APISearchSearchValGet"
							r.operationID = ""
							r.pathPattern = "/api/search/{searchVal}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				case 'r': // Prefix: "rvice/purchase"
					if l := len("rvice/purchase"); len(elem) >= l && elem[0:l] == "rvice/purchase" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: APIServicePurchasePost
							r.name = "APIServicePurchasePost"
							r.operationID = ""
							r.pathPattern = "/api/service/purchase"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				}
			case 't': // Prefix: "topup/"
				if l := len("topup/"); len(elem) >= l && elem[0:l] == "topup/" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case 'o': // Prefix: "options"
					if l := len("options"); len(elem) >= l && elem[0:l] == "options" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						switch method {
						case "GET":
							// Leaf: APITopupOptionsGet
							r.name = "APITopupOptionsGet"
							r.operationID = ""
							r.pathPattern = "/api/topup/options"
							r.args = args
							r.count = 0
							return r, true
						default:
							return
						}
					}
				case 'p': // Prefix: "paypal/"
					if l := len("paypal/"); len(elem) >= l && elem[0:l] == "paypal/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "productSlug"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: APITopupPaypalProductSlugPost
							r.name = "APITopupPaypalProductSlugPost"
							r.operationID = ""
							r.pathPattern = "/api/topup/paypal/{productSlug}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				case 's': // Prefix: "stripe/"
					if l := len("stripe/"); len(elem) >= l && elem[0:l] == "stripe/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "productSlug"
					// Leaf parameter
					args[0] = elem
					elem = ""

					if len(elem) == 0 {
						switch method {
						case "POST":
							// Leaf: APITopupStripeProductSlugPost
							r.name = "APITopupStripeProductSlugPost"
							r.operationID = ""
							r.pathPattern = "/api/topup/stripe/{productSlug}"
							r.args = args
							r.count = 1
							return r, true
						default:
							return
						}
					}
				}
			case 'u': // Prefix: "user/privacy"
				if l := len("user/privacy"); len(elem) >= l && elem[0:l] == "user/privacy" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						// Leaf: APIUserPrivacyGet
						r.name = "APIUserPrivacyGet"
						r.operationID = ""
						r.pathPattern = "/api/user/privacy"
						r.args = args
						r.count = 0
						return r, true
					case "POST":
						// Leaf: APIUserPrivacyPost
						r.name = "APIUserPrivacyPost"
						r.operationID = ""
						r.pathPattern = "/api/user/privacy"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
			}
		}
	}
	return r, false
}
