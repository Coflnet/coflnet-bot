// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
	"time"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APIAuctionAuctionUuidGet implements GET /api/auction/{auctionUuid} operation.
	//
	// Retrieve details of a specific auction.
	//
	// GET /api/auction/{auctionUuid}
	APIAuctionAuctionUuidGet(ctx context.Context, params APIAuctionAuctionUuidGetParams) (*ColorSaveAuction, error)
	// APIAuctionAuctionUuidUIDGet implements GET /api/auction/{auctionUuid}/uid operation.
	//
	// Retrieve the uid of an auction (mainly a helper to get the lookup id for another service).
	//
	// GET /api/auction/{auctionUuid}/uid
	APIAuctionAuctionUuidUIDGet(ctx context.Context, params APIAuctionAuctionUuidUIDGetParams) (APIAuctionAuctionUuidUIDGetRes, error)
	// APIAuctionsActiveUUIDPost implements POST /api/auctions/active/uuid operation.
	//
	// Checks an array of item uuids if they are active on the ah.
	//
	// POST /api/auctions/active/uuid
	APIAuctionsActiveUUIDPost(ctx context.Context, req []string) ([]string, error)
	// APIAuctionsBatchGet implements GET /api/auctions/batch operation.
	//
	// Batch raw item value export, requires token.
	//
	// GET /api/auctions/batch
	APIAuctionsBatchGet(ctx context.Context, params APIAuctionsBatchGetParams) error
	// APIAuctionsSupplyLowGet implements GET /api/auctions/supply/low operation.
	//
	// Get items that are in low supply.
	//
	// GET /api/auctions/supply/low
	APIAuctionsSupplyLowGet(ctx context.Context) ([]SupplyElement, error)
	// APIAuctionsTagItemTagActiveBinGet implements GET /api/auctions/tag/{itemTag}/active/bin operation.
	//
	// Get the 10 (or how many are available) lowest bins.
	//
	// GET /api/auctions/tag/{itemTag}/active/bin
	APIAuctionsTagItemTagActiveBinGet(ctx context.Context, params APIAuctionsTagItemTagActiveBinGetParams) ([]SaveAuction, error)
	// APIAuctionsTagItemTagActiveOverviewGet implements GET /api/auctions/tag/{itemTag}/active/overview operation.
	//
	// Gets a preview of active auctions useful in overviews, available orderBy options
	// HIGHEST_PRICE, LOWEST_PRICE (default), ENDING_SOON.
	//
	// GET /api/auctions/tag/{itemTag}/active/overview
	APIAuctionsTagItemTagActiveOverviewGet(ctx context.Context, params APIAuctionsTagItemTagActiveOverviewGetParams) ([]AuctionPreview, error)
	// APIAuctionsTagItemTagRecentOverviewGet implements GET /api/auctions/tag/{itemTag}/recent/overview operation.
	//
	// Gets a preview of recent auctions useful in overviews.
	//
	// GET /api/auctions/tag/{itemTag}/recent/overview
	APIAuctionsTagItemTagRecentOverviewGet(ctx context.Context, params APIAuctionsTagItemTagRecentOverviewGetParams) ([]AuctionPreview, error)
	// APIAuctionsTagItemTagSoldGet implements GET /api/auctions/tag/{itemTag}/sold operation.
	//
	// Get a batch of 1000 auctions that sold in the last week for any kind of processing.
	// Please credit us with providing data for whatever you are doing.
	// You can also manually request a review to get older data on the discord.
	//
	// GET /api/auctions/tag/{itemTag}/sold
	APIAuctionsTagItemTagSoldGet(ctx context.Context, params APIAuctionsTagItemTagSoldGetParams) ([]SaveAuction, error)
	// APIAuctionsUIDUIDSoldGet implements GET /api/auctions/uid/{uid}/sold operation.
	//
	// Gets all recorded past sells of an item with a specific uuid
	// meant for dupe detection.
	//
	// GET /api/auctions/uid/{uid}/sold
	APIAuctionsUIDUIDSoldGet(ctx context.Context, params APIAuctionsUIDUIDSoldGetParams) ([]ItemSell, error)
	// APIAuctionsUidsSoldPost implements POST /api/auctions/uids/sold operation.
	//
	// Gets all recorded past sells of a batch of items by uuid
	// meant for dupe detection of whole inventories.
	//
	// POST /api/auctions/uids/sold
	APIAuctionsUidsSoldPost(ctx context.Context, req *InventoryBatchLookup) error
	// APIBazaarItemHistoryItemTagStatusGet implements GET /api/bazaar/item/history/{itemTag}/status operation.
	//
	// Returns bazaar history.
	//
	// Deprecated: schema marks this operation as deprecated.
	//
	// GET /api/bazaar/item/history/{itemTag}/status
	APIBazaarItemHistoryItemTagStatusGet(ctx context.Context, params APIBazaarItemHistoryItemTagStatusGetParams) (APIBazaarItemHistoryItemTagStatusGetRes, error)
	// APIBazaarItemTagHistoryDayGet implements GET /api/bazaar/{itemTag}/history/day operation.
	//
	// Gets the history data for display in a graph for one day ( in intervalls of 5 minutes).
	//
	// GET /api/bazaar/{itemTag}/history/day
	APIBazaarItemTagHistoryDayGet(ctx context.Context, params APIBazaarItemTagHistoryDayGetParams) ([]GraphResult, error)
	// APIBazaarItemTagHistoryGet implements GET /api/bazaar/{itemTag}/history operation.
	//
	// Gets the history data for display in a graph.
	//
	// GET /api/bazaar/{itemTag}/history
	APIBazaarItemTagHistoryGet(ctx context.Context, params APIBazaarItemTagHistoryGetParams) ([]GraphResult, error)
	// APIBazaarItemTagHistoryHourGet implements GET /api/bazaar/{itemTag}/history/hour operation.
	//
	// Gets the history data for display in a graph for one hour ( in intervalls of 10 seconds).
	//
	// GET /api/bazaar/{itemTag}/history/hour
	APIBazaarItemTagHistoryHourGet(ctx context.Context, params APIBazaarItemTagHistoryHourGetParams) ([]GraphResult, error)
	// APIBazaarItemTagHistoryWeekGet implements GET /api/bazaar/{itemTag}/history/week operation.
	//
	// Gets the history data for display in a graph for one week ( in intervalls of 2 hours).
	//
	// GET /api/bazaar/{itemTag}/history/week
	APIBazaarItemTagHistoryWeekGet(ctx context.Context, params APIBazaarItemTagHistoryWeekGetParams) ([]GraphResult, error)
	// APIBazaarItemTagSnapshotGet implements GET /api/bazaar/{itemTag}/snapshot operation.
	//
	// Gets a snapshot of a specific item at a specific time.
	//
	// GET /api/bazaar/{itemTag}/snapshot
	APIBazaarItemTagSnapshotGet(ctx context.Context, params APIBazaarItemTagSnapshotGetParams) (*StorageQuickStatus, error)
	// APICraftAPICraftGet implements GET /api/craft/api/craft operation.
	//
	// Returns the crafting recipe for some item.
	//
	// GET /api/craft/api/craft
	APICraftAPICraftGet(ctx context.Context) error
	// APICraftProfitGet implements GET /api/craft/profit operation.
	//
	// Craft flips.
	//
	// GET /api/craft/profit
	APICraftProfitGet(ctx context.Context, params APICraftProfitGetParams) ([]ProfitableCraft, error)
	// APICraftRecipeItemTagGet implements GET /api/craft/recipe/{itemTag} operation.
	//
	// Returns the crafting recipe for some item.
	//
	// GET /api/craft/recipe/{itemTag}
	APICraftRecipeItemTagGet(ctx context.Context, params APICraftRecipeItemTagGetParams) error
	// APIDataPlayerNamePost implements POST /api/data/playerName operation.
	//
	// Accepts player name based auction hints.
	//
	// POST /api/data/playerName
	APIDataPlayerNamePost(ctx context.Context, params APIDataPlayerNamePostParams) (*Int32Int64ValueTuple, error)
	// APIDataPlayerNamesPost implements POST /api/data/playerNames operation.
	//
	// Accepts player name based auction hints.
	//
	// POST /api/data/playerNames
	APIDataPlayerNamesPost(ctx context.Context, req []string) ([]Int32Int64ValueTuple, error)
	// APIDataProxyPost implements POST /api/data/proxy operation.
	//
	// Endpoint to upload proxied data.
	//
	// POST /api/data/proxy
	APIDataProxyPost(ctx context.Context) (APIDataProxyPostRes, error)
	// APIFilterOptionsGet implements GET /api/filter/options operation.
	//
	// Returns all available filters with all available options.
	//
	// GET /api/filter/options
	APIFilterOptionsGet(ctx context.Context, params APIFilterOptionsGetParams) ([]FilterOptions, error)
	// APIFilterPost implements POST /api/Filter operation.
	//
	// POST /api/Filter
	APIFilterPost(ctx context.Context, req *FilterQuery) (bool, error)
	// APIFlipSettingsOptionsGet implements GET /api/flip/settings/options operation.
	//
	// Shows you the available settings options for the socket comand subFlip,
	// Doesn't currently actually do anything.
	//
	// GET /api/flip/settings/options
	APIFlipSettingsOptionsGet(ctx context.Context) (*FlipSettings, error)
	// APIFlipStatsFinderFinderNameGet implements GET /api/flip/stats/finder/{finderName} operation.
	//
	// Get flips stats for one type of flip finder.
	//
	// GET /api/flip/stats/finder/{finderName}
	APIFlipStatsFinderFinderNameGet(ctx context.Context, params APIFlipStatsFinderFinderNameGetParams) ([]FlipDetails, error)
	// APIFlipStatsPlayerPlayerUuidGet implements GET /api/flip/stats/player/{playerUuid} operation.
	//
	// Get flips stats for player.
	//
	// GET /api/flip/stats/player/{playerUuid}
	APIFlipStatsPlayerPlayerUuidGet(ctx context.Context, params APIFlipStatsPlayerPlayerUuidGetParams) (*FlipSumary, error)
	// APIFlipStatsPlayerPlayerUuidHourGet implements GET /api/flip/stats/player/{playerUuid}/hour operation.
	//
	// Get flips stats for player for the last hour (faster).
	//
	// GET /api/flip/stats/player/{playerUuid}/hour
	APIFlipStatsPlayerPlayerUuidHourGet(ctx context.Context, params APIFlipStatsPlayerPlayerUuidHourGetParams) (*FlipSumary, error)
	// APIFlipTrackFoundAuctionIdPost implements POST /api/flip/track/found/{auctionId} operation.
	//
	// Callback for external flip finders to be included in tracking.
	//
	// POST /api/flip/track/found/{auctionId}
	APIFlipTrackFoundAuctionIdPost(ctx context.Context, params APIFlipTrackFoundAuctionIdPostParams) error
	// APIFlipTrackPurchaseAuctionIdPost implements POST /api/flip/track/purchase/{auctionId} operation.
	//
	// Callback for external flip finders to be included in tracking.
	//
	// POST /api/flip/track/purchase/{auctionId}
	APIFlipTrackPurchaseAuctionIdPost(ctx context.Context, params APIFlipTrackPurchaseAuctionIdPostParams) error
	// APIFlipUpdateWhenGet implements GET /api/flip/update/when operation.
	//
	// The last time an update was loaded (cached for 30min)
	// You should only look at the second part.
	//
	// GET /api/flip/update/when
	APIFlipUpdateWhenGet(ctx context.Context) (time.Time, error)
	// APIItemItemTagDetailsGet implements GET /api/item/{itemTag}/details operation.
	//
	// Returns details about a specific item
	// This gets updated once every hour.
	//
	// GET /api/item/{itemTag}/details
	APIItemItemTagDetailsGet(ctx context.Context, params APIItemItemTagDetailsGetParams) (*SkyblockItem, error)
	// APIItemItemTagSimilarGet implements GET /api/item/{itemTag}/similar operation.
	//
	// Other items related to some tag.
	//
	// GET /api/item/{itemTag}/similar
	APIItemItemTagSimilarGet(ctx context.Context, params APIItemItemTagSimilarGetParams) ([]ItemPreview, error)
	// APIItemPriceItemTagBinGet implements GET /api/item/price/{itemTag}/bin operation.
	//
	// Gets the lowest bin by item type.
	//
	// GET /api/item/price/{itemTag}/bin
	APIItemPriceItemTagBinGet(ctx context.Context, params APIItemPriceItemTagBinGetParams) (*BinResponse, error)
	// APIItemPriceItemTagCurrentGet implements GET /api/item/price/{itemTag}/current operation.
	//
	// Gets the current (latest known) price for an item and available quantity, supports items from
	// bazaar and ah.
	//
	// GET /api/item/price/{itemTag}/current
	APIItemPriceItemTagCurrentGet(ctx context.Context, params APIItemPriceItemTagCurrentGetParams) (*CurrentPrice, error)
	// APIItemPriceItemTagGet implements GET /api/item/price/{itemTag} operation.
	//
	// Aggregated sumary of item prices for the 3 last days.
	//
	// GET /api/item/price/{itemTag}
	APIItemPriceItemTagGet(ctx context.Context, params APIItemPriceItemTagGetParams) (*PriceSumary, error)
	// APIItemPriceItemTagHistoryDayGet implements GET /api/item/price/{itemTag}/history/day operation.
	//
	// Gets the price history for an item for the last 24 hours.
	//
	// GET /api/item/price/{itemTag}/history/day
	APIItemPriceItemTagHistoryDayGet(ctx context.Context, params APIItemPriceItemTagHistoryDayGetParams) ([]AveragePrice, error)
	// APIItemPriceItemTagHistoryFullGet implements GET /api/item/price/{itemTag}/history/full operation.
	//
	// Gets the price history for an item for all time.
	//
	// GET /api/item/price/{itemTag}/history/full
	APIItemPriceItemTagHistoryFullGet(ctx context.Context, params APIItemPriceItemTagHistoryFullGetParams) ([]AveragePrice, error)
	// APIItemPriceItemTagHistoryMonthGet implements GET /api/item/price/{itemTag}/history/month operation.
	//
	// Gets the price history for an item for one month.
	//
	// GET /api/item/price/{itemTag}/history/month
	APIItemPriceItemTagHistoryMonthGet(ctx context.Context, params APIItemPriceItemTagHistoryMonthGetParams) ([]AveragePrice, error)
	// APIItemPriceItemTagHistoryWeekGet implements GET /api/item/price/{itemTag}/history/week operation.
	//
	// Gets the price history for an item for the last 7 days.
	//
	// GET /api/item/price/{itemTag}/history/week
	APIItemPriceItemTagHistoryWeekGet(ctx context.Context, params APIItemPriceItemTagHistoryWeekGetParams) ([]AveragePrice, error)
	// APIItemSearchSearchValGet implements GET /api/item/search/{searchVal} operation.
	//
	// Searches through all items, includes the rarity of items.
	//
	// GET /api/item/search/{searchVal}
	APIItemSearchSearchValGet(ctx context.Context, params APIItemSearchSearchValGetParams) ([]SearchResultItem, error)
	// APIItemsBazaarTagsGet implements GET /api/items/bazaar/tags operation.
	//
	// A list of item tags (hypixel ids) that are tradeable on bazaar
	// This gets updated once every hour.
	//
	// GET /api/items/bazaar/tags
	APIItemsBazaarTagsGet(ctx context.Context) ([]string, error)
	// APIItemsGet implements GET /api/items operation.
	//
	// Get all item tags, names and wherever they are on ah or bazaar.
	//
	// GET /api/items
	APIItemsGet(ctx context.Context) ([]ItemMetadataElement, error)
	// APIItemsNamesPost implements POST /api/items/names operation.
	//
	// Batch lookup names for item tags.
	//
	// POST /api/items/names
	APIItemsNamesPost(ctx context.Context, req []string) error
	// APIKatDataGet implements GET /api/kat/data operation.
	//
	// Raw data of upgrade cost.
	//
	// GET /api/kat/data
	APIKatDataGet(ctx context.Context) ([]KatUpgradeCost, error)
	// APIKatProfitGet implements GET /api/kat/profit operation.
	//
	// Kat flips.
	//
	// GET /api/kat/profit
	APIKatProfitGet(ctx context.Context) ([]KatFlip, error)
	// APIMayorGet implements GET /api/mayor operation.
	//
	// Gets election data between two Timestamps.
	//
	// GET /api/mayor
	APIMayorGet(ctx context.Context, params APIMayorGetParams) ([]ModelElectionPeriod, error)
	// APIMayorYearGet implements GET /api/mayor/{year} operation.
	//
	// Return Election results for a specific year.
	//
	// GET /api/mayor/{year}
	APIMayorYearGet(ctx context.Context, params APIMayorYearGetParams) (*ModelElectionPeriod, error)
	// APIModCommandsGet implements GET /api/mod/commands operation.
	//
	// Returns a list of available server-side commands.
	//
	// GET /api/mod/commands
	APIModCommandsGet(ctx context.Context) ([]CommandListEntry, error)
	// APIModDescriptionModificationsPost implements POST /api/mod/description/modifications operation.
	//
	// Returns a collection of modifications for each item passed.
	//
	// POST /api/mod/description/modifications
	APIModDescriptionModificationsPost(ctx context.Context, req *InventoryData, params APIModDescriptionModificationsPostParams) (APIModDescriptionModificationsPostRes, error)
	// APIModDescriptionPost implements POST /api/mod/description operation.
	//
	// Returns new descriptions for an array of items.
	//
	// POST /api/mod/description
	APIModDescriptionPost(ctx context.Context, req *InventoryData, params APIModDescriptionPostParams) (APIModDescriptionPostRes, error)
	// APIModItemUUIDGet implements GET /api/mod/item/{uuid} operation.
	//
	// Returns extra information for an item.
	//
	// GET /api/mod/item/{uuid}
	APIModItemUUIDGet(ctx context.Context, params APIModItemUUIDGetParams) (APIModItemUUIDGetRes, error)
	// APIPlayerPlayerUuidAuctionsGet implements GET /api/player/{playerUuid}/auctions operation.
	//
	// The last 10 auctions a player created.
	//
	// GET /api/player/{playerUuid}/auctions
	APIPlayerPlayerUuidAuctionsGet(ctx context.Context, params APIPlayerPlayerUuidAuctionsGetParams) ([]AuctionResult, error)
	// APIPlayerPlayerUuidBidsGet implements GET /api/player/{playerUuid}/bids operation.
	//
	// The last 10 bids (with auction) a player did.
	//
	// GET /api/player/{playerUuid}/bids
	APIPlayerPlayerUuidBidsGet(ctx context.Context, params APIPlayerPlayerUuidBidsGetParams) ([]BidResult, error)
	// APIPlayerPlayerUuidNameGet implements GET /api/player/{playerUuid}/name operation.
	//
	// The name for a given uuid.
	//
	// GET /api/player/{playerUuid}/name
	APIPlayerPlayerUuidNameGet(ctx context.Context, params APIPlayerPlayerUuidNameGetParams) (APIPlayerPlayerUuidNameGetRes, error)
	// APIPlayerPlayerUuidNamePost implements POST /api/player/{playerUuid}/name operation.
	//
	// The name for a given uuid.
	//
	// POST /api/player/{playerUuid}/name
	APIPlayerPlayerUuidNamePost(ctx context.Context, params APIPlayerPlayerUuidNamePostParams) (APIPlayerPlayerUuidNamePostRes, error)
	// APIPremiumPricesAdjustedPost implements POST /api/premium/prices/adjusted operation.
	//
	// Get adjusted prices.
	//
	// POST /api/premium/prices/adjusted
	APIPremiumPricesAdjustedPost(ctx context.Context, req []string) error
	// APIPremiumUserOwnsPost implements POST /api/premium/user/owns operation.
	//
	// Get adjusted prices.
	//
	// POST /api/premium/user/owns
	APIPremiumUserOwnsPost(ctx context.Context, req []string) error
	// APIPriceNbtPost implements POST /api/price/nbt operation.
	//
	// Returns price estimations for nbt data (for in game mods)
	// NOTE: THIS WILL BE A PAID FEATURE IN THE FUTURE.
	//
	// POST /api/price/nbt
	APIPriceNbtPost(ctx context.Context, req *InventoryData) ([]PriceEstimate, error)
	// APIReferralInfoGet implements GET /api/referral/info operation.
	//
	// Returns ReferralCode and statistics for the user.
	//
	// GET /api/referral/info
	APIReferralInfoGet(ctx context.Context) (*ReferralInfo, error)
	// APIReferralReferredByPost implements POST /api/referral/referred/by operation.
	//
	// Tells the backend that the user was referred by someone.
	//
	// POST /api/referral/referred/by
	APIReferralReferredByPost(ctx context.Context, req *ReferredBy) error
	// APISearchPlayerPlayerNameGet implements GET /api/search/player/{playerName} operation.
	//
	// Search player.
	//
	// GET /api/search/player/{playerName}
	APISearchPlayerPlayerNameGet(ctx context.Context, params APISearchPlayerPlayerNameGetParams) ([]PlayerResult, error)
	// APISearchSearchValGet implements GET /api/search/{searchVal} operation.
	//
	// Full search, includes item types, items (by uuid), players, auctions and enchantments.
	//
	// GET /api/search/{searchVal}
	APISearchSearchValGet(ctx context.Context, params APISearchSearchValGetParams) ([]SearchResultItem, error)
	// APIServicePurchasePost implements POST /api/service/purchase operation.
	//
	// Purchase a service.
	//
	// POST /api/service/purchase
	APIServicePurchasePost(ctx context.Context, req *PurchaseArgs) error
	// APITopupOptionsGet implements GET /api/topup/options operation.
	//
	// Products to top up.
	//
	// GET /api/topup/options
	APITopupOptionsGet(ctx context.Context) ([]TopUpProduct, error)
	// APITopupPaypalProductSlugPost implements POST /api/topup/paypal/{productSlug} operation.
	//
	// Start a new topup session with paypal.
	//
	// POST /api/topup/paypal/{productSlug}
	APITopupPaypalProductSlugPost(ctx context.Context, req *TopUpArguments, params APITopupPaypalProductSlugPostParams) error
	// APITopupStripeProductSlugPost implements POST /api/topup/stripe/{productSlug} operation.
	//
	// Start a new topup session with stripe.
	//
	// POST /api/topup/stripe/{productSlug}
	APITopupStripeProductSlugPost(ctx context.Context, req *TopUpArguments, params APITopupStripeProductSlugPostParams) error
	// APIUserPrivacyGet implements GET /api/user/privacy operation.
	//
	// Get the users privacy settings (requires google token).
	//
	// GET /api/user/privacy
	APIUserPrivacyGet(ctx context.Context) (*PrivacySettings, error)
	// APIUserPrivacyPost implements POST /api/user/privacy operation.
	//
	// Update users privacy settings (requires google token).
	//
	// POST /api/user/privacy
	APIUserPrivacyPost(ctx context.Context, req *PrivacySettings) error
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
