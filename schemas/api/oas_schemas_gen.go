// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"time"

	"github.com/go-faster/errors"
)

type APIAuctionAuctionUuidUIDGetOKApplicationJSON string

func (*APIAuctionAuctionUuidUIDGetOKApplicationJSON) aPIAuctionAuctionUuidUIDGetRes() {}

type APIAuctionAuctionUuidUIDGetOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIAuctionAuctionUuidUIDGetOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIAuctionAuctionUuidUIDGetOKTextJSON) aPIAuctionAuctionUuidUIDGetRes() {}

type APIAuctionAuctionUuidUIDGetOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIAuctionAuctionUuidUIDGetOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIAuctionAuctionUuidUIDGetOKTextPlain) aPIAuctionAuctionUuidUIDGetRes() {}

// APIAuctionsBatchGetOK is response for APIAuctionsBatchGet operation.
type APIAuctionsBatchGetOK struct{}

type APIAuctionsTagItemTagActiveBinGetQuery struct{}

type APIAuctionsTagItemTagActiveOverviewGetQuery struct{}

type APIAuctionsTagItemTagRecentOverviewGetQuery struct{}

type APIAuctionsUidsSoldPostOKApplicationJSON struct{}

type APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON string

func (*APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON) aPIBazaarItemHistoryItemTagStatusGetRes() {
}

type APIBazaarItemHistoryItemTagStatusGetOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIBazaarItemHistoryItemTagStatusGetOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIBazaarItemHistoryItemTagStatusGetOKTextJSON) aPIBazaarItemHistoryItemTagStatusGetRes() {}

type APIBazaarItemHistoryItemTagStatusGetOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIBazaarItemHistoryItemTagStatusGetOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIBazaarItemHistoryItemTagStatusGetOKTextPlain) aPIBazaarItemHistoryItemTagStatusGetRes() {}

type APICraftAPICraftGetOKApplicationJSON struct{}

type APICraftRecipeItemTagGetOKApplicationJSON struct{}

type APIDataProxyPostOKApplicationJSON string

func (*APIDataProxyPostOKApplicationJSON) aPIDataProxyPostRes() {}

type APIDataProxyPostOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIDataProxyPostOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIDataProxyPostOKTextJSON) aPIDataProxyPostRes() {}

type APIDataProxyPostOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIDataProxyPostOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIDataProxyPostOKTextPlain) aPIDataProxyPostRes() {}

// APIFlipTrackFoundAuctionIdPostOK is response for APIFlipTrackFoundAuctionIdPost operation.
type APIFlipTrackFoundAuctionIdPostOK struct{}

// APIFlipTrackPurchaseAuctionIdPostOK is response for APIFlipTrackPurchaseAuctionIdPost operation.
type APIFlipTrackPurchaseAuctionIdPostOK struct{}

type APIItemPriceItemTagBinGetQuery struct{}

type APIItemPriceItemTagGetQuery struct{}

type APIItemPriceItemTagHistoryDayGetQuery struct{}

type APIItemPriceItemTagHistoryMonthGetQuery struct{}

type APIItemPriceItemTagHistoryWeekGetQuery struct{}

type APIItemsNamesPostOKApplicationJSON struct{}

type APIModDescriptionModificationsPostApplicationJSONBadRequest ErrorResponse

func (*APIModDescriptionModificationsPostApplicationJSONBadRequest) aPIModDescriptionModificationsPostRes() {
}

type APIModDescriptionModificationsPostApplicationJSONInternalServerError ErrorResponse

func (*APIModDescriptionModificationsPostApplicationJSONInternalServerError) aPIModDescriptionModificationsPostRes() {
}

type APIModDescriptionModificationsPostOKApplicationJSON [][]DescModification

func (*APIModDescriptionModificationsPostOKApplicationJSON) aPIModDescriptionModificationsPostRes() {}

type APIModDescriptionPostApplicationJSONBadRequest ErrorResponse

func (*APIModDescriptionPostApplicationJSONBadRequest) aPIModDescriptionPostRes() {}

type APIModDescriptionPostApplicationJSONInternalServerError ErrorResponse

func (*APIModDescriptionPostApplicationJSONInternalServerError) aPIModDescriptionPostRes() {}

type APIModDescriptionPostOKApplicationJSON [][]string

func (*APIModDescriptionPostOKApplicationJSON) aPIModDescriptionPostRes() {}

type APIModItemUUIDGetOKApplicationJSON string

func (*APIModItemUUIDGetOKApplicationJSON) aPIModItemUUIDGetRes() {}

type APIModItemUUIDGetOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIModItemUUIDGetOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIModItemUUIDGetOKTextJSON) aPIModItemUUIDGetRes() {}

type APIModItemUUIDGetOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIModItemUUIDGetOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIModItemUUIDGetOKTextPlain) aPIModItemUUIDGetRes() {}

type APIPlayerPlayerUuidAuctionsGetFilters struct{}

type APIPlayerPlayerUuidBidsGetFilters struct{}

type APIPlayerPlayerUuidNameGetOKApplicationJSON string

func (*APIPlayerPlayerUuidNameGetOKApplicationJSON) aPIPlayerPlayerUuidNameGetRes() {}

type APIPlayerPlayerUuidNameGetOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIPlayerPlayerUuidNameGetOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIPlayerPlayerUuidNameGetOKTextJSON) aPIPlayerPlayerUuidNameGetRes() {}

type APIPlayerPlayerUuidNameGetOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIPlayerPlayerUuidNameGetOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIPlayerPlayerUuidNameGetOKTextPlain) aPIPlayerPlayerUuidNameGetRes() {}

type APIPlayerPlayerUuidNamePostOKApplicationJSON string

func (*APIPlayerPlayerUuidNamePostOKApplicationJSON) aPIPlayerPlayerUuidNamePostRes() {}

type APIPlayerPlayerUuidNamePostOKTextJSON struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIPlayerPlayerUuidNamePostOKTextJSON) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIPlayerPlayerUuidNamePostOKTextJSON) aPIPlayerPlayerUuidNamePostRes() {}

type APIPlayerPlayerUuidNamePostOKTextPlain struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s APIPlayerPlayerUuidNamePostOKTextPlain) Read(p []byte) (n int, err error) {
	return s.Data.Read(p)
}

func (*APIPlayerPlayerUuidNamePostOKTextPlain) aPIPlayerPlayerUuidNamePostRes() {}

// APIPremiumPricesAdjustedPostOK is response for APIPremiumPricesAdjustedPost operation.
type APIPremiumPricesAdjustedPostOK struct{}

type APIPremiumUserOwnsPostOKApplicationJSON struct{}

// APIReferralReferredByPostOK is response for APIReferralReferredByPost operation.
type APIReferralReferredByPostOK struct{}

// APIServicePurchasePostOK is response for APIServicePurchasePost operation.
type APIServicePurchasePostOK struct{}

// APITopupPaypalProductSlugPostOK is response for APITopupPaypalProductSlugPost operation.
type APITopupPaypalProductSlugPostOK struct{}

// APITopupStripeProductSlugPostOK is response for APITopupStripeProductSlugPost operation.
type APITopupStripeProductSlugPostOK struct{}

// APIUserPrivacyPostOK is response for APIUserPrivacyPost operation.
type APIUserPrivacyPostOK struct{}

// Ref: #/components/schemas/AuctionPreview
type AuctionPreview struct {
	Seller     OptNilString `json:"seller"`
	Price      OptInt64     `json:"price"`
	End        OptDateTime  `json:"end"`
	UUID       OptNilString `json:"uuid"`
	PlayerName OptNilString `json:"playerName"`
}

// GetSeller returns the value of Seller.
func (s *AuctionPreview) GetSeller() OptNilString {
	return s.Seller
}

// GetPrice returns the value of Price.
func (s *AuctionPreview) GetPrice() OptInt64 {
	return s.Price
}

// GetEnd returns the value of End.
func (s *AuctionPreview) GetEnd() OptDateTime {
	return s.End
}

// GetUUID returns the value of UUID.
func (s *AuctionPreview) GetUUID() OptNilString {
	return s.UUID
}

// GetPlayerName returns the value of PlayerName.
func (s *AuctionPreview) GetPlayerName() OptNilString {
	return s.PlayerName
}

// SetSeller sets the value of Seller.
func (s *AuctionPreview) SetSeller(val OptNilString) {
	s.Seller = val
}

// SetPrice sets the value of Price.
func (s *AuctionPreview) SetPrice(val OptInt64) {
	s.Price = val
}

// SetEnd sets the value of End.
func (s *AuctionPreview) SetEnd(val OptDateTime) {
	s.End = val
}

// SetUUID sets the value of UUID.
func (s *AuctionPreview) SetUUID(val OptNilString) {
	s.UUID = val
}

// SetPlayerName sets the value of PlayerName.
func (s *AuctionPreview) SetPlayerName(val OptNilString) {
	s.PlayerName = val
}

// Ref: #/components/schemas/AuctionResult
type AuctionResult struct {
	AuctionId   OptNilString `json:"auctionId"`
	HighestBid  OptInt64     `json:"highestBid"`
	ItemName    OptNilString `json:"itemName"`
	Tag         OptNilString `json:"tag"`
	End         OptDateTime  `json:"end"`
	StartingBid OptInt64     `json:"startingBid"`
	Bin         OptBool      `json:"bin"`
}

// GetAuctionId returns the value of AuctionId.
func (s *AuctionResult) GetAuctionId() OptNilString {
	return s.AuctionId
}

// GetHighestBid returns the value of HighestBid.
func (s *AuctionResult) GetHighestBid() OptInt64 {
	return s.HighestBid
}

// GetItemName returns the value of ItemName.
func (s *AuctionResult) GetItemName() OptNilString {
	return s.ItemName
}

// GetTag returns the value of Tag.
func (s *AuctionResult) GetTag() OptNilString {
	return s.Tag
}

// GetEnd returns the value of End.
func (s *AuctionResult) GetEnd() OptDateTime {
	return s.End
}

// GetStartingBid returns the value of StartingBid.
func (s *AuctionResult) GetStartingBid() OptInt64 {
	return s.StartingBid
}

// GetBin returns the value of Bin.
func (s *AuctionResult) GetBin() OptBool {
	return s.Bin
}

// SetAuctionId sets the value of AuctionId.
func (s *AuctionResult) SetAuctionId(val OptNilString) {
	s.AuctionId = val
}

// SetHighestBid sets the value of HighestBid.
func (s *AuctionResult) SetHighestBid(val OptInt64) {
	s.HighestBid = val
}

// SetItemName sets the value of ItemName.
func (s *AuctionResult) SetItemName(val OptNilString) {
	s.ItemName = val
}

// SetTag sets the value of Tag.
func (s *AuctionResult) SetTag(val OptNilString) {
	s.Tag = val
}

// SetEnd sets the value of End.
func (s *AuctionResult) SetEnd(val OptDateTime) {
	s.End = val
}

// SetStartingBid sets the value of StartingBid.
func (s *AuctionResult) SetStartingBid(val OptInt64) {
	s.StartingBid = val
}

// SetBin sets the value of Bin.
func (s *AuctionResult) SetBin(val OptBool) {
	s.Bin = val
}

// Ref: #/components/schemas/AveragePrice
type AveragePrice struct {
	Min    OptFloat32  `json:"min"`
	Max    OptFloat32  `json:"max"`
	Avg    OptFloat64  `json:"avg"`
	Volume OptInt32    `json:"volume"`
	Time   OptDateTime `json:"time"`
}

// GetMin returns the value of Min.
func (s *AveragePrice) GetMin() OptFloat32 {
	return s.Min
}

// GetMax returns the value of Max.
func (s *AveragePrice) GetMax() OptFloat32 {
	return s.Max
}

// GetAvg returns the value of Avg.
func (s *AveragePrice) GetAvg() OptFloat64 {
	return s.Avg
}

// GetVolume returns the value of Volume.
func (s *AveragePrice) GetVolume() OptInt32 {
	return s.Volume
}

// GetTime returns the value of Time.
func (s *AveragePrice) GetTime() OptDateTime {
	return s.Time
}

// SetMin sets the value of Min.
func (s *AveragePrice) SetMin(val OptFloat32) {
	s.Min = val
}

// SetMax sets the value of Max.
func (s *AveragePrice) SetMax(val OptFloat32) {
	s.Max = val
}

// SetAvg sets the value of Avg.
func (s *AveragePrice) SetAvg(val OptFloat64) {
	s.Avg = val
}

// SetVolume sets the value of Volume.
func (s *AveragePrice) SetVolume(val OptInt32) {
	s.Volume = val
}

// SetTime sets the value of Time.
func (s *AveragePrice) SetTime(val OptDateTime) {
	s.Time = val
}

// Paginated bid result for player overview.
// Ref: #/components/schemas/BidResult
type BidResult struct {
	// The highest bid the requesting player has made.
	HighestOwnBid OptInt64     `json:"highestOwnBid"`
	AuctionId     OptNilString `json:"auctionId"`
	HighestBid    OptInt64     `json:"highestBid"`
	ItemName      OptNilString `json:"itemName"`
	Tag           OptNilString `json:"tag"`
	End           OptDateTime  `json:"end"`
	StartingBid   OptInt64     `json:"startingBid"`
	Bin           OptBool      `json:"bin"`
}

// GetHighestOwnBid returns the value of HighestOwnBid.
func (s *BidResult) GetHighestOwnBid() OptInt64 {
	return s.HighestOwnBid
}

// GetAuctionId returns the value of AuctionId.
func (s *BidResult) GetAuctionId() OptNilString {
	return s.AuctionId
}

// GetHighestBid returns the value of HighestBid.
func (s *BidResult) GetHighestBid() OptInt64 {
	return s.HighestBid
}

// GetItemName returns the value of ItemName.
func (s *BidResult) GetItemName() OptNilString {
	return s.ItemName
}

// GetTag returns the value of Tag.
func (s *BidResult) GetTag() OptNilString {
	return s.Tag
}

// GetEnd returns the value of End.
func (s *BidResult) GetEnd() OptDateTime {
	return s.End
}

// GetStartingBid returns the value of StartingBid.
func (s *BidResult) GetStartingBid() OptInt64 {
	return s.StartingBid
}

// GetBin returns the value of Bin.
func (s *BidResult) GetBin() OptBool {
	return s.Bin
}

// SetHighestOwnBid sets the value of HighestOwnBid.
func (s *BidResult) SetHighestOwnBid(val OptInt64) {
	s.HighestOwnBid = val
}

// SetAuctionId sets the value of AuctionId.
func (s *BidResult) SetAuctionId(val OptNilString) {
	s.AuctionId = val
}

// SetHighestBid sets the value of HighestBid.
func (s *BidResult) SetHighestBid(val OptInt64) {
	s.HighestBid = val
}

// SetItemName sets the value of ItemName.
func (s *BidResult) SetItemName(val OptNilString) {
	s.ItemName = val
}

// SetTag sets the value of Tag.
func (s *BidResult) SetTag(val OptNilString) {
	s.Tag = val
}

// SetEnd sets the value of End.
func (s *BidResult) SetEnd(val OptDateTime) {
	s.End = val
}

// SetStartingBid sets the value of StartingBid.
func (s *BidResult) SetStartingBid(val OptInt64) {
	s.StartingBid = val
}

// SetBin sets the value of Bin.
func (s *BidResult) SetBin(val OptBool) {
	s.Bin = val
}

// Lowest bin response.
// Ref: #/components/schemas/BinResponse
type BinResponse struct {
	// The lowest bin price.
	Lowest OptInt64 `json:"lowest"`
	// The lowest bin auction uuid.
	UUID OptNilString `json:"uuid"`
	// The price of the second lowest bin.
	SecondLowest OptInt64 `json:"secondLowest"`
}

// GetLowest returns the value of Lowest.
func (s *BinResponse) GetLowest() OptInt64 {
	return s.Lowest
}

// GetUUID returns the value of UUID.
func (s *BinResponse) GetUUID() OptNilString {
	return s.UUID
}

// GetSecondLowest returns the value of SecondLowest.
func (s *BinResponse) GetSecondLowest() OptInt64 {
	return s.SecondLowest
}

// SetLowest sets the value of Lowest.
func (s *BinResponse) SetLowest(val OptInt64) {
	s.Lowest = val
}

// SetUUID sets the value of UUID.
func (s *BinResponse) SetUUID(val OptNilString) {
	s.UUID = val
}

// SetSecondLowest sets the value of SecondLowest.
func (s *BinResponse) SetSecondLowest(val OptInt64) {
	s.SecondLowest = val
}

// Ref: #/components/schemas/BuyOrder
type BuyOrder struct {
	Amount       OptInt32   `json:"amount"`
	PricePerUnit OptFloat64 `json:"pricePerUnit"`
	Orders       OptInt32   `json:"orders"`
}

// GetAmount returns the value of Amount.
func (s *BuyOrder) GetAmount() OptInt32 {
	return s.Amount
}

// GetPricePerUnit returns the value of PricePerUnit.
func (s *BuyOrder) GetPricePerUnit() OptFloat64 {
	return s.PricePerUnit
}

// GetOrders returns the value of Orders.
func (s *BuyOrder) GetOrders() OptInt32 {
	return s.Orders
}

// SetAmount sets the value of Amount.
func (s *BuyOrder) SetAmount(val OptInt32) {
	s.Amount = val
}

// SetPricePerUnit sets the value of PricePerUnit.
func (s *BuyOrder) SetPricePerUnit(val OptFloat64) {
	s.PricePerUnit = val
}

// SetOrders sets the value of Orders.
func (s *BuyOrder) SetOrders(val OptInt32) {
	s.Orders = val
}

// Ref: #/components/schemas/Category
type Category string

const (
	CategoryUNKNOWN     Category = "UNKNOWN"
	CategoryWEAPON      Category = "WEAPON"
	CategoryARMOR       Category = "ARMOR"
	CategoryACCESSORIES Category = "ACCESSORIES"
	CategoryCONSUMABLES Category = "CONSUMABLES"
	CategoryBLOCKS      Category = "BLOCKS"
	CategoryMISC        Category = "MISC"
)

// MarshalText implements encoding.TextMarshaler.
func (s Category) MarshalText() ([]byte, error) {
	switch s {
	case CategoryUNKNOWN:
		return []byte(s), nil
	case CategoryWEAPON:
		return []byte(s), nil
	case CategoryARMOR:
		return []byte(s), nil
	case CategoryACCESSORIES:
		return []byte(s), nil
	case CategoryCONSUMABLES:
		return []byte(s), nil
	case CategoryBLOCKS:
		return []byte(s), nil
	case CategoryMISC:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Category) UnmarshalText(data []byte) error {
	switch Category(data) {
	case CategoryUNKNOWN:
		*s = CategoryUNKNOWN
		return nil
	case CategoryWEAPON:
		*s = CategoryWEAPON
		return nil
	case CategoryARMOR:
		*s = CategoryARMOR
		return nil
	case CategoryACCESSORIES:
		*s = CategoryACCESSORIES
		return nil
	case CategoryCONSUMABLES:
		*s = CategoryCONSUMABLES
		return nil
	case CategoryBLOCKS:
		*s = CategoryBLOCKS
		return nil
	case CategoryMISC:
		*s = CategoryMISC
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ColorEnchant
type ColorEnchant struct {
	Color OptNilString       `json:"color"`
	Type  OptEnchantmentType `json:"type"`
	Level OptInt32           `json:"level"`
}

// GetColor returns the value of Color.
func (s *ColorEnchant) GetColor() OptNilString {
	return s.Color
}

// GetType returns the value of Type.
func (s *ColorEnchant) GetType() OptEnchantmentType {
	return s.Type
}

// GetLevel returns the value of Level.
func (s *ColorEnchant) GetLevel() OptInt32 {
	return s.Level
}

// SetColor sets the value of Color.
func (s *ColorEnchant) SetColor(val OptNilString) {
	s.Color = val
}

// SetType sets the value of Type.
func (s *ColorEnchant) SetType(val OptEnchantmentType) {
	s.Type = val
}

// SetLevel sets the value of Level.
func (s *ColorEnchant) SetLevel(val OptInt32) {
	s.Level = val
}

// Ref: #/components/schemas/ColorSaveAuction
type ColorSaveAuction struct {
	Enchantments     OptNilColorEnchantArray       `json:"enchantments"`
	UUID             OptNilString                  `json:"uuid"`
	Count            OptInt32                      `json:"count"`
	StartingBid      OptInt64                      `json:"startingBid"`
	Tag              OptNilString                  `json:"tag"`
	ItemName         OptNilString                  `json:"itemName"`
	Start            OptDateTime                   `json:"start"`
	End              OptDateTime                   `json:"end"`
	AuctioneerId     OptNilString                  `json:"auctioneerId"`
	ProfileId        OptNilString                  `json:"profileId"`
	Coop             OptNilStringArray             `json:"coop"`
	CoopMembers      OptNilUUIDArray               `json:"coopMembers"`
	HighestBidAmount OptInt64                      `json:"highestBidAmount"`
	Bids             OptNilSaveBidsArray           `json:"bids"`
	AnvilUses        OptInt32                      `json:"anvilUses"`
	NbtData          OptNbtData                    `json:"nbtData"`
	ItemCreatedAt    OptDateTime                   `json:"itemCreatedAt"`
	Reforge          OptReforge                    `json:"reforge"`
	Category         OptCategory                   `json:"category"`
	Tier             OptTier                       `json:"tier"`
	Bin              OptBool                       `json:"bin"`
	FlatNbt          OptNilColorSaveAuctionFlatNbt `json:"flatNbt"`
}

// GetEnchantments returns the value of Enchantments.
func (s *ColorSaveAuction) GetEnchantments() OptNilColorEnchantArray {
	return s.Enchantments
}

// GetUUID returns the value of UUID.
func (s *ColorSaveAuction) GetUUID() OptNilString {
	return s.UUID
}

// GetCount returns the value of Count.
func (s *ColorSaveAuction) GetCount() OptInt32 {
	return s.Count
}

// GetStartingBid returns the value of StartingBid.
func (s *ColorSaveAuction) GetStartingBid() OptInt64 {
	return s.StartingBid
}

// GetTag returns the value of Tag.
func (s *ColorSaveAuction) GetTag() OptNilString {
	return s.Tag
}

// GetItemName returns the value of ItemName.
func (s *ColorSaveAuction) GetItemName() OptNilString {
	return s.ItemName
}

// GetStart returns the value of Start.
func (s *ColorSaveAuction) GetStart() OptDateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *ColorSaveAuction) GetEnd() OptDateTime {
	return s.End
}

// GetAuctioneerId returns the value of AuctioneerId.
func (s *ColorSaveAuction) GetAuctioneerId() OptNilString {
	return s.AuctioneerId
}

// GetProfileId returns the value of ProfileId.
func (s *ColorSaveAuction) GetProfileId() OptNilString {
	return s.ProfileId
}

// GetCoop returns the value of Coop.
func (s *ColorSaveAuction) GetCoop() OptNilStringArray {
	return s.Coop
}

// GetCoopMembers returns the value of CoopMembers.
func (s *ColorSaveAuction) GetCoopMembers() OptNilUUIDArray {
	return s.CoopMembers
}

// GetHighestBidAmount returns the value of HighestBidAmount.
func (s *ColorSaveAuction) GetHighestBidAmount() OptInt64 {
	return s.HighestBidAmount
}

// GetBids returns the value of Bids.
func (s *ColorSaveAuction) GetBids() OptNilSaveBidsArray {
	return s.Bids
}

// GetAnvilUses returns the value of AnvilUses.
func (s *ColorSaveAuction) GetAnvilUses() OptInt32 {
	return s.AnvilUses
}

// GetNbtData returns the value of NbtData.
func (s *ColorSaveAuction) GetNbtData() OptNbtData {
	return s.NbtData
}

// GetItemCreatedAt returns the value of ItemCreatedAt.
func (s *ColorSaveAuction) GetItemCreatedAt() OptDateTime {
	return s.ItemCreatedAt
}

// GetReforge returns the value of Reforge.
func (s *ColorSaveAuction) GetReforge() OptReforge {
	return s.Reforge
}

// GetCategory returns the value of Category.
func (s *ColorSaveAuction) GetCategory() OptCategory {
	return s.Category
}

// GetTier returns the value of Tier.
func (s *ColorSaveAuction) GetTier() OptTier {
	return s.Tier
}

// GetBin returns the value of Bin.
func (s *ColorSaveAuction) GetBin() OptBool {
	return s.Bin
}

// GetFlatNbt returns the value of FlatNbt.
func (s *ColorSaveAuction) GetFlatNbt() OptNilColorSaveAuctionFlatNbt {
	return s.FlatNbt
}

// SetEnchantments sets the value of Enchantments.
func (s *ColorSaveAuction) SetEnchantments(val OptNilColorEnchantArray) {
	s.Enchantments = val
}

// SetUUID sets the value of UUID.
func (s *ColorSaveAuction) SetUUID(val OptNilString) {
	s.UUID = val
}

// SetCount sets the value of Count.
func (s *ColorSaveAuction) SetCount(val OptInt32) {
	s.Count = val
}

// SetStartingBid sets the value of StartingBid.
func (s *ColorSaveAuction) SetStartingBid(val OptInt64) {
	s.StartingBid = val
}

// SetTag sets the value of Tag.
func (s *ColorSaveAuction) SetTag(val OptNilString) {
	s.Tag = val
}

// SetItemName sets the value of ItemName.
func (s *ColorSaveAuction) SetItemName(val OptNilString) {
	s.ItemName = val
}

// SetStart sets the value of Start.
func (s *ColorSaveAuction) SetStart(val OptDateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *ColorSaveAuction) SetEnd(val OptDateTime) {
	s.End = val
}

// SetAuctioneerId sets the value of AuctioneerId.
func (s *ColorSaveAuction) SetAuctioneerId(val OptNilString) {
	s.AuctioneerId = val
}

// SetProfileId sets the value of ProfileId.
func (s *ColorSaveAuction) SetProfileId(val OptNilString) {
	s.ProfileId = val
}

// SetCoop sets the value of Coop.
func (s *ColorSaveAuction) SetCoop(val OptNilStringArray) {
	s.Coop = val
}

// SetCoopMembers sets the value of CoopMembers.
func (s *ColorSaveAuction) SetCoopMembers(val OptNilUUIDArray) {
	s.CoopMembers = val
}

// SetHighestBidAmount sets the value of HighestBidAmount.
func (s *ColorSaveAuction) SetHighestBidAmount(val OptInt64) {
	s.HighestBidAmount = val
}

// SetBids sets the value of Bids.
func (s *ColorSaveAuction) SetBids(val OptNilSaveBidsArray) {
	s.Bids = val
}

// SetAnvilUses sets the value of AnvilUses.
func (s *ColorSaveAuction) SetAnvilUses(val OptInt32) {
	s.AnvilUses = val
}

// SetNbtData sets the value of NbtData.
func (s *ColorSaveAuction) SetNbtData(val OptNbtData) {
	s.NbtData = val
}

// SetItemCreatedAt sets the value of ItemCreatedAt.
func (s *ColorSaveAuction) SetItemCreatedAt(val OptDateTime) {
	s.ItemCreatedAt = val
}

// SetReforge sets the value of Reforge.
func (s *ColorSaveAuction) SetReforge(val OptReforge) {
	s.Reforge = val
}

// SetCategory sets the value of Category.
func (s *ColorSaveAuction) SetCategory(val OptCategory) {
	s.Category = val
}

// SetTier sets the value of Tier.
func (s *ColorSaveAuction) SetTier(val OptTier) {
	s.Tier = val
}

// SetBin sets the value of Bin.
func (s *ColorSaveAuction) SetBin(val OptBool) {
	s.Bin = val
}

// SetFlatNbt sets the value of FlatNbt.
func (s *ColorSaveAuction) SetFlatNbt(val OptNilColorSaveAuctionFlatNbt) {
	s.FlatNbt = val
}

type ColorSaveAuctionFlatNbt map[string]NilString

func (s *ColorSaveAuctionFlatNbt) init() ColorSaveAuctionFlatNbt {
	m := *s
	if m == nil {
		m = map[string]NilString{}
		*s = m
	}
	return m
}

// Represents help text for some command.
// Ref: #/components/schemas/CommandListEntry
type CommandListEntry struct {
	// The commands label. ie /cofl {this}.
	SubCommand OptNilString `json:"subCommand"`
	// The descriptive help text to display.
	Description OptNilString `json:"description"`
}

// GetSubCommand returns the value of SubCommand.
func (s *CommandListEntry) GetSubCommand() OptNilString {
	return s.SubCommand
}

// GetDescription returns the value of Description.
func (s *CommandListEntry) GetDescription() OptNilString {
	return s.Description
}

// SetSubCommand sets the value of SubCommand.
func (s *CommandListEntry) SetSubCommand(val OptNilString) {
	s.SubCommand = val
}

// SetDescription sets the value of Description.
func (s *CommandListEntry) SetDescription(val OptNilString) {
	s.Description = val
}

// Ref: #/components/schemas/CurrentPrice
type CurrentPrice struct {
	Sell      OptFloat64  `json:"sell"`
	Buy       OptFloat64  `json:"buy"`
	Available OptInt32    `json:"available"`
	UpdatedAt OptDateTime `json:"updatedAt"`
}

// GetSell returns the value of Sell.
func (s *CurrentPrice) GetSell() OptFloat64 {
	return s.Sell
}

// GetBuy returns the value of Buy.
func (s *CurrentPrice) GetBuy() OptFloat64 {
	return s.Buy
}

// GetAvailable returns the value of Available.
func (s *CurrentPrice) GetAvailable() OptInt32 {
	return s.Available
}

// GetUpdatedAt returns the value of UpdatedAt.
func (s *CurrentPrice) GetUpdatedAt() OptDateTime {
	return s.UpdatedAt
}

// SetSell sets the value of Sell.
func (s *CurrentPrice) SetSell(val OptFloat64) {
	s.Sell = val
}

// SetBuy sets the value of Buy.
func (s *CurrentPrice) SetBuy(val OptFloat64) {
	s.Buy = val
}

// SetAvailable sets the value of Available.
func (s *CurrentPrice) SetAvailable(val OptInt32) {
	s.Available = val
}

// SetUpdatedAt sets the value of UpdatedAt.
func (s *CurrentPrice) SetUpdatedAt(val OptDateTime) {
	s.UpdatedAt = val
}

// Response object instructing minecraft mods how to modify the description.
// Ref: #/components/schemas/DescModification
type DescModification struct {
	Type OptModType `json:"type"`
	// Extra field containing index to insert (int), or value to replace (string).
	Line OptInt32 `json:"line"`
	// New value to add,insert, or replace something with.
	Value OptNilString `json:"value"`
}

// GetType returns the value of Type.
func (s *DescModification) GetType() OptModType {
	return s.Type
}

// GetLine returns the value of Line.
func (s *DescModification) GetLine() OptInt32 {
	return s.Line
}

// GetValue returns the value of Value.
func (s *DescModification) GetValue() OptNilString {
	return s.Value
}

// SetType sets the value of Type.
func (s *DescModification) SetType(val OptModType) {
	s.Type = val
}

// SetLine sets the value of Line.
func (s *DescModification) SetLine(val OptInt32) {
	s.Line = val
}

// SetValue sets the value of Value.
func (s *DescModification) SetValue(val OptNilString) {
	s.Value = val
}

// Ref: #/components/schemas/DescriptionField
type DescriptionField string

const (
	DescriptionFieldNONE       DescriptionField = "NONE"
	DescriptionFieldLBIN       DescriptionField = "LBIN"
	DescriptionFieldLBINKEY    DescriptionField = "LBIN_KEY"
	DescriptionFieldMEDIAN     DescriptionField = "MEDIAN"
	DescriptionFieldMEDIANKEY  DescriptionField = "MEDIAN_KEY"
	DescriptionFieldVOLUME     DescriptionField = "VOLUME"
	DescriptionFieldTAG        DescriptionField = "TAG"
	DescriptionFieldCRAFTCOST  DescriptionField = "CRAFT_COST"
	DescriptionFieldBazaarBuy  DescriptionField = "BazaarBuy"
	DescriptionFieldBazaarSell DescriptionField = "BazaarSell"
	DescriptionFieldPRICEPAID  DescriptionField = "PRICE_PAID"
	DescriptionFieldITEMKEY    DescriptionField = "ITEM_KEY"
	DescriptionFieldBAZAARCOST DescriptionField = "BAZAAR_COST"
)

// MarshalText implements encoding.TextMarshaler.
func (s DescriptionField) MarshalText() ([]byte, error) {
	switch s {
	case DescriptionFieldNONE:
		return []byte(s), nil
	case DescriptionFieldLBIN:
		return []byte(s), nil
	case DescriptionFieldLBINKEY:
		return []byte(s), nil
	case DescriptionFieldMEDIAN:
		return []byte(s), nil
	case DescriptionFieldMEDIANKEY:
		return []byte(s), nil
	case DescriptionFieldVOLUME:
		return []byte(s), nil
	case DescriptionFieldTAG:
		return []byte(s), nil
	case DescriptionFieldCRAFTCOST:
		return []byte(s), nil
	case DescriptionFieldBazaarBuy:
		return []byte(s), nil
	case DescriptionFieldBazaarSell:
		return []byte(s), nil
	case DescriptionFieldPRICEPAID:
		return []byte(s), nil
	case DescriptionFieldITEMKEY:
		return []byte(s), nil
	case DescriptionFieldBAZAARCOST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *DescriptionField) UnmarshalText(data []byte) error {
	switch DescriptionField(data) {
	case DescriptionFieldNONE:
		*s = DescriptionFieldNONE
		return nil
	case DescriptionFieldLBIN:
		*s = DescriptionFieldLBIN
		return nil
	case DescriptionFieldLBINKEY:
		*s = DescriptionFieldLBINKEY
		return nil
	case DescriptionFieldMEDIAN:
		*s = DescriptionFieldMEDIAN
		return nil
	case DescriptionFieldMEDIANKEY:
		*s = DescriptionFieldMEDIANKEY
		return nil
	case DescriptionFieldVOLUME:
		*s = DescriptionFieldVOLUME
		return nil
	case DescriptionFieldTAG:
		*s = DescriptionFieldTAG
		return nil
	case DescriptionFieldCRAFTCOST:
		*s = DescriptionFieldCRAFTCOST
		return nil
	case DescriptionFieldBazaarBuy:
		*s = DescriptionFieldBazaarBuy
		return nil
	case DescriptionFieldBazaarSell:
		*s = DescriptionFieldBazaarSell
		return nil
	case DescriptionFieldPRICEPAID:
		*s = DescriptionFieldPRICEPAID
		return nil
	case DescriptionFieldITEMKEY:
		*s = DescriptionFieldITEMKEY
		return nil
	case DescriptionFieldBAZAARCOST:
		*s = DescriptionFieldBAZAARCOST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/DescriptionSetting
type DescriptionSetting struct {
	Fields OptNilDescriptionFieldArrayArray `json:"fields"`
}

// GetFields returns the value of Fields.
func (s *DescriptionSetting) GetFields() OptNilDescriptionFieldArrayArray {
	return s.Fields
}

// SetFields sets the value of Fields.
func (s *DescriptionSetting) SetFields(val OptNilDescriptionFieldArrayArray) {
	s.Fields = val
}

// Ref: #/components/schemas/Enchantment
type Enchantment struct {
	Type  OptEnchantmentType `json:"type"`
	Level OptInt32           `json:"level"`
}

// GetType returns the value of Type.
func (s *Enchantment) GetType() OptEnchantmentType {
	return s.Type
}

// GetLevel returns the value of Level.
func (s *Enchantment) GetLevel() OptInt32 {
	return s.Level
}

// SetType sets the value of Type.
func (s *Enchantment) SetType(val OptEnchantmentType) {
	s.Type = val
}

// SetLevel sets the value of Level.
func (s *Enchantment) SetLevel(val OptInt32) {
	s.Level = val
}

// Ref: #/components/schemas/EnchantmentType
type EnchantmentType string

const (
	EnchantmentTypeUnknown                 EnchantmentType = "unknown"
	EnchantmentTypeCleave                  EnchantmentType = "cleave"
	EnchantmentTypeCritical                EnchantmentType = "critical"
	EnchantmentTypeCubism                  EnchantmentType = "cubism"
	EnchantmentTypeEnderSlayer             EnchantmentType = "ender_slayer"
	EnchantmentTypeExecute                 EnchantmentType = "execute"
	EnchantmentTypeExperience              EnchantmentType = "experience"
	EnchantmentTypeFirstStrike             EnchantmentType = "first_strike"
	EnchantmentTypeGiantKiller             EnchantmentType = "giant_killer"
	EnchantmentTypeImpaling                EnchantmentType = "impaling"
	EnchantmentTypeLethality               EnchantmentType = "lethality"
	EnchantmentTypeLifeSteal               EnchantmentType = "life_steal"
	EnchantmentTypeLuck                    EnchantmentType = "luck"
	EnchantmentTypeScavenger               EnchantmentType = "scavenger"
	EnchantmentTypeThunderlord             EnchantmentType = "thunderlord"
	EnchantmentTypeTelekinesis             EnchantmentType = "telekinesis"
	EnchantmentTypeVampirism               EnchantmentType = "vampirism"
	EnchantmentTypeVenomous                EnchantmentType = "venomous"
	EnchantmentTypeGrowth                  EnchantmentType = "growth"
	EnchantmentTypeAiming                  EnchantmentType = "aiming"
	EnchantmentTypeDragonHunter            EnchantmentType = "dragon_hunter"
	EnchantmentTypeInfiniteQuiver          EnchantmentType = "infinite_quiver"
	EnchantmentTypePiercing                EnchantmentType = "piercing"
	EnchantmentTypeSnipe                   EnchantmentType = "snipe"
	EnchantmentTypeHarvesting              EnchantmentType = "harvesting"
	EnchantmentTypeRainbow                 EnchantmentType = "rainbow"
	EnchantmentTypeSmeltingTouch           EnchantmentType = "smelting_touch"
	EnchantmentTypeAngler                  EnchantmentType = "angler"
	EnchantmentTypeBlessing                EnchantmentType = "blessing"
	EnchantmentTypeCaster                  EnchantmentType = "caster"
	EnchantmentTypeFrail                   EnchantmentType = "frail"
	EnchantmentTypeMagnet                  EnchantmentType = "magnet"
	EnchantmentTypeSpikedHook              EnchantmentType = "spiked_hook"
	EnchantmentTypeBaneOfArthropods        EnchantmentType = "bane_of_arthropods"
	EnchantmentTypeFireAspect              EnchantmentType = "fire_aspect"
	EnchantmentTypeLooting                 EnchantmentType = "looting"
	EnchantmentTypeKnockback               EnchantmentType = "knockback"
	EnchantmentTypeSharpness               EnchantmentType = "sharpness"
	EnchantmentTypeSmite                   EnchantmentType = "smite"
	EnchantmentTypeAquaAffinity            EnchantmentType = "aqua_affinity"
	EnchantmentTypeBlastProtection         EnchantmentType = "blast_protection"
	EnchantmentTypeDepthStrider            EnchantmentType = "depth_strider"
	EnchantmentTypeFeatherFalling          EnchantmentType = "feather_falling"
	EnchantmentTypeFireProtection          EnchantmentType = "fire_protection"
	EnchantmentTypeFrostWalker             EnchantmentType = "frost_walker"
	EnchantmentTypeProjectileProtection    EnchantmentType = "projectile_protection"
	EnchantmentTypeProtection              EnchantmentType = "protection"
	EnchantmentTypeRespiration             EnchantmentType = "respiration"
	EnchantmentTypeThorns                  EnchantmentType = "thorns"
	EnchantmentTypeFlame                   EnchantmentType = "flame"
	EnchantmentTypePower                   EnchantmentType = "power"
	EnchantmentTypePunch                   EnchantmentType = "punch"
	EnchantmentTypeEfficiency              EnchantmentType = "efficiency"
	EnchantmentTypeFortune                 EnchantmentType = "fortune"
	EnchantmentTypeSilkTouch               EnchantmentType = "silk_touch"
	EnchantmentTypeLure                    EnchantmentType = "lure"
	EnchantmentTypeLuckOfTheSea            EnchantmentType = "luck_of_the_sea"
	EnchantmentTypeTrueProtection          EnchantmentType = "true_protection"
	EnchantmentTypeSugarRush               EnchantmentType = "sugar_rush"
	EnchantmentTypeReplenish               EnchantmentType = "replenish"
	EnchantmentTypeRejuvenate              EnchantmentType = "rejuvenate"
	EnchantmentTypeUltimateBank            EnchantmentType = "ultimate_bank"
	EnchantmentTypeUltimateCombo           EnchantmentType = "ultimate_combo"
	EnchantmentTypeUltimateJerry           EnchantmentType = "ultimate_jerry"
	EnchantmentTypeUltimateLastStand       EnchantmentType = "ultimate_last_stand"
	EnchantmentTypeUltimateNoPainNoGain    EnchantmentType = "ultimate_no_pain_no_gain"
	EnchantmentTypeUltimateWisdom          EnchantmentType = "ultimate_wisdom"
	EnchantmentTypeUltimateWise            EnchantmentType = "ultimate_wise"
	EnchantmentTypeExpertise               EnchantmentType = "expertise"
	EnchantmentTypeUltimateChimera         EnchantmentType = "ultimate_chimera"
	EnchantmentTypeUltimateRend            EnchantmentType = "ultimate_rend"
	EnchantmentTypeOverload                EnchantmentType = "overload"
	EnchantmentTypeUltimateLegion          EnchantmentType = "ultimate_legion"
	EnchantmentTypeUltimateSwarm           EnchantmentType = "ultimate_swarm"
	EnchantmentTypeBigBrain                EnchantmentType = "big_brain"
	EnchantmentTypeCompact                 EnchantmentType = "compact"
	EnchantmentTypeVicious                 EnchantmentType = "vicious"
	EnchantmentTypeCounterStrike           EnchantmentType = "counter_strike"
	EnchantmentTypeTurboCarrot             EnchantmentType = "turbo_carrot"
	EnchantmentTypeTurboCactus             EnchantmentType = "turbo_cactus"
	EnchantmentTypeTurboCane               EnchantmentType = "turbo_cane"
	EnchantmentTypeTurboCoco               EnchantmentType = "turbo_coco"
	EnchantmentTypeTurboMelon              EnchantmentType = "turbo_melon"
	EnchantmentTypeTurboMushrooms          EnchantmentType = "turbo_mushrooms"
	EnchantmentTypeTurboPumpkin            EnchantmentType = "turbo_pumpkin"
	EnchantmentTypeTurboPotato             EnchantmentType = "turbo_potato"
	EnchantmentTypeTurboWarts              EnchantmentType = "turbo_warts"
	EnchantmentTypeTurboWheat              EnchantmentType = "turbo_wheat"
	EnchantmentTypeChance                  EnchantmentType = "chance"
	EnchantmentTypePROSECUTE               EnchantmentType = "PROSECUTE"
	EnchantmentTypeSyphon                  EnchantmentType = "syphon"
	EnchantmentTypeRespite                 EnchantmentType = "respite"
	EnchantmentTypeThunderbolt             EnchantmentType = "thunderbolt"
	EnchantmentTypeTitanKiller             EnchantmentType = "titan_killer"
	EnchantmentTypeTripleStrike            EnchantmentType = "triple_strike"
	EnchantmentTypeUltimateSoulEater       EnchantmentType = "ultimate_soul_eater"
	EnchantmentTypeUltimateOneForAll       EnchantmentType = "ultimate_one_for_all"
	EnchantmentTypeNone                    EnchantmentType = "None"
	EnchantmentTypeCultivating             EnchantmentType = "cultivating"
	EnchantmentTypeDelicate                EnchantmentType = "delicate"
	EnchantmentTypeManaSteal               EnchantmentType = "mana_steal"
	EnchantmentTypeSmartyPants             EnchantmentType = "smarty_pants"
	EnchantmentTypePristine                EnchantmentType = "pristine"
	EnchantmentTypeUltimateFatalTempo      EnchantmentType = "ultimate_fatal_tempo"
	EnchantmentTypeUltimateInferno         EnchantmentType = "ultimate_inferno"
	EnchantmentTypeCharm                   EnchantmentType = "charm"
	EnchantmentTypeCorruption              EnchantmentType = "corruption"
	EnchantmentTypeFerociousMana           EnchantmentType = "ferocious_mana"
	EnchantmentTypeStrongMana              EnchantmentType = "strong_mana"
	EnchantmentTypeHardenedMana            EnchantmentType = "hardened_mana"
	EnchantmentTypeManaVampire             EnchantmentType = "mana_vampire"
	EnchantmentTypeSmoldering              EnchantmentType = "smoldering"
	EnchantmentTypeUltimateDuplex          EnchantmentType = "ultimate_duplex"
	EnchantmentTypeUltimateFlash           EnchantmentType = "ultimate_flash"
	EnchantmentTypeHecatomb                EnchantmentType = "hecatomb"
	EnchantmentTypeChampion                EnchantmentType = "champion"
	EnchantmentTypeUltimateHabaneroTactics EnchantmentType = "ultimate_habanero_tactics"
	EnchantmentTypeCayenne                 EnchantmentType = "cayenne"
	EnchantmentTypeDivineGift              EnchantmentType = "divine_gift"
	EnchantmentTypePiscary                 EnchantmentType = "piscary"
	EnchantmentTypeUltimateBobbinTime      EnchantmentType = "ultimate_bobbin_time"
	EnchantmentTypeTabasco                 EnchantmentType = "tabasco"
	EnchantmentTypeProsperity              EnchantmentType = "prosperity"
	EnchantmentTypeSunder                  EnchantmentType = "sunder"
	EnchantmentTypeAny                     EnchantmentType = "Any"
)

// MarshalText implements encoding.TextMarshaler.
func (s EnchantmentType) MarshalText() ([]byte, error) {
	switch s {
	case EnchantmentTypeUnknown:
		return []byte(s), nil
	case EnchantmentTypeCleave:
		return []byte(s), nil
	case EnchantmentTypeCritical:
		return []byte(s), nil
	case EnchantmentTypeCubism:
		return []byte(s), nil
	case EnchantmentTypeEnderSlayer:
		return []byte(s), nil
	case EnchantmentTypeExecute:
		return []byte(s), nil
	case EnchantmentTypeExperience:
		return []byte(s), nil
	case EnchantmentTypeFirstStrike:
		return []byte(s), nil
	case EnchantmentTypeGiantKiller:
		return []byte(s), nil
	case EnchantmentTypeImpaling:
		return []byte(s), nil
	case EnchantmentTypeLethality:
		return []byte(s), nil
	case EnchantmentTypeLifeSteal:
		return []byte(s), nil
	case EnchantmentTypeLuck:
		return []byte(s), nil
	case EnchantmentTypeScavenger:
		return []byte(s), nil
	case EnchantmentTypeThunderlord:
		return []byte(s), nil
	case EnchantmentTypeTelekinesis:
		return []byte(s), nil
	case EnchantmentTypeVampirism:
		return []byte(s), nil
	case EnchantmentTypeVenomous:
		return []byte(s), nil
	case EnchantmentTypeGrowth:
		return []byte(s), nil
	case EnchantmentTypeAiming:
		return []byte(s), nil
	case EnchantmentTypeDragonHunter:
		return []byte(s), nil
	case EnchantmentTypeInfiniteQuiver:
		return []byte(s), nil
	case EnchantmentTypePiercing:
		return []byte(s), nil
	case EnchantmentTypeSnipe:
		return []byte(s), nil
	case EnchantmentTypeHarvesting:
		return []byte(s), nil
	case EnchantmentTypeRainbow:
		return []byte(s), nil
	case EnchantmentTypeSmeltingTouch:
		return []byte(s), nil
	case EnchantmentTypeAngler:
		return []byte(s), nil
	case EnchantmentTypeBlessing:
		return []byte(s), nil
	case EnchantmentTypeCaster:
		return []byte(s), nil
	case EnchantmentTypeFrail:
		return []byte(s), nil
	case EnchantmentTypeMagnet:
		return []byte(s), nil
	case EnchantmentTypeSpikedHook:
		return []byte(s), nil
	case EnchantmentTypeBaneOfArthropods:
		return []byte(s), nil
	case EnchantmentTypeFireAspect:
		return []byte(s), nil
	case EnchantmentTypeLooting:
		return []byte(s), nil
	case EnchantmentTypeKnockback:
		return []byte(s), nil
	case EnchantmentTypeSharpness:
		return []byte(s), nil
	case EnchantmentTypeSmite:
		return []byte(s), nil
	case EnchantmentTypeAquaAffinity:
		return []byte(s), nil
	case EnchantmentTypeBlastProtection:
		return []byte(s), nil
	case EnchantmentTypeDepthStrider:
		return []byte(s), nil
	case EnchantmentTypeFeatherFalling:
		return []byte(s), nil
	case EnchantmentTypeFireProtection:
		return []byte(s), nil
	case EnchantmentTypeFrostWalker:
		return []byte(s), nil
	case EnchantmentTypeProjectileProtection:
		return []byte(s), nil
	case EnchantmentTypeProtection:
		return []byte(s), nil
	case EnchantmentTypeRespiration:
		return []byte(s), nil
	case EnchantmentTypeThorns:
		return []byte(s), nil
	case EnchantmentTypeFlame:
		return []byte(s), nil
	case EnchantmentTypePower:
		return []byte(s), nil
	case EnchantmentTypePunch:
		return []byte(s), nil
	case EnchantmentTypeEfficiency:
		return []byte(s), nil
	case EnchantmentTypeFortune:
		return []byte(s), nil
	case EnchantmentTypeSilkTouch:
		return []byte(s), nil
	case EnchantmentTypeLure:
		return []byte(s), nil
	case EnchantmentTypeLuckOfTheSea:
		return []byte(s), nil
	case EnchantmentTypeTrueProtection:
		return []byte(s), nil
	case EnchantmentTypeSugarRush:
		return []byte(s), nil
	case EnchantmentTypeReplenish:
		return []byte(s), nil
	case EnchantmentTypeRejuvenate:
		return []byte(s), nil
	case EnchantmentTypeUltimateBank:
		return []byte(s), nil
	case EnchantmentTypeUltimateCombo:
		return []byte(s), nil
	case EnchantmentTypeUltimateJerry:
		return []byte(s), nil
	case EnchantmentTypeUltimateLastStand:
		return []byte(s), nil
	case EnchantmentTypeUltimateNoPainNoGain:
		return []byte(s), nil
	case EnchantmentTypeUltimateWisdom:
		return []byte(s), nil
	case EnchantmentTypeUltimateWise:
		return []byte(s), nil
	case EnchantmentTypeExpertise:
		return []byte(s), nil
	case EnchantmentTypeUltimateChimera:
		return []byte(s), nil
	case EnchantmentTypeUltimateRend:
		return []byte(s), nil
	case EnchantmentTypeOverload:
		return []byte(s), nil
	case EnchantmentTypeUltimateLegion:
		return []byte(s), nil
	case EnchantmentTypeUltimateSwarm:
		return []byte(s), nil
	case EnchantmentTypeBigBrain:
		return []byte(s), nil
	case EnchantmentTypeCompact:
		return []byte(s), nil
	case EnchantmentTypeVicious:
		return []byte(s), nil
	case EnchantmentTypeCounterStrike:
		return []byte(s), nil
	case EnchantmentTypeTurboCarrot:
		return []byte(s), nil
	case EnchantmentTypeTurboCactus:
		return []byte(s), nil
	case EnchantmentTypeTurboCane:
		return []byte(s), nil
	case EnchantmentTypeTurboCoco:
		return []byte(s), nil
	case EnchantmentTypeTurboMelon:
		return []byte(s), nil
	case EnchantmentTypeTurboMushrooms:
		return []byte(s), nil
	case EnchantmentTypeTurboPumpkin:
		return []byte(s), nil
	case EnchantmentTypeTurboPotato:
		return []byte(s), nil
	case EnchantmentTypeTurboWarts:
		return []byte(s), nil
	case EnchantmentTypeTurboWheat:
		return []byte(s), nil
	case EnchantmentTypeChance:
		return []byte(s), nil
	case EnchantmentTypePROSECUTE:
		return []byte(s), nil
	case EnchantmentTypeSyphon:
		return []byte(s), nil
	case EnchantmentTypeRespite:
		return []byte(s), nil
	case EnchantmentTypeThunderbolt:
		return []byte(s), nil
	case EnchantmentTypeTitanKiller:
		return []byte(s), nil
	case EnchantmentTypeTripleStrike:
		return []byte(s), nil
	case EnchantmentTypeUltimateSoulEater:
		return []byte(s), nil
	case EnchantmentTypeUltimateOneForAll:
		return []byte(s), nil
	case EnchantmentTypeNone:
		return []byte(s), nil
	case EnchantmentTypeCultivating:
		return []byte(s), nil
	case EnchantmentTypeDelicate:
		return []byte(s), nil
	case EnchantmentTypeManaSteal:
		return []byte(s), nil
	case EnchantmentTypeSmartyPants:
		return []byte(s), nil
	case EnchantmentTypePristine:
		return []byte(s), nil
	case EnchantmentTypeUltimateFatalTempo:
		return []byte(s), nil
	case EnchantmentTypeUltimateInferno:
		return []byte(s), nil
	case EnchantmentTypeCharm:
		return []byte(s), nil
	case EnchantmentTypeCorruption:
		return []byte(s), nil
	case EnchantmentTypeFerociousMana:
		return []byte(s), nil
	case EnchantmentTypeStrongMana:
		return []byte(s), nil
	case EnchantmentTypeHardenedMana:
		return []byte(s), nil
	case EnchantmentTypeManaVampire:
		return []byte(s), nil
	case EnchantmentTypeSmoldering:
		return []byte(s), nil
	case EnchantmentTypeUltimateDuplex:
		return []byte(s), nil
	case EnchantmentTypeUltimateFlash:
		return []byte(s), nil
	case EnchantmentTypeHecatomb:
		return []byte(s), nil
	case EnchantmentTypeChampion:
		return []byte(s), nil
	case EnchantmentTypeUltimateHabaneroTactics:
		return []byte(s), nil
	case EnchantmentTypeCayenne:
		return []byte(s), nil
	case EnchantmentTypeDivineGift:
		return []byte(s), nil
	case EnchantmentTypePiscary:
		return []byte(s), nil
	case EnchantmentTypeUltimateBobbinTime:
		return []byte(s), nil
	case EnchantmentTypeTabasco:
		return []byte(s), nil
	case EnchantmentTypeProsperity:
		return []byte(s), nil
	case EnchantmentTypeSunder:
		return []byte(s), nil
	case EnchantmentTypeAny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *EnchantmentType) UnmarshalText(data []byte) error {
	switch EnchantmentType(data) {
	case EnchantmentTypeUnknown:
		*s = EnchantmentTypeUnknown
		return nil
	case EnchantmentTypeCleave:
		*s = EnchantmentTypeCleave
		return nil
	case EnchantmentTypeCritical:
		*s = EnchantmentTypeCritical
		return nil
	case EnchantmentTypeCubism:
		*s = EnchantmentTypeCubism
		return nil
	case EnchantmentTypeEnderSlayer:
		*s = EnchantmentTypeEnderSlayer
		return nil
	case EnchantmentTypeExecute:
		*s = EnchantmentTypeExecute
		return nil
	case EnchantmentTypeExperience:
		*s = EnchantmentTypeExperience
		return nil
	case EnchantmentTypeFirstStrike:
		*s = EnchantmentTypeFirstStrike
		return nil
	case EnchantmentTypeGiantKiller:
		*s = EnchantmentTypeGiantKiller
		return nil
	case EnchantmentTypeImpaling:
		*s = EnchantmentTypeImpaling
		return nil
	case EnchantmentTypeLethality:
		*s = EnchantmentTypeLethality
		return nil
	case EnchantmentTypeLifeSteal:
		*s = EnchantmentTypeLifeSteal
		return nil
	case EnchantmentTypeLuck:
		*s = EnchantmentTypeLuck
		return nil
	case EnchantmentTypeScavenger:
		*s = EnchantmentTypeScavenger
		return nil
	case EnchantmentTypeThunderlord:
		*s = EnchantmentTypeThunderlord
		return nil
	case EnchantmentTypeTelekinesis:
		*s = EnchantmentTypeTelekinesis
		return nil
	case EnchantmentTypeVampirism:
		*s = EnchantmentTypeVampirism
		return nil
	case EnchantmentTypeVenomous:
		*s = EnchantmentTypeVenomous
		return nil
	case EnchantmentTypeGrowth:
		*s = EnchantmentTypeGrowth
		return nil
	case EnchantmentTypeAiming:
		*s = EnchantmentTypeAiming
		return nil
	case EnchantmentTypeDragonHunter:
		*s = EnchantmentTypeDragonHunter
		return nil
	case EnchantmentTypeInfiniteQuiver:
		*s = EnchantmentTypeInfiniteQuiver
		return nil
	case EnchantmentTypePiercing:
		*s = EnchantmentTypePiercing
		return nil
	case EnchantmentTypeSnipe:
		*s = EnchantmentTypeSnipe
		return nil
	case EnchantmentTypeHarvesting:
		*s = EnchantmentTypeHarvesting
		return nil
	case EnchantmentTypeRainbow:
		*s = EnchantmentTypeRainbow
		return nil
	case EnchantmentTypeSmeltingTouch:
		*s = EnchantmentTypeSmeltingTouch
		return nil
	case EnchantmentTypeAngler:
		*s = EnchantmentTypeAngler
		return nil
	case EnchantmentTypeBlessing:
		*s = EnchantmentTypeBlessing
		return nil
	case EnchantmentTypeCaster:
		*s = EnchantmentTypeCaster
		return nil
	case EnchantmentTypeFrail:
		*s = EnchantmentTypeFrail
		return nil
	case EnchantmentTypeMagnet:
		*s = EnchantmentTypeMagnet
		return nil
	case EnchantmentTypeSpikedHook:
		*s = EnchantmentTypeSpikedHook
		return nil
	case EnchantmentTypeBaneOfArthropods:
		*s = EnchantmentTypeBaneOfArthropods
		return nil
	case EnchantmentTypeFireAspect:
		*s = EnchantmentTypeFireAspect
		return nil
	case EnchantmentTypeLooting:
		*s = EnchantmentTypeLooting
		return nil
	case EnchantmentTypeKnockback:
		*s = EnchantmentTypeKnockback
		return nil
	case EnchantmentTypeSharpness:
		*s = EnchantmentTypeSharpness
		return nil
	case EnchantmentTypeSmite:
		*s = EnchantmentTypeSmite
		return nil
	case EnchantmentTypeAquaAffinity:
		*s = EnchantmentTypeAquaAffinity
		return nil
	case EnchantmentTypeBlastProtection:
		*s = EnchantmentTypeBlastProtection
		return nil
	case EnchantmentTypeDepthStrider:
		*s = EnchantmentTypeDepthStrider
		return nil
	case EnchantmentTypeFeatherFalling:
		*s = EnchantmentTypeFeatherFalling
		return nil
	case EnchantmentTypeFireProtection:
		*s = EnchantmentTypeFireProtection
		return nil
	case EnchantmentTypeFrostWalker:
		*s = EnchantmentTypeFrostWalker
		return nil
	case EnchantmentTypeProjectileProtection:
		*s = EnchantmentTypeProjectileProtection
		return nil
	case EnchantmentTypeProtection:
		*s = EnchantmentTypeProtection
		return nil
	case EnchantmentTypeRespiration:
		*s = EnchantmentTypeRespiration
		return nil
	case EnchantmentTypeThorns:
		*s = EnchantmentTypeThorns
		return nil
	case EnchantmentTypeFlame:
		*s = EnchantmentTypeFlame
		return nil
	case EnchantmentTypePower:
		*s = EnchantmentTypePower
		return nil
	case EnchantmentTypePunch:
		*s = EnchantmentTypePunch
		return nil
	case EnchantmentTypeEfficiency:
		*s = EnchantmentTypeEfficiency
		return nil
	case EnchantmentTypeFortune:
		*s = EnchantmentTypeFortune
		return nil
	case EnchantmentTypeSilkTouch:
		*s = EnchantmentTypeSilkTouch
		return nil
	case EnchantmentTypeLure:
		*s = EnchantmentTypeLure
		return nil
	case EnchantmentTypeLuckOfTheSea:
		*s = EnchantmentTypeLuckOfTheSea
		return nil
	case EnchantmentTypeTrueProtection:
		*s = EnchantmentTypeTrueProtection
		return nil
	case EnchantmentTypeSugarRush:
		*s = EnchantmentTypeSugarRush
		return nil
	case EnchantmentTypeReplenish:
		*s = EnchantmentTypeReplenish
		return nil
	case EnchantmentTypeRejuvenate:
		*s = EnchantmentTypeRejuvenate
		return nil
	case EnchantmentTypeUltimateBank:
		*s = EnchantmentTypeUltimateBank
		return nil
	case EnchantmentTypeUltimateCombo:
		*s = EnchantmentTypeUltimateCombo
		return nil
	case EnchantmentTypeUltimateJerry:
		*s = EnchantmentTypeUltimateJerry
		return nil
	case EnchantmentTypeUltimateLastStand:
		*s = EnchantmentTypeUltimateLastStand
		return nil
	case EnchantmentTypeUltimateNoPainNoGain:
		*s = EnchantmentTypeUltimateNoPainNoGain
		return nil
	case EnchantmentTypeUltimateWisdom:
		*s = EnchantmentTypeUltimateWisdom
		return nil
	case EnchantmentTypeUltimateWise:
		*s = EnchantmentTypeUltimateWise
		return nil
	case EnchantmentTypeExpertise:
		*s = EnchantmentTypeExpertise
		return nil
	case EnchantmentTypeUltimateChimera:
		*s = EnchantmentTypeUltimateChimera
		return nil
	case EnchantmentTypeUltimateRend:
		*s = EnchantmentTypeUltimateRend
		return nil
	case EnchantmentTypeOverload:
		*s = EnchantmentTypeOverload
		return nil
	case EnchantmentTypeUltimateLegion:
		*s = EnchantmentTypeUltimateLegion
		return nil
	case EnchantmentTypeUltimateSwarm:
		*s = EnchantmentTypeUltimateSwarm
		return nil
	case EnchantmentTypeBigBrain:
		*s = EnchantmentTypeBigBrain
		return nil
	case EnchantmentTypeCompact:
		*s = EnchantmentTypeCompact
		return nil
	case EnchantmentTypeVicious:
		*s = EnchantmentTypeVicious
		return nil
	case EnchantmentTypeCounterStrike:
		*s = EnchantmentTypeCounterStrike
		return nil
	case EnchantmentTypeTurboCarrot:
		*s = EnchantmentTypeTurboCarrot
		return nil
	case EnchantmentTypeTurboCactus:
		*s = EnchantmentTypeTurboCactus
		return nil
	case EnchantmentTypeTurboCane:
		*s = EnchantmentTypeTurboCane
		return nil
	case EnchantmentTypeTurboCoco:
		*s = EnchantmentTypeTurboCoco
		return nil
	case EnchantmentTypeTurboMelon:
		*s = EnchantmentTypeTurboMelon
		return nil
	case EnchantmentTypeTurboMushrooms:
		*s = EnchantmentTypeTurboMushrooms
		return nil
	case EnchantmentTypeTurboPumpkin:
		*s = EnchantmentTypeTurboPumpkin
		return nil
	case EnchantmentTypeTurboPotato:
		*s = EnchantmentTypeTurboPotato
		return nil
	case EnchantmentTypeTurboWarts:
		*s = EnchantmentTypeTurboWarts
		return nil
	case EnchantmentTypeTurboWheat:
		*s = EnchantmentTypeTurboWheat
		return nil
	case EnchantmentTypeChance:
		*s = EnchantmentTypeChance
		return nil
	case EnchantmentTypePROSECUTE:
		*s = EnchantmentTypePROSECUTE
		return nil
	case EnchantmentTypeSyphon:
		*s = EnchantmentTypeSyphon
		return nil
	case EnchantmentTypeRespite:
		*s = EnchantmentTypeRespite
		return nil
	case EnchantmentTypeThunderbolt:
		*s = EnchantmentTypeThunderbolt
		return nil
	case EnchantmentTypeTitanKiller:
		*s = EnchantmentTypeTitanKiller
		return nil
	case EnchantmentTypeTripleStrike:
		*s = EnchantmentTypeTripleStrike
		return nil
	case EnchantmentTypeUltimateSoulEater:
		*s = EnchantmentTypeUltimateSoulEater
		return nil
	case EnchantmentTypeUltimateOneForAll:
		*s = EnchantmentTypeUltimateOneForAll
		return nil
	case EnchantmentTypeNone:
		*s = EnchantmentTypeNone
		return nil
	case EnchantmentTypeCultivating:
		*s = EnchantmentTypeCultivating
		return nil
	case EnchantmentTypeDelicate:
		*s = EnchantmentTypeDelicate
		return nil
	case EnchantmentTypeManaSteal:
		*s = EnchantmentTypeManaSteal
		return nil
	case EnchantmentTypeSmartyPants:
		*s = EnchantmentTypeSmartyPants
		return nil
	case EnchantmentTypePristine:
		*s = EnchantmentTypePristine
		return nil
	case EnchantmentTypeUltimateFatalTempo:
		*s = EnchantmentTypeUltimateFatalTempo
		return nil
	case EnchantmentTypeUltimateInferno:
		*s = EnchantmentTypeUltimateInferno
		return nil
	case EnchantmentTypeCharm:
		*s = EnchantmentTypeCharm
		return nil
	case EnchantmentTypeCorruption:
		*s = EnchantmentTypeCorruption
		return nil
	case EnchantmentTypeFerociousMana:
		*s = EnchantmentTypeFerociousMana
		return nil
	case EnchantmentTypeStrongMana:
		*s = EnchantmentTypeStrongMana
		return nil
	case EnchantmentTypeHardenedMana:
		*s = EnchantmentTypeHardenedMana
		return nil
	case EnchantmentTypeManaVampire:
		*s = EnchantmentTypeManaVampire
		return nil
	case EnchantmentTypeSmoldering:
		*s = EnchantmentTypeSmoldering
		return nil
	case EnchantmentTypeUltimateDuplex:
		*s = EnchantmentTypeUltimateDuplex
		return nil
	case EnchantmentTypeUltimateFlash:
		*s = EnchantmentTypeUltimateFlash
		return nil
	case EnchantmentTypeHecatomb:
		*s = EnchantmentTypeHecatomb
		return nil
	case EnchantmentTypeChampion:
		*s = EnchantmentTypeChampion
		return nil
	case EnchantmentTypeUltimateHabaneroTactics:
		*s = EnchantmentTypeUltimateHabaneroTactics
		return nil
	case EnchantmentTypeCayenne:
		*s = EnchantmentTypeCayenne
		return nil
	case EnchantmentTypeDivineGift:
		*s = EnchantmentTypeDivineGift
		return nil
	case EnchantmentTypePiscary:
		*s = EnchantmentTypePiscary
		return nil
	case EnchantmentTypeUltimateBobbinTime:
		*s = EnchantmentTypeUltimateBobbinTime
		return nil
	case EnchantmentTypeTabasco:
		*s = EnchantmentTypeTabasco
		return nil
	case EnchantmentTypeProsperity:
		*s = EnchantmentTypeProsperity
		return nil
	case EnchantmentTypeSunder:
		*s = EnchantmentTypeSunder
		return nil
	case EnchantmentTypeAny:
		*s = EnchantmentTypeAny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ErrorResponse
type ErrorResponse struct {
	Slug    OptNilString `json:"slug"`
	Message OptNilString `json:"message"`
	Trace   OptNilString `json:"trace"`
}

// GetSlug returns the value of Slug.
func (s *ErrorResponse) GetSlug() OptNilString {
	return s.Slug
}

// GetMessage returns the value of Message.
func (s *ErrorResponse) GetMessage() OptNilString {
	return s.Message
}

// GetTrace returns the value of Trace.
func (s *ErrorResponse) GetTrace() OptNilString {
	return s.Trace
}

// SetSlug sets the value of Slug.
func (s *ErrorResponse) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetMessage sets the value of Message.
func (s *ErrorResponse) SetMessage(val OptNilString) {
	s.Message = val
}

// SetTrace sets the value of Trace.
func (s *ErrorResponse) SetTrace(val OptNilString) {
	s.Trace = val
}

// Ref: #/components/schemas/FilterOptions
type FilterOptions struct {
	Name        OptNilString      `json:"name"`
	Options     OptNilStringArray `json:"options"`
	Type        OptFilterType     `json:"type"`
	LongType    OptNilString      `json:"longType"`
	Description OptNilString      `json:"description"`
}

// GetName returns the value of Name.
func (s *FilterOptions) GetName() OptNilString {
	return s.Name
}

// GetOptions returns the value of Options.
func (s *FilterOptions) GetOptions() OptNilStringArray {
	return s.Options
}

// GetType returns the value of Type.
func (s *FilterOptions) GetType() OptFilterType {
	return s.Type
}

// GetLongType returns the value of LongType.
func (s *FilterOptions) GetLongType() OptNilString {
	return s.LongType
}

// GetDescription returns the value of Description.
func (s *FilterOptions) GetDescription() OptNilString {
	return s.Description
}

// SetName sets the value of Name.
func (s *FilterOptions) SetName(val OptNilString) {
	s.Name = val
}

// SetOptions sets the value of Options.
func (s *FilterOptions) SetOptions(val OptNilStringArray) {
	s.Options = val
}

// SetType sets the value of Type.
func (s *FilterOptions) SetType(val OptFilterType) {
	s.Type = val
}

// SetLongType sets the value of LongType.
func (s *FilterOptions) SetLongType(val OptNilString) {
	s.LongType = val
}

// SetDescription sets the value of Description.
func (s *FilterOptions) SetDescription(val OptNilString) {
	s.Description = val
}

// Ref: #/components/schemas/FilterQuery
type FilterQuery struct {
	Filters OptFilterQueryFilters `json:"filters"`
	Auction OptSaveAuction        `json:"auction"`
}

// GetFilters returns the value of Filters.
func (s *FilterQuery) GetFilters() OptFilterQueryFilters {
	return s.Filters
}

// GetAuction returns the value of Auction.
func (s *FilterQuery) GetAuction() OptSaveAuction {
	return s.Auction
}

// SetFilters sets the value of Filters.
func (s *FilterQuery) SetFilters(val OptFilterQueryFilters) {
	s.Filters = val
}

// SetAuction sets the value of Auction.
func (s *FilterQuery) SetAuction(val OptSaveAuction) {
	s.Auction = val
}

type FilterQueryFilters struct{}

// Ref: #/components/schemas/FilterType
type FilterType int32

const (
	FilterType1   FilterType = 1
	FilterType2   FilterType = 2
	FilterType4   FilterType = 4
	FilterType8   FilterType = 8
	FilterType16  FilterType = 16
	FilterType32  FilterType = 32
	FilterType64  FilterType = 64
	FilterType128 FilterType = 128
	FilterType256 FilterType = 256
	FilterType512 FilterType = 512
)

// Ref: #/components/schemas/FinderType
type FinderType int32

const (
	FinderType0   FinderType = 0
	FinderType1   FinderType = 1
	FinderType2   FinderType = 2
	FinderType4   FinderType = 4
	FinderType6   FinderType = 6
	FinderType7   FinderType = 7
	FinderType8   FinderType = 8
	FinderType16  FinderType = 16
	FinderType32  FinderType = 32
	FinderType64  FinderType = 64
	FinderType128 FinderType = 128
)

// Ref: #/components/schemas/FlipDetails
type FlipDetails struct {
	ItemName        OptNilString              `json:"itemName"`
	ItemTag         OptNilString              `json:"itemTag"`
	Tier            OptNilString              `json:"tier"`
	PricePaid       OptInt64                  `json:"pricePaid"`
	SoldFor         OptInt64                  `json:"soldFor"`
	Finder          OptFinderType             `json:"finder"`
	UID             OptInt64                  `json:"uId"`
	OriginAuction   OptNilString              `json:"originAuction"`
	SoldAuction     OptNilString              `json:"soldAuction"`
	BuyTime         OptDateTime               `json:"buyTime"`
	SellTime        OptDateTime               `json:"sellTime"`
	Profit          OptInt64                  `json:"profit"`
	PropertyChanges OptNilPropertyChangeArray `json:"propertyChanges"`
}

// GetItemName returns the value of ItemName.
func (s *FlipDetails) GetItemName() OptNilString {
	return s.ItemName
}

// GetItemTag returns the value of ItemTag.
func (s *FlipDetails) GetItemTag() OptNilString {
	return s.ItemTag
}

// GetTier returns the value of Tier.
func (s *FlipDetails) GetTier() OptNilString {
	return s.Tier
}

// GetPricePaid returns the value of PricePaid.
func (s *FlipDetails) GetPricePaid() OptInt64 {
	return s.PricePaid
}

// GetSoldFor returns the value of SoldFor.
func (s *FlipDetails) GetSoldFor() OptInt64 {
	return s.SoldFor
}

// GetFinder returns the value of Finder.
func (s *FlipDetails) GetFinder() OptFinderType {
	return s.Finder
}

// GetUID returns the value of UID.
func (s *FlipDetails) GetUID() OptInt64 {
	return s.UID
}

// GetOriginAuction returns the value of OriginAuction.
func (s *FlipDetails) GetOriginAuction() OptNilString {
	return s.OriginAuction
}

// GetSoldAuction returns the value of SoldAuction.
func (s *FlipDetails) GetSoldAuction() OptNilString {
	return s.SoldAuction
}

// GetBuyTime returns the value of BuyTime.
func (s *FlipDetails) GetBuyTime() OptDateTime {
	return s.BuyTime
}

// GetSellTime returns the value of SellTime.
func (s *FlipDetails) GetSellTime() OptDateTime {
	return s.SellTime
}

// GetProfit returns the value of Profit.
func (s *FlipDetails) GetProfit() OptInt64 {
	return s.Profit
}

// GetPropertyChanges returns the value of PropertyChanges.
func (s *FlipDetails) GetPropertyChanges() OptNilPropertyChangeArray {
	return s.PropertyChanges
}

// SetItemName sets the value of ItemName.
func (s *FlipDetails) SetItemName(val OptNilString) {
	s.ItemName = val
}

// SetItemTag sets the value of ItemTag.
func (s *FlipDetails) SetItemTag(val OptNilString) {
	s.ItemTag = val
}

// SetTier sets the value of Tier.
func (s *FlipDetails) SetTier(val OptNilString) {
	s.Tier = val
}

// SetPricePaid sets the value of PricePaid.
func (s *FlipDetails) SetPricePaid(val OptInt64) {
	s.PricePaid = val
}

// SetSoldFor sets the value of SoldFor.
func (s *FlipDetails) SetSoldFor(val OptInt64) {
	s.SoldFor = val
}

// SetFinder sets the value of Finder.
func (s *FlipDetails) SetFinder(val OptFinderType) {
	s.Finder = val
}

// SetUID sets the value of UID.
func (s *FlipDetails) SetUID(val OptInt64) {
	s.UID = val
}

// SetOriginAuction sets the value of OriginAuction.
func (s *FlipDetails) SetOriginAuction(val OptNilString) {
	s.OriginAuction = val
}

// SetSoldAuction sets the value of SoldAuction.
func (s *FlipDetails) SetSoldAuction(val OptNilString) {
	s.SoldAuction = val
}

// SetBuyTime sets the value of BuyTime.
func (s *FlipDetails) SetBuyTime(val OptDateTime) {
	s.BuyTime = val
}

// SetSellTime sets the value of SellTime.
func (s *FlipDetails) SetSellTime(val OptDateTime) {
	s.SellTime = val
}

// SetProfit sets the value of Profit.
func (s *FlipDetails) SetProfit(val OptInt64) {
	s.Profit = val
}

// SetPropertyChanges sets the value of PropertyChanges.
func (s *FlipDetails) SetPropertyChanges(val OptNilPropertyChangeArray) {
	s.PropertyChanges = val
}

// Ref: #/components/schemas/FlipSettings
type FlipSettings struct {
	Filters            OptFlipSettingsFilters `json:"filters"`
	Blacklist          OptNilListEntryArray   `json:"blacklist"`
	Whitelist          OptNilListEntryArray   `json:"whitelist"`
	Lbin               OptBool                `json:"lbin"`
	Visibility         OptVisibilitySettings  `json:"visibility"`
	Mod                OptModSettings         `json:"mod"`
	Finders            OptFinderType          `json:"finders"`
	FastMode           OptBool                `json:"fastMode"`
	Changer            OptNilString           `json:"changer"`
	OnlyBin            OptBool                `json:"onlyBin"`
	WhitelistAftermain OptBool                `json:"whitelistAftermain"`
	MinProfit          OptInt64               `json:"minProfit"`
	MinProfitPercent   OptInt32               `json:"minProfitPercent"`
	MinVolume          OptFloat64             `json:"minVolume"`
	MaxCost            OptInt64               `json:"maxCost"`
	LastChange         OptNilString           `json:"lastChange"`
}

// GetFilters returns the value of Filters.
func (s *FlipSettings) GetFilters() OptFlipSettingsFilters {
	return s.Filters
}

// GetBlacklist returns the value of Blacklist.
func (s *FlipSettings) GetBlacklist() OptNilListEntryArray {
	return s.Blacklist
}

// GetWhitelist returns the value of Whitelist.
func (s *FlipSettings) GetWhitelist() OptNilListEntryArray {
	return s.Whitelist
}

// GetLbin returns the value of Lbin.
func (s *FlipSettings) GetLbin() OptBool {
	return s.Lbin
}

// GetVisibility returns the value of Visibility.
func (s *FlipSettings) GetVisibility() OptVisibilitySettings {
	return s.Visibility
}

// GetMod returns the value of Mod.
func (s *FlipSettings) GetMod() OptModSettings {
	return s.Mod
}

// GetFinders returns the value of Finders.
func (s *FlipSettings) GetFinders() OptFinderType {
	return s.Finders
}

// GetFastMode returns the value of FastMode.
func (s *FlipSettings) GetFastMode() OptBool {
	return s.FastMode
}

// GetChanger returns the value of Changer.
func (s *FlipSettings) GetChanger() OptNilString {
	return s.Changer
}

// GetOnlyBin returns the value of OnlyBin.
func (s *FlipSettings) GetOnlyBin() OptBool {
	return s.OnlyBin
}

// GetWhitelistAftermain returns the value of WhitelistAftermain.
func (s *FlipSettings) GetWhitelistAftermain() OptBool {
	return s.WhitelistAftermain
}

// GetMinProfit returns the value of MinProfit.
func (s *FlipSettings) GetMinProfit() OptInt64 {
	return s.MinProfit
}

// GetMinProfitPercent returns the value of MinProfitPercent.
func (s *FlipSettings) GetMinProfitPercent() OptInt32 {
	return s.MinProfitPercent
}

// GetMinVolume returns the value of MinVolume.
func (s *FlipSettings) GetMinVolume() OptFloat64 {
	return s.MinVolume
}

// GetMaxCost returns the value of MaxCost.
func (s *FlipSettings) GetMaxCost() OptInt64 {
	return s.MaxCost
}

// GetLastChange returns the value of LastChange.
func (s *FlipSettings) GetLastChange() OptNilString {
	return s.LastChange
}

// SetFilters sets the value of Filters.
func (s *FlipSettings) SetFilters(val OptFlipSettingsFilters) {
	s.Filters = val
}

// SetBlacklist sets the value of Blacklist.
func (s *FlipSettings) SetBlacklist(val OptNilListEntryArray) {
	s.Blacklist = val
}

// SetWhitelist sets the value of Whitelist.
func (s *FlipSettings) SetWhitelist(val OptNilListEntryArray) {
	s.Whitelist = val
}

// SetLbin sets the value of Lbin.
func (s *FlipSettings) SetLbin(val OptBool) {
	s.Lbin = val
}

// SetVisibility sets the value of Visibility.
func (s *FlipSettings) SetVisibility(val OptVisibilitySettings) {
	s.Visibility = val
}

// SetMod sets the value of Mod.
func (s *FlipSettings) SetMod(val OptModSettings) {
	s.Mod = val
}

// SetFinders sets the value of Finders.
func (s *FlipSettings) SetFinders(val OptFinderType) {
	s.Finders = val
}

// SetFastMode sets the value of FastMode.
func (s *FlipSettings) SetFastMode(val OptBool) {
	s.FastMode = val
}

// SetChanger sets the value of Changer.
func (s *FlipSettings) SetChanger(val OptNilString) {
	s.Changer = val
}

// SetOnlyBin sets the value of OnlyBin.
func (s *FlipSettings) SetOnlyBin(val OptBool) {
	s.OnlyBin = val
}

// SetWhitelistAftermain sets the value of WhitelistAftermain.
func (s *FlipSettings) SetWhitelistAftermain(val OptBool) {
	s.WhitelistAftermain = val
}

// SetMinProfit sets the value of MinProfit.
func (s *FlipSettings) SetMinProfit(val OptInt64) {
	s.MinProfit = val
}

// SetMinProfitPercent sets the value of MinProfitPercent.
func (s *FlipSettings) SetMinProfitPercent(val OptInt32) {
	s.MinProfitPercent = val
}

// SetMinVolume sets the value of MinVolume.
func (s *FlipSettings) SetMinVolume(val OptFloat64) {
	s.MinVolume = val
}

// SetMaxCost sets the value of MaxCost.
func (s *FlipSettings) SetMaxCost(val OptInt64) {
	s.MaxCost = val
}

// SetLastChange sets the value of LastChange.
func (s *FlipSettings) SetLastChange(val OptNilString) {
	s.LastChange = val
}

type FlipSettingsFilters struct{}

// Ref: #/components/schemas/FlipSumary
type FlipSumary struct {
	Flips       OptNilFlipDetailsArray `json:"flips"`
	TotalProfit OptInt64               `json:"totalProfit"`
}

// GetFlips returns the value of Flips.
func (s *FlipSumary) GetFlips() OptNilFlipDetailsArray {
	return s.Flips
}

// GetTotalProfit returns the value of TotalProfit.
func (s *FlipSumary) GetTotalProfit() OptInt64 {
	return s.TotalProfit
}

// SetFlips sets the value of Flips.
func (s *FlipSumary) SetFlips(val OptNilFlipDetailsArray) {
	s.Flips = val
}

// SetTotalProfit sets the value of TotalProfit.
func (s *FlipSumary) SetTotalProfit(val OptInt64) {
	s.TotalProfit = val
}

// Ref: #/components/schemas/GraphResult
type GraphResult struct {
	MaxBuy         OptFloat32  `json:"maxBuy"`
	MaxSell        OptFloat32  `json:"maxSell"`
	MinBuy         OptFloat32  `json:"minBuy"`
	MinSell        OptFloat32  `json:"minSell"`
	Buy            OptFloat64  `json:"buy"`
	Sell           OptFloat64  `json:"sell"`
	SellVolume     OptInt64    `json:"sellVolume"`
	BuyVolume      OptInt64    `json:"buyVolume"`
	Timestamp      OptDateTime `json:"timestamp"`
	BuyMovingWeek  OptInt64    `json:"buyMovingWeek"`
	SellMovingWeek OptInt64    `json:"sellMovingWeek"`
}

// GetMaxBuy returns the value of MaxBuy.
func (s *GraphResult) GetMaxBuy() OptFloat32 {
	return s.MaxBuy
}

// GetMaxSell returns the value of MaxSell.
func (s *GraphResult) GetMaxSell() OptFloat32 {
	return s.MaxSell
}

// GetMinBuy returns the value of MinBuy.
func (s *GraphResult) GetMinBuy() OptFloat32 {
	return s.MinBuy
}

// GetMinSell returns the value of MinSell.
func (s *GraphResult) GetMinSell() OptFloat32 {
	return s.MinSell
}

// GetBuy returns the value of Buy.
func (s *GraphResult) GetBuy() OptFloat64 {
	return s.Buy
}

// GetSell returns the value of Sell.
func (s *GraphResult) GetSell() OptFloat64 {
	return s.Sell
}

// GetSellVolume returns the value of SellVolume.
func (s *GraphResult) GetSellVolume() OptInt64 {
	return s.SellVolume
}

// GetBuyVolume returns the value of BuyVolume.
func (s *GraphResult) GetBuyVolume() OptInt64 {
	return s.BuyVolume
}

// GetTimestamp returns the value of Timestamp.
func (s *GraphResult) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// GetBuyMovingWeek returns the value of BuyMovingWeek.
func (s *GraphResult) GetBuyMovingWeek() OptInt64 {
	return s.BuyMovingWeek
}

// GetSellMovingWeek returns the value of SellMovingWeek.
func (s *GraphResult) GetSellMovingWeek() OptInt64 {
	return s.SellMovingWeek
}

// SetMaxBuy sets the value of MaxBuy.
func (s *GraphResult) SetMaxBuy(val OptFloat32) {
	s.MaxBuy = val
}

// SetMaxSell sets the value of MaxSell.
func (s *GraphResult) SetMaxSell(val OptFloat32) {
	s.MaxSell = val
}

// SetMinBuy sets the value of MinBuy.
func (s *GraphResult) SetMinBuy(val OptFloat32) {
	s.MinBuy = val
}

// SetMinSell sets the value of MinSell.
func (s *GraphResult) SetMinSell(val OptFloat32) {
	s.MinSell = val
}

// SetBuy sets the value of Buy.
func (s *GraphResult) SetBuy(val OptFloat64) {
	s.Buy = val
}

// SetSell sets the value of Sell.
func (s *GraphResult) SetSell(val OptFloat64) {
	s.Sell = val
}

// SetSellVolume sets the value of SellVolume.
func (s *GraphResult) SetSellVolume(val OptInt64) {
	s.SellVolume = val
}

// SetBuyVolume sets the value of BuyVolume.
func (s *GraphResult) SetBuyVolume(val OptInt64) {
	s.BuyVolume = val
}

// SetTimestamp sets the value of Timestamp.
func (s *GraphResult) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// SetBuyMovingWeek sets the value of BuyMovingWeek.
func (s *GraphResult) SetBuyMovingWeek(val OptInt64) {
	s.BuyMovingWeek = val
}

// SetSellMovingWeek sets the value of SellMovingWeek.
func (s *GraphResult) SetSellMovingWeek(val OptInt64) {
	s.SellMovingWeek = val
}

// Ref: #/components/schemas/Ingredient
type Ingredient struct {
	ItemId OptNilString `json:"itemId"`
	Count  OptInt32     `json:"count"`
	Cost   OptFloat64   `json:"cost"`
}

// GetItemId returns the value of ItemId.
func (s *Ingredient) GetItemId() OptNilString {
	return s.ItemId
}

// GetCount returns the value of Count.
func (s *Ingredient) GetCount() OptInt32 {
	return s.Count
}

// GetCost returns the value of Cost.
func (s *Ingredient) GetCost() OptFloat64 {
	return s.Cost
}

// SetItemId sets the value of ItemId.
func (s *Ingredient) SetItemId(val OptNilString) {
	s.ItemId = val
}

// SetCount sets the value of Count.
func (s *Ingredient) SetCount(val OptInt32) {
	s.Count = val
}

// SetCost sets the value of Cost.
func (s *Ingredient) SetCost(val OptFloat64) {
	s.Cost = val
}

// Ref: #/components/schemas/Int32Int64ValueTuple
type Int32Int64ValueTuple struct {
	Item1 OptInt32 `json:"item1"`
	Item2 OptInt64 `json:"item2"`
}

// GetItem1 returns the value of Item1.
func (s *Int32Int64ValueTuple) GetItem1() OptInt32 {
	return s.Item1
}

// GetItem2 returns the value of Item2.
func (s *Int32Int64ValueTuple) GetItem2() OptInt64 {
	return s.Item2
}

// SetItem1 sets the value of Item1.
func (s *Int32Int64ValueTuple) SetItem1(val OptInt32) {
	s.Item1 = val
}

// SetItem2 sets the value of Item2.
func (s *Int32Int64ValueTuple) SetItem2(val OptInt64) {
	s.Item2 = val
}

// Ref: #/components/schemas/InventoryBatchLookup
type InventoryBatchLookup struct {
	ProfileId OptNilString      `json:"profileId"`
	PlayerId  OptNilString      `json:"playerId"`
	Uuids     OptNilStringArray `json:"uuids"`
}

// GetProfileId returns the value of ProfileId.
func (s *InventoryBatchLookup) GetProfileId() OptNilString {
	return s.ProfileId
}

// GetPlayerId returns the value of PlayerId.
func (s *InventoryBatchLookup) GetPlayerId() OptNilString {
	return s.PlayerId
}

// GetUuids returns the value of Uuids.
func (s *InventoryBatchLookup) GetUuids() OptNilStringArray {
	return s.Uuids
}

// SetProfileId sets the value of ProfileId.
func (s *InventoryBatchLookup) SetProfileId(val OptNilString) {
	s.ProfileId = val
}

// SetPlayerId sets the value of PlayerId.
func (s *InventoryBatchLookup) SetPlayerId(val OptNilString) {
	s.PlayerId = val
}

// SetUuids sets the value of Uuids.
func (s *InventoryBatchLookup) SetUuids(val OptNilStringArray) {
	s.Uuids = val
}

// Representation of an inventory.
// Ref: #/components/schemas/InventoryData
type InventoryData struct {
	// The name of the chest.
	ChestName OptNilString `json:"chestName"`
	// Base64, gziped nbtdata of the inventory.
	FullInventoryNbt OptNilString          `json:"fullInventoryNbt"`
	Settings         OptDescriptionSetting `json:"settings"`
}

// GetChestName returns the value of ChestName.
func (s *InventoryData) GetChestName() OptNilString {
	return s.ChestName
}

// GetFullInventoryNbt returns the value of FullInventoryNbt.
func (s *InventoryData) GetFullInventoryNbt() OptNilString {
	return s.FullInventoryNbt
}

// GetSettings returns the value of Settings.
func (s *InventoryData) GetSettings() OptDescriptionSetting {
	return s.Settings
}

// SetChestName sets the value of ChestName.
func (s *InventoryData) SetChestName(val OptNilString) {
	s.ChestName = val
}

// SetFullInventoryNbt sets the value of FullInventoryNbt.
func (s *InventoryData) SetFullInventoryNbt(val OptNilString) {
	s.FullInventoryNbt = val
}

// SetSettings sets the value of Settings.
func (s *InventoryData) SetSettings(val OptDescriptionSetting) {
	s.Settings = val
}

// Ref: #/components/schemas/ItemCategory
type ItemCategory string

const (
	ItemCategoryUNKNOWN            ItemCategory = "UNKNOWN"
	ItemCategoryPETITEM            ItemCategory = "PET_ITEM"
	ItemCategorySWORD              ItemCategory = "SWORD"
	ItemCategoryCHESTPLATE         ItemCategory = "CHESTPLATE"
	ItemCategoryHELMET             ItemCategory = "HELMET"
	ItemCategoryREFORGESTONE       ItemCategory = "REFORGE_STONE"
	ItemCategoryCOSMETIC           ItemCategory = "COSMETIC"
	ItemCategoryAXE                ItemCategory = "AXE"
	ItemCategoryLEGGINGS           ItemCategory = "LEGGINGS"
	ItemCategoryACCESSORY          ItemCategory = "ACCESSORY"
	ItemCategoryBOW                ItemCategory = "BOW"
	ItemCategoryTRAVELSCROLL       ItemCategory = "TRAVEL_SCROLL"
	ItemCategoryBOOTS              ItemCategory = "BOOTS"
	ItemCategoryHOE                ItemCategory = "HOE"
	ItemCategoryBAIT               ItemCategory = "BAIT"
	ItemCategoryFISHINGROD         ItemCategory = "FISHING_ROD"
	ItemCategoryDUNGEONPASS        ItemCategory = "DUNGEON_PASS"
	ItemCategoryARROW              ItemCategory = "ARROW"
	ItemCategorySPADE              ItemCategory = "SPADE"
	ItemCategorySHEARS             ItemCategory = "SHEARS"
	ItemCategoryPICKAXE            ItemCategory = "PICKAXE"
	ItemCategoryARROWPOISON        ItemCategory = "ARROW_POISON"
	ItemCategoryWAND               ItemCategory = "WAND"
	ItemCategoryDRILL              ItemCategory = "DRILL"
	ItemCategoryFISHINGWEAPON      ItemCategory = "FISHING_WEAPON"
	ItemCategoryGAUNTLET           ItemCategory = "GAUNTLET"
	ItemCategoryFURNITURE          ItemCategory = "FURNITURE"
	ItemCategoryGENERATOR          ItemCategory = "GENERATOR"
	ItemCategoryMINIONSKIN         ItemCategory = "MINION_SKIN"
	ItemCategoryPRIVATEISLAND      ItemCategory = "PRIVATE_ISLAND"
	ItemCategoryISLANDCRYSTAL      ItemCategory = "ISLAND_CRYSTAL"
	ItemCategoryFRAGMENT           ItemCategory = "FRAGMENT"
	ItemCategorySLAYER             ItemCategory = "SLAYER"
	ItemCategoryDUNGEON            ItemCategory = "DUNGEON"
	ItemCategoryDUNGEONITEM        ItemCategory = "DUNGEON_ITEM"
	ItemCategorySACK               ItemCategory = "SACK"
	ItemCategoryPORTAL             ItemCategory = "PORTAL"
	ItemCategoryDEEPCAVERNS        ItemCategory = "DEEP_CAVERNS"
	ItemCategoryBACKPACK           ItemCategory = "BACKPACK"
	ItemCategoryTALISMANENRICHMENT ItemCategory = "TALISMAN_ENRICHMENT"
	ItemCategoryTHEFISH            ItemCategory = "THE_FISH"
	ItemCategoryPET                ItemCategory = "PET"
	ItemCategoryPETSKIN            ItemCategory = "PET_SKIN"
	ItemCategoryRUNE               ItemCategory = "RUNE"
	ItemCategoryArmorDye           ItemCategory = "ArmorDye"
	ItemCategoryVanilla            ItemCategory = "Vanilla"
	ItemCategoryNullNamed          ItemCategory = "NullNamed"
	ItemCategoryCLOAK              ItemCategory = "CLOAK"
	ItemCategoryNECKLACE           ItemCategory = "NECKLACE"
	ItemCategoryBELT               ItemCategory = "BELT"
	ItemCategoryGLOVES             ItemCategory = "GLOVES"
	ItemCategoryBRACELET           ItemCategory = "BRACELET"
)

// MarshalText implements encoding.TextMarshaler.
func (s ItemCategory) MarshalText() ([]byte, error) {
	switch s {
	case ItemCategoryUNKNOWN:
		return []byte(s), nil
	case ItemCategoryPETITEM:
		return []byte(s), nil
	case ItemCategorySWORD:
		return []byte(s), nil
	case ItemCategoryCHESTPLATE:
		return []byte(s), nil
	case ItemCategoryHELMET:
		return []byte(s), nil
	case ItemCategoryREFORGESTONE:
		return []byte(s), nil
	case ItemCategoryCOSMETIC:
		return []byte(s), nil
	case ItemCategoryAXE:
		return []byte(s), nil
	case ItemCategoryLEGGINGS:
		return []byte(s), nil
	case ItemCategoryACCESSORY:
		return []byte(s), nil
	case ItemCategoryBOW:
		return []byte(s), nil
	case ItemCategoryTRAVELSCROLL:
		return []byte(s), nil
	case ItemCategoryBOOTS:
		return []byte(s), nil
	case ItemCategoryHOE:
		return []byte(s), nil
	case ItemCategoryBAIT:
		return []byte(s), nil
	case ItemCategoryFISHINGROD:
		return []byte(s), nil
	case ItemCategoryDUNGEONPASS:
		return []byte(s), nil
	case ItemCategoryARROW:
		return []byte(s), nil
	case ItemCategorySPADE:
		return []byte(s), nil
	case ItemCategorySHEARS:
		return []byte(s), nil
	case ItemCategoryPICKAXE:
		return []byte(s), nil
	case ItemCategoryARROWPOISON:
		return []byte(s), nil
	case ItemCategoryWAND:
		return []byte(s), nil
	case ItemCategoryDRILL:
		return []byte(s), nil
	case ItemCategoryFISHINGWEAPON:
		return []byte(s), nil
	case ItemCategoryGAUNTLET:
		return []byte(s), nil
	case ItemCategoryFURNITURE:
		return []byte(s), nil
	case ItemCategoryGENERATOR:
		return []byte(s), nil
	case ItemCategoryMINIONSKIN:
		return []byte(s), nil
	case ItemCategoryPRIVATEISLAND:
		return []byte(s), nil
	case ItemCategoryISLANDCRYSTAL:
		return []byte(s), nil
	case ItemCategoryFRAGMENT:
		return []byte(s), nil
	case ItemCategorySLAYER:
		return []byte(s), nil
	case ItemCategoryDUNGEON:
		return []byte(s), nil
	case ItemCategoryDUNGEONITEM:
		return []byte(s), nil
	case ItemCategorySACK:
		return []byte(s), nil
	case ItemCategoryPORTAL:
		return []byte(s), nil
	case ItemCategoryDEEPCAVERNS:
		return []byte(s), nil
	case ItemCategoryBACKPACK:
		return []byte(s), nil
	case ItemCategoryTALISMANENRICHMENT:
		return []byte(s), nil
	case ItemCategoryTHEFISH:
		return []byte(s), nil
	case ItemCategoryPET:
		return []byte(s), nil
	case ItemCategoryPETSKIN:
		return []byte(s), nil
	case ItemCategoryRUNE:
		return []byte(s), nil
	case ItemCategoryArmorDye:
		return []byte(s), nil
	case ItemCategoryVanilla:
		return []byte(s), nil
	case ItemCategoryNullNamed:
		return []byte(s), nil
	case ItemCategoryCLOAK:
		return []byte(s), nil
	case ItemCategoryNECKLACE:
		return []byte(s), nil
	case ItemCategoryBELT:
		return []byte(s), nil
	case ItemCategoryGLOVES:
		return []byte(s), nil
	case ItemCategoryBRACELET:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ItemCategory) UnmarshalText(data []byte) error {
	switch ItemCategory(data) {
	case ItemCategoryUNKNOWN:
		*s = ItemCategoryUNKNOWN
		return nil
	case ItemCategoryPETITEM:
		*s = ItemCategoryPETITEM
		return nil
	case ItemCategorySWORD:
		*s = ItemCategorySWORD
		return nil
	case ItemCategoryCHESTPLATE:
		*s = ItemCategoryCHESTPLATE
		return nil
	case ItemCategoryHELMET:
		*s = ItemCategoryHELMET
		return nil
	case ItemCategoryREFORGESTONE:
		*s = ItemCategoryREFORGESTONE
		return nil
	case ItemCategoryCOSMETIC:
		*s = ItemCategoryCOSMETIC
		return nil
	case ItemCategoryAXE:
		*s = ItemCategoryAXE
		return nil
	case ItemCategoryLEGGINGS:
		*s = ItemCategoryLEGGINGS
		return nil
	case ItemCategoryACCESSORY:
		*s = ItemCategoryACCESSORY
		return nil
	case ItemCategoryBOW:
		*s = ItemCategoryBOW
		return nil
	case ItemCategoryTRAVELSCROLL:
		*s = ItemCategoryTRAVELSCROLL
		return nil
	case ItemCategoryBOOTS:
		*s = ItemCategoryBOOTS
		return nil
	case ItemCategoryHOE:
		*s = ItemCategoryHOE
		return nil
	case ItemCategoryBAIT:
		*s = ItemCategoryBAIT
		return nil
	case ItemCategoryFISHINGROD:
		*s = ItemCategoryFISHINGROD
		return nil
	case ItemCategoryDUNGEONPASS:
		*s = ItemCategoryDUNGEONPASS
		return nil
	case ItemCategoryARROW:
		*s = ItemCategoryARROW
		return nil
	case ItemCategorySPADE:
		*s = ItemCategorySPADE
		return nil
	case ItemCategorySHEARS:
		*s = ItemCategorySHEARS
		return nil
	case ItemCategoryPICKAXE:
		*s = ItemCategoryPICKAXE
		return nil
	case ItemCategoryARROWPOISON:
		*s = ItemCategoryARROWPOISON
		return nil
	case ItemCategoryWAND:
		*s = ItemCategoryWAND
		return nil
	case ItemCategoryDRILL:
		*s = ItemCategoryDRILL
		return nil
	case ItemCategoryFISHINGWEAPON:
		*s = ItemCategoryFISHINGWEAPON
		return nil
	case ItemCategoryGAUNTLET:
		*s = ItemCategoryGAUNTLET
		return nil
	case ItemCategoryFURNITURE:
		*s = ItemCategoryFURNITURE
		return nil
	case ItemCategoryGENERATOR:
		*s = ItemCategoryGENERATOR
		return nil
	case ItemCategoryMINIONSKIN:
		*s = ItemCategoryMINIONSKIN
		return nil
	case ItemCategoryPRIVATEISLAND:
		*s = ItemCategoryPRIVATEISLAND
		return nil
	case ItemCategoryISLANDCRYSTAL:
		*s = ItemCategoryISLANDCRYSTAL
		return nil
	case ItemCategoryFRAGMENT:
		*s = ItemCategoryFRAGMENT
		return nil
	case ItemCategorySLAYER:
		*s = ItemCategorySLAYER
		return nil
	case ItemCategoryDUNGEON:
		*s = ItemCategoryDUNGEON
		return nil
	case ItemCategoryDUNGEONITEM:
		*s = ItemCategoryDUNGEONITEM
		return nil
	case ItemCategorySACK:
		*s = ItemCategorySACK
		return nil
	case ItemCategoryPORTAL:
		*s = ItemCategoryPORTAL
		return nil
	case ItemCategoryDEEPCAVERNS:
		*s = ItemCategoryDEEPCAVERNS
		return nil
	case ItemCategoryBACKPACK:
		*s = ItemCategoryBACKPACK
		return nil
	case ItemCategoryTALISMANENRICHMENT:
		*s = ItemCategoryTALISMANENRICHMENT
		return nil
	case ItemCategoryTHEFISH:
		*s = ItemCategoryTHEFISH
		return nil
	case ItemCategoryPET:
		*s = ItemCategoryPET
		return nil
	case ItemCategoryPETSKIN:
		*s = ItemCategoryPETSKIN
		return nil
	case ItemCategoryRUNE:
		*s = ItemCategoryRUNE
		return nil
	case ItemCategoryArmorDye:
		*s = ItemCategoryArmorDye
		return nil
	case ItemCategoryVanilla:
		*s = ItemCategoryVanilla
		return nil
	case ItemCategoryNullNamed:
		*s = ItemCategoryNullNamed
		return nil
	case ItemCategoryCLOAK:
		*s = ItemCategoryCLOAK
		return nil
	case ItemCategoryNECKLACE:
		*s = ItemCategoryNECKLACE
		return nil
	case ItemCategoryBELT:
		*s = ItemCategoryBELT
		return nil
	case ItemCategoryGLOVES:
		*s = ItemCategoryGLOVES
		return nil
	case ItemCategoryBRACELET:
		*s = ItemCategoryBRACELET
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ItemFlags
type ItemFlags string

const (
	ItemFlagsNONE      ItemFlags = "NONE"
	ItemFlagsBAZAAR    ItemFlags = "BAZAAR"
	ItemFlagsTRADEABLE ItemFlags = "TRADEABLE"
	ItemFlagsAUCTION   ItemFlags = "AUCTION"
	ItemFlagsCRAFT     ItemFlags = "CRAFT"
	ItemFlagsGLOWING   ItemFlags = "GLOWING"
	ItemFlagsMUSEUM    ItemFlags = "MUSEUM"
)

// MarshalText implements encoding.TextMarshaler.
func (s ItemFlags) MarshalText() ([]byte, error) {
	switch s {
	case ItemFlagsNONE:
		return []byte(s), nil
	case ItemFlagsBAZAAR:
		return []byte(s), nil
	case ItemFlagsTRADEABLE:
		return []byte(s), nil
	case ItemFlagsAUCTION:
		return []byte(s), nil
	case ItemFlagsCRAFT:
		return []byte(s), nil
	case ItemFlagsGLOWING:
		return []byte(s), nil
	case ItemFlagsMUSEUM:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ItemFlags) UnmarshalText(data []byte) error {
	switch ItemFlags(data) {
	case ItemFlagsNONE:
		*s = ItemFlagsNONE
		return nil
	case ItemFlagsBAZAAR:
		*s = ItemFlagsBAZAAR
		return nil
	case ItemFlagsTRADEABLE:
		*s = ItemFlagsTRADEABLE
		return nil
	case ItemFlagsAUCTION:
		*s = ItemFlagsAUCTION
		return nil
	case ItemFlagsCRAFT:
		*s = ItemFlagsCRAFT
		return nil
	case ItemFlagsGLOWING:
		*s = ItemFlagsGLOWING
		return nil
	case ItemFlagsMUSEUM:
		*s = ItemFlagsMUSEUM
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Item Metadata.
// Ref: #/components/schemas/ItemMetadataElement
type ItemMetadataElement struct {
	// The name of the element.
	Name OptNilString `json:"name"`
	// The hypixel tag of the item.
	Tag   OptNilString `json:"tag"`
	Flags OptItemFlags `json:"flags"`
}

// GetName returns the value of Name.
func (s *ItemMetadataElement) GetName() OptNilString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *ItemMetadataElement) GetTag() OptNilString {
	return s.Tag
}

// GetFlags returns the value of Flags.
func (s *ItemMetadataElement) GetFlags() OptItemFlags {
	return s.Flags
}

// SetName sets the value of Name.
func (s *ItemMetadataElement) SetName(val OptNilString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *ItemMetadataElement) SetTag(val OptNilString) {
	s.Tag = val
}

// SetFlags sets the value of Flags.
func (s *ItemMetadataElement) SetFlags(val OptItemFlags) {
	s.Flags = val
}

// Ref: #/components/schemas/ItemPreview
type ItemPreview struct {
	Tag  OptNilString `json:"tag"`
	Name OptNilString `json:"name"`
}

// GetTag returns the value of Tag.
func (s *ItemPreview) GetTag() OptNilString {
	return s.Tag
}

// GetName returns the value of Name.
func (s *ItemPreview) GetName() OptNilString {
	return s.Name
}

// SetTag sets the value of Tag.
func (s *ItemPreview) SetTag(val OptNilString) {
	s.Tag = val
}

// SetName sets the value of Name.
func (s *ItemPreview) SetName(val OptNilString) {
	s.Name = val
}

// Lookup element for sold items.
// Ref: #/components/schemas/ItemSell
type ItemSell struct {
	// The minecraft account uuid that sold the item.
	Seller OptNilString `json:"seller"`
	// The hypixel auction uuid for the item.
	UUID OptNilString `json:"uuid"`
	// The minecraft account uuid that bought the item.
	Buyer OptNilString `json:"buyer"`
	// When was the item sold.
	Timestamp OptDateTime `json:"timestamp"`
}

// GetSeller returns the value of Seller.
func (s *ItemSell) GetSeller() OptNilString {
	return s.Seller
}

// GetUUID returns the value of UUID.
func (s *ItemSell) GetUUID() OptNilString {
	return s.UUID
}

// GetBuyer returns the value of Buyer.
func (s *ItemSell) GetBuyer() OptNilString {
	return s.Buyer
}

// GetTimestamp returns the value of Timestamp.
func (s *ItemSell) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// SetSeller sets the value of Seller.
func (s *ItemSell) SetSeller(val OptNilString) {
	s.Seller = val
}

// SetUUID sets the value of UUID.
func (s *ItemSell) SetUUID(val OptNilString) {
	s.UUID = val
}

// SetBuyer sets the value of Buyer.
func (s *ItemSell) SetBuyer(val OptNilString) {
	s.Buyer = val
}

// SetTimestamp sets the value of Timestamp.
func (s *ItemSell) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// Kat pet rarity upgrade flip.
// Ref: #/components/schemas/KatFlip
type KatFlip struct {
	// 24 hour sell volume.
	Volume OptFloat64 `json:"volume"`
	// Median prie of the item.
	Median OptInt64 `json:"median"`
	// The amount of coins the upgrade costs (excluding materials).
	UpgradeCost OptFloat64 `json:"upgradeCost"`
	// The cost for materials at current bazaar/ah rate.
	MaterialCost OptFloat64 `json:"materialCost"`
	// The auction to flip.
	OriginAuction OptNilString      `json:"originAuction"`
	CoreData      OptKatUpgradeCost `json:"coreData"`
	TargetRarity  OptTier           `json:"targetRarity"`
	// The estimated profit the flip will genreate.
	Profit OptFloat64 `json:"profit"`
	// The reference auction used to estimate the profit (lowest bin of higher rarity).
	ReferenceAuction OptNilString `json:"referenceAuction"`
	// How much the starting bid of the auction is.
	PurchaseCost OptInt64 `json:"purchaseCost"`
	// The full name of the origin auction (cotnaining pet level).
	OriginAuctionName OptNilString `json:"originAuctionName"`
}

// GetVolume returns the value of Volume.
func (s *KatFlip) GetVolume() OptFloat64 {
	return s.Volume
}

// GetMedian returns the value of Median.
func (s *KatFlip) GetMedian() OptInt64 {
	return s.Median
}

// GetUpgradeCost returns the value of UpgradeCost.
func (s *KatFlip) GetUpgradeCost() OptFloat64 {
	return s.UpgradeCost
}

// GetMaterialCost returns the value of MaterialCost.
func (s *KatFlip) GetMaterialCost() OptFloat64 {
	return s.MaterialCost
}

// GetOriginAuction returns the value of OriginAuction.
func (s *KatFlip) GetOriginAuction() OptNilString {
	return s.OriginAuction
}

// GetCoreData returns the value of CoreData.
func (s *KatFlip) GetCoreData() OptKatUpgradeCost {
	return s.CoreData
}

// GetTargetRarity returns the value of TargetRarity.
func (s *KatFlip) GetTargetRarity() OptTier {
	return s.TargetRarity
}

// GetProfit returns the value of Profit.
func (s *KatFlip) GetProfit() OptFloat64 {
	return s.Profit
}

// GetReferenceAuction returns the value of ReferenceAuction.
func (s *KatFlip) GetReferenceAuction() OptNilString {
	return s.ReferenceAuction
}

// GetPurchaseCost returns the value of PurchaseCost.
func (s *KatFlip) GetPurchaseCost() OptInt64 {
	return s.PurchaseCost
}

// GetOriginAuctionName returns the value of OriginAuctionName.
func (s *KatFlip) GetOriginAuctionName() OptNilString {
	return s.OriginAuctionName
}

// SetVolume sets the value of Volume.
func (s *KatFlip) SetVolume(val OptFloat64) {
	s.Volume = val
}

// SetMedian sets the value of Median.
func (s *KatFlip) SetMedian(val OptInt64) {
	s.Median = val
}

// SetUpgradeCost sets the value of UpgradeCost.
func (s *KatFlip) SetUpgradeCost(val OptFloat64) {
	s.UpgradeCost = val
}

// SetMaterialCost sets the value of MaterialCost.
func (s *KatFlip) SetMaterialCost(val OptFloat64) {
	s.MaterialCost = val
}

// SetOriginAuction sets the value of OriginAuction.
func (s *KatFlip) SetOriginAuction(val OptNilString) {
	s.OriginAuction = val
}

// SetCoreData sets the value of CoreData.
func (s *KatFlip) SetCoreData(val OptKatUpgradeCost) {
	s.CoreData = val
}

// SetTargetRarity sets the value of TargetRarity.
func (s *KatFlip) SetTargetRarity(val OptTier) {
	s.TargetRarity = val
}

// SetProfit sets the value of Profit.
func (s *KatFlip) SetProfit(val OptFloat64) {
	s.Profit = val
}

// SetReferenceAuction sets the value of ReferenceAuction.
func (s *KatFlip) SetReferenceAuction(val OptNilString) {
	s.ReferenceAuction = val
}

// SetPurchaseCost sets the value of PurchaseCost.
func (s *KatFlip) SetPurchaseCost(val OptInt64) {
	s.PurchaseCost = val
}

// SetOriginAuctionName sets the value of OriginAuctionName.
func (s *KatFlip) SetOriginAuctionName(val OptNilString) {
	s.OriginAuctionName = val
}

// Information on requirements to upgrade a pet to another rarity.
// Ref: #/components/schemas/KatUpgradeCost
type KatUpgradeCost struct {
	// The name of the pet.
	Name       OptNilString `json:"name"`
	BaseRarity OptTier      `json:"baseRarity"`
	// Time it takes to upgrade.
	Hours OptInt32 `json:"hours"`
	// Base cost of coins it takes to do the upgrade.
	Cost OptInt32 `json:"cost"`
	// Material (if any) required to upgrade.
	Material OptNilString `json:"material"`
	// Amount of Coflnet.Sky.Api.Models.KatUpgradeCost.Material required to do the upgrade.
	Amount OptInt32 `json:"amount"`
	// Coflnet Item tag for the Pet.
	ItemTag OptNilString `json:"itemTag"`
}

// GetName returns the value of Name.
func (s *KatUpgradeCost) GetName() OptNilString {
	return s.Name
}

// GetBaseRarity returns the value of BaseRarity.
func (s *KatUpgradeCost) GetBaseRarity() OptTier {
	return s.BaseRarity
}

// GetHours returns the value of Hours.
func (s *KatUpgradeCost) GetHours() OptInt32 {
	return s.Hours
}

// GetCost returns the value of Cost.
func (s *KatUpgradeCost) GetCost() OptInt32 {
	return s.Cost
}

// GetMaterial returns the value of Material.
func (s *KatUpgradeCost) GetMaterial() OptNilString {
	return s.Material
}

// GetAmount returns the value of Amount.
func (s *KatUpgradeCost) GetAmount() OptInt32 {
	return s.Amount
}

// GetItemTag returns the value of ItemTag.
func (s *KatUpgradeCost) GetItemTag() OptNilString {
	return s.ItemTag
}

// SetName sets the value of Name.
func (s *KatUpgradeCost) SetName(val OptNilString) {
	s.Name = val
}

// SetBaseRarity sets the value of BaseRarity.
func (s *KatUpgradeCost) SetBaseRarity(val OptTier) {
	s.BaseRarity = val
}

// SetHours sets the value of Hours.
func (s *KatUpgradeCost) SetHours(val OptInt32) {
	s.Hours = val
}

// SetCost sets the value of Cost.
func (s *KatUpgradeCost) SetCost(val OptInt32) {
	s.Cost = val
}

// SetMaterial sets the value of Material.
func (s *KatUpgradeCost) SetMaterial(val OptNilString) {
	s.Material = val
}

// SetAmount sets the value of Amount.
func (s *KatUpgradeCost) SetAmount(val OptInt32) {
	s.Amount = val
}

// SetItemTag sets the value of ItemTag.
func (s *KatUpgradeCost) SetItemTag(val OptNilString) {
	s.ItemTag = val
}

// Ref: #/components/schemas/ListEntry
type ListEntry struct {
	Tag         OptNilString       `json:"tag"`
	DisplayName OptNilString       `json:"displayName"`
	Filter      OptListEntryFilter `json:"filter"`
	Tags        OptNilStringArray  `json:"tags"`
	Order       OptInt32           `json:"order"`
	Group       OptNilString       `json:"group"`
}

// GetTag returns the value of Tag.
func (s *ListEntry) GetTag() OptNilString {
	return s.Tag
}

// GetDisplayName returns the value of DisplayName.
func (s *ListEntry) GetDisplayName() OptNilString {
	return s.DisplayName
}

// GetFilter returns the value of Filter.
func (s *ListEntry) GetFilter() OptListEntryFilter {
	return s.Filter
}

// GetTags returns the value of Tags.
func (s *ListEntry) GetTags() OptNilStringArray {
	return s.Tags
}

// GetOrder returns the value of Order.
func (s *ListEntry) GetOrder() OptInt32 {
	return s.Order
}

// GetGroup returns the value of Group.
func (s *ListEntry) GetGroup() OptNilString {
	return s.Group
}

// SetTag sets the value of Tag.
func (s *ListEntry) SetTag(val OptNilString) {
	s.Tag = val
}

// SetDisplayName sets the value of DisplayName.
func (s *ListEntry) SetDisplayName(val OptNilString) {
	s.DisplayName = val
}

// SetFilter sets the value of Filter.
func (s *ListEntry) SetFilter(val OptListEntryFilter) {
	s.Filter = val
}

// SetTags sets the value of Tags.
func (s *ListEntry) SetTags(val OptNilStringArray) {
	s.Tags = val
}

// SetOrder sets the value of Order.
func (s *ListEntry) SetOrder(val OptInt32) {
	s.Order = val
}

// SetGroup sets the value of Group.
func (s *ListEntry) SetGroup(val OptNilString) {
	s.Group = val
}

type ListEntryFilter struct{}

// Ref: #/components/schemas/ModSettings
type ModSettings struct {
	JustProfit       OptBool      `json:"justProfit"`
	SoundOnFlip      OptBool      `json:"soundOnFlip"`
	ShortNumbers     OptBool      `json:"shortNumbers"`
	BlockTenSecMsg   OptBool      `json:"blockTenSecMsg"`
	Format           OptNilString `json:"format"`
	Chat             OptBool      `json:"chat"`
	Countdown        OptBool      `json:"countdown"`
	HideNoBestFlip   OptBool      `json:"hideNoBestFlip"`
	TimerX           OptInt32     `json:"timerX"`
	TimerY           OptInt32     `json:"timerY"`
	TimerSeconds     OptInt32     `json:"timerSeconds"`
	TimerScale       OptFloat32   `json:"timerScale"`
	TimerPrefix      OptNilString `json:"timerPrefix"`
	TimerPrecision   OptInt32     `json:"timerPrecision"`
	BlockedMsg       OptInt32     `json:"blockedMsg"`
	NoAdjustToPurse  OptBool      `json:"noAdjustToPurse"`
	NoBedDelay       OptBool      `json:"noBedDelay"`
	StreamerMode     OptBool      `json:"streamerMode"`
	AutoStartFlipper OptBool      `json:"autoStartFlipper"`
	NormalSoldFlips  OptBool      `json:"normalSoldFlips"`
}

// GetJustProfit returns the value of JustProfit.
func (s *ModSettings) GetJustProfit() OptBool {
	return s.JustProfit
}

// GetSoundOnFlip returns the value of SoundOnFlip.
func (s *ModSettings) GetSoundOnFlip() OptBool {
	return s.SoundOnFlip
}

// GetShortNumbers returns the value of ShortNumbers.
func (s *ModSettings) GetShortNumbers() OptBool {
	return s.ShortNumbers
}

// GetBlockTenSecMsg returns the value of BlockTenSecMsg.
func (s *ModSettings) GetBlockTenSecMsg() OptBool {
	return s.BlockTenSecMsg
}

// GetFormat returns the value of Format.
func (s *ModSettings) GetFormat() OptNilString {
	return s.Format
}

// GetChat returns the value of Chat.
func (s *ModSettings) GetChat() OptBool {
	return s.Chat
}

// GetCountdown returns the value of Countdown.
func (s *ModSettings) GetCountdown() OptBool {
	return s.Countdown
}

// GetHideNoBestFlip returns the value of HideNoBestFlip.
func (s *ModSettings) GetHideNoBestFlip() OptBool {
	return s.HideNoBestFlip
}

// GetTimerX returns the value of TimerX.
func (s *ModSettings) GetTimerX() OptInt32 {
	return s.TimerX
}

// GetTimerY returns the value of TimerY.
func (s *ModSettings) GetTimerY() OptInt32 {
	return s.TimerY
}

// GetTimerSeconds returns the value of TimerSeconds.
func (s *ModSettings) GetTimerSeconds() OptInt32 {
	return s.TimerSeconds
}

// GetTimerScale returns the value of TimerScale.
func (s *ModSettings) GetTimerScale() OptFloat32 {
	return s.TimerScale
}

// GetTimerPrefix returns the value of TimerPrefix.
func (s *ModSettings) GetTimerPrefix() OptNilString {
	return s.TimerPrefix
}

// GetTimerPrecision returns the value of TimerPrecision.
func (s *ModSettings) GetTimerPrecision() OptInt32 {
	return s.TimerPrecision
}

// GetBlockedMsg returns the value of BlockedMsg.
func (s *ModSettings) GetBlockedMsg() OptInt32 {
	return s.BlockedMsg
}

// GetNoAdjustToPurse returns the value of NoAdjustToPurse.
func (s *ModSettings) GetNoAdjustToPurse() OptBool {
	return s.NoAdjustToPurse
}

// GetNoBedDelay returns the value of NoBedDelay.
func (s *ModSettings) GetNoBedDelay() OptBool {
	return s.NoBedDelay
}

// GetStreamerMode returns the value of StreamerMode.
func (s *ModSettings) GetStreamerMode() OptBool {
	return s.StreamerMode
}

// GetAutoStartFlipper returns the value of AutoStartFlipper.
func (s *ModSettings) GetAutoStartFlipper() OptBool {
	return s.AutoStartFlipper
}

// GetNormalSoldFlips returns the value of NormalSoldFlips.
func (s *ModSettings) GetNormalSoldFlips() OptBool {
	return s.NormalSoldFlips
}

// SetJustProfit sets the value of JustProfit.
func (s *ModSettings) SetJustProfit(val OptBool) {
	s.JustProfit = val
}

// SetSoundOnFlip sets the value of SoundOnFlip.
func (s *ModSettings) SetSoundOnFlip(val OptBool) {
	s.SoundOnFlip = val
}

// SetShortNumbers sets the value of ShortNumbers.
func (s *ModSettings) SetShortNumbers(val OptBool) {
	s.ShortNumbers = val
}

// SetBlockTenSecMsg sets the value of BlockTenSecMsg.
func (s *ModSettings) SetBlockTenSecMsg(val OptBool) {
	s.BlockTenSecMsg = val
}

// SetFormat sets the value of Format.
func (s *ModSettings) SetFormat(val OptNilString) {
	s.Format = val
}

// SetChat sets the value of Chat.
func (s *ModSettings) SetChat(val OptBool) {
	s.Chat = val
}

// SetCountdown sets the value of Countdown.
func (s *ModSettings) SetCountdown(val OptBool) {
	s.Countdown = val
}

// SetHideNoBestFlip sets the value of HideNoBestFlip.
func (s *ModSettings) SetHideNoBestFlip(val OptBool) {
	s.HideNoBestFlip = val
}

// SetTimerX sets the value of TimerX.
func (s *ModSettings) SetTimerX(val OptInt32) {
	s.TimerX = val
}

// SetTimerY sets the value of TimerY.
func (s *ModSettings) SetTimerY(val OptInt32) {
	s.TimerY = val
}

// SetTimerSeconds sets the value of TimerSeconds.
func (s *ModSettings) SetTimerSeconds(val OptInt32) {
	s.TimerSeconds = val
}

// SetTimerScale sets the value of TimerScale.
func (s *ModSettings) SetTimerScale(val OptFloat32) {
	s.TimerScale = val
}

// SetTimerPrefix sets the value of TimerPrefix.
func (s *ModSettings) SetTimerPrefix(val OptNilString) {
	s.TimerPrefix = val
}

// SetTimerPrecision sets the value of TimerPrecision.
func (s *ModSettings) SetTimerPrecision(val OptInt32) {
	s.TimerPrecision = val
}

// SetBlockedMsg sets the value of BlockedMsg.
func (s *ModSettings) SetBlockedMsg(val OptInt32) {
	s.BlockedMsg = val
}

// SetNoAdjustToPurse sets the value of NoAdjustToPurse.
func (s *ModSettings) SetNoAdjustToPurse(val OptBool) {
	s.NoAdjustToPurse = val
}

// SetNoBedDelay sets the value of NoBedDelay.
func (s *ModSettings) SetNoBedDelay(val OptBool) {
	s.NoBedDelay = val
}

// SetStreamerMode sets the value of StreamerMode.
func (s *ModSettings) SetStreamerMode(val OptBool) {
	s.StreamerMode = val
}

// SetAutoStartFlipper sets the value of AutoStartFlipper.
func (s *ModSettings) SetAutoStartFlipper(val OptBool) {
	s.AutoStartFlipper = val
}

// SetNormalSoldFlips sets the value of NormalSoldFlips.
func (s *ModSettings) SetNormalSoldFlips(val OptBool) {
	s.NormalSoldFlips = val
}

// Defines the type of modification.
// Ref: #/components/schemas/ModType
type ModType string

const (
	ModTypeNONE    ModType = "NONE"
	ModTypeINSERT  ModType = "INSERT"
	ModTypeREPLACE ModType = "REPLACE"
	ModTypeAPPEND  ModType = "APPEND"
	ModTypeDELETE  ModType = "DELETE"
)

// MarshalText implements encoding.TextMarshaler.
func (s ModType) MarshalText() ([]byte, error) {
	switch s {
	case ModTypeNONE:
		return []byte(s), nil
	case ModTypeINSERT:
		return []byte(s), nil
	case ModTypeREPLACE:
		return []byte(s), nil
	case ModTypeAPPEND:
		return []byte(s), nil
	case ModTypeDELETE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ModType) UnmarshalText(data []byte) error {
	switch ModType(data) {
	case ModTypeNONE:
		*s = ModTypeNONE
		return nil
	case ModTypeINSERT:
		*s = ModTypeINSERT
		return nil
	case ModTypeREPLACE:
		*s = ModTypeREPLACE
		return nil
	case ModTypeAPPEND:
		*s = ModTypeAPPEND
		return nil
	case ModTypeDELETE:
		*s = ModTypeDELETE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ModelCandidate
type ModelCandidate struct {
	Key   OptNilString         `json:"key"`
	Name  OptNilString         `json:"name"`
	Perks OptNilModelPerkArray `json:"perks"`
}

// GetKey returns the value of Key.
func (s *ModelCandidate) GetKey() OptNilString {
	return s.Key
}

// GetName returns the value of Name.
func (s *ModelCandidate) GetName() OptNilString {
	return s.Name
}

// GetPerks returns the value of Perks.
func (s *ModelCandidate) GetPerks() OptNilModelPerkArray {
	return s.Perks
}

// SetKey sets the value of Key.
func (s *ModelCandidate) SetKey(val OptNilString) {
	s.Key = val
}

// SetName sets the value of Name.
func (s *ModelCandidate) SetName(val OptNilString) {
	s.Name = val
}

// SetPerks sets the value of Perks.
func (s *ModelCandidate) SetPerks(val OptNilModelPerkArray) {
	s.Perks = val
}

// Ref: #/components/schemas/ModelElectionPeriod
type ModelElectionPeriod struct {
	Candidates OptNilModelCandidateArray `json:"candidates"`
	End        OptNilString              `json:"end"`
	ID         OptNilString              `json:"id"`
	Start      OptNilString              `json:"start"`
	Winner     OptModelCandidate         `json:"winner"`
	Year       OptInt32                  `json:"year"`
}

// GetCandidates returns the value of Candidates.
func (s *ModelElectionPeriod) GetCandidates() OptNilModelCandidateArray {
	return s.Candidates
}

// GetEnd returns the value of End.
func (s *ModelElectionPeriod) GetEnd() OptNilString {
	return s.End
}

// GetID returns the value of ID.
func (s *ModelElectionPeriod) GetID() OptNilString {
	return s.ID
}

// GetStart returns the value of Start.
func (s *ModelElectionPeriod) GetStart() OptNilString {
	return s.Start
}

// GetWinner returns the value of Winner.
func (s *ModelElectionPeriod) GetWinner() OptModelCandidate {
	return s.Winner
}

// GetYear returns the value of Year.
func (s *ModelElectionPeriod) GetYear() OptInt32 {
	return s.Year
}

// SetCandidates sets the value of Candidates.
func (s *ModelElectionPeriod) SetCandidates(val OptNilModelCandidateArray) {
	s.Candidates = val
}

// SetEnd sets the value of End.
func (s *ModelElectionPeriod) SetEnd(val OptNilString) {
	s.End = val
}

// SetID sets the value of ID.
func (s *ModelElectionPeriod) SetID(val OptNilString) {
	s.ID = val
}

// SetStart sets the value of Start.
func (s *ModelElectionPeriod) SetStart(val OptNilString) {
	s.Start = val
}

// SetWinner sets the value of Winner.
func (s *ModelElectionPeriod) SetWinner(val OptModelCandidate) {
	s.Winner = val
}

// SetYear sets the value of Year.
func (s *ModelElectionPeriod) SetYear(val OptInt32) {
	s.Year = val
}

// Ref: #/components/schemas/ModelPerk
type ModelPerk struct {
	Description OptNilString `json:"description"`
	Name        OptNilString `json:"name"`
}

// GetDescription returns the value of Description.
func (s *ModelPerk) GetDescription() OptNilString {
	return s.Description
}

// GetName returns the value of Name.
func (s *ModelPerk) GetName() OptNilString {
	return s.Name
}

// SetDescription sets the value of Description.
func (s *ModelPerk) SetDescription(val OptNilString) {
	s.Description = val
}

// SetName sets the value of Name.
func (s *ModelPerk) SetName(val OptNilString) {
	s.Name = val
}

// Ref: #/components/schemas/NbtData
type NbtData struct {
	Data OptNbtDataData `json:"data"`
}

// GetData returns the value of Data.
func (s *NbtData) GetData() OptNbtDataData {
	return s.Data
}

// SetData sets the value of Data.
func (s *NbtData) SetData(val OptNbtDataData) {
	s.Data = val
}

type NbtDataData struct{}

// NewNilString returns new NilString with value set to v.
func NewNilString(v string) NilString {
	return NilString{
		Value: v,
	}
}

// NilString is nullable string.
type NilString struct {
	Value string
	Null  bool
}

// SetTo sets value to v.
func (o *NilString) SetTo(v string) {
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o NilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o NilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o NilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/OldRefInfo
type OldRefInfo struct {
	RefId         OptNilString `json:"refId"`
	Count         OptInt32     `json:"count"`
	ReceivedTime  OptString    `json:"receivedTime"`
	ReceivedHours OptInt32     `json:"receivedHours"`
	BougthPremium OptInt32     `json:"bougthPremium"`
}

// GetRefId returns the value of RefId.
func (s *OldRefInfo) GetRefId() OptNilString {
	return s.RefId
}

// GetCount returns the value of Count.
func (s *OldRefInfo) GetCount() OptInt32 {
	return s.Count
}

// GetReceivedTime returns the value of ReceivedTime.
func (s *OldRefInfo) GetReceivedTime() OptString {
	return s.ReceivedTime
}

// GetReceivedHours returns the value of ReceivedHours.
func (s *OldRefInfo) GetReceivedHours() OptInt32 {
	return s.ReceivedHours
}

// GetBougthPremium returns the value of BougthPremium.
func (s *OldRefInfo) GetBougthPremium() OptInt32 {
	return s.BougthPremium
}

// SetRefId sets the value of RefId.
func (s *OldRefInfo) SetRefId(val OptNilString) {
	s.RefId = val
}

// SetCount sets the value of Count.
func (s *OldRefInfo) SetCount(val OptInt32) {
	s.Count = val
}

// SetReceivedTime sets the value of ReceivedTime.
func (s *OldRefInfo) SetReceivedTime(val OptString) {
	s.ReceivedTime = val
}

// SetReceivedHours sets the value of ReceivedHours.
func (s *OldRefInfo) SetReceivedHours(val OptInt32) {
	s.ReceivedHours = val
}

// SetBougthPremium sets the value of BougthPremium.
func (s *OldRefInfo) SetBougthPremium(val OptInt32) {
	s.BougthPremium = val
}

// NewOptBinResponse returns new OptBinResponse with value set to v.
func NewOptBinResponse(v BinResponse) OptBinResponse {
	return OptBinResponse{
		Value: v,
		Set:   true,
	}
}

// OptBinResponse is optional BinResponse.
type OptBinResponse struct {
	Value BinResponse
	Set   bool
}

// IsSet returns true if OptBinResponse was set.
func (o OptBinResponse) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBinResponse) Reset() {
	var v BinResponse
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBinResponse) SetTo(v BinResponse) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBinResponse) Get() (v BinResponse, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBinResponse) Or(d BinResponse) BinResponse {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCategory returns new OptCategory with value set to v.
func NewOptCategory(v Category) OptCategory {
	return OptCategory{
		Value: v,
		Set:   true,
	}
}

// OptCategory is optional Category.
type OptCategory struct {
	Value Category
	Set   bool
}

// IsSet returns true if OptCategory was set.
func (o OptCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCategory) Reset() {
	var v Category
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCategory) SetTo(v Category) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCategory) Get() (v Category, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCategory) Or(d Category) Category {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDescriptionSetting returns new OptDescriptionSetting with value set to v.
func NewOptDescriptionSetting(v DescriptionSetting) OptDescriptionSetting {
	return OptDescriptionSetting{
		Value: v,
		Set:   true,
	}
}

// OptDescriptionSetting is optional DescriptionSetting.
type OptDescriptionSetting struct {
	Value DescriptionSetting
	Set   bool
}

// IsSet returns true if OptDescriptionSetting was set.
func (o OptDescriptionSetting) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDescriptionSetting) Reset() {
	var v DescriptionSetting
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDescriptionSetting) SetTo(v DescriptionSetting) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDescriptionSetting) Get() (v DescriptionSetting, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDescriptionSetting) Or(d DescriptionSetting) DescriptionSetting {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptEnchantmentType returns new OptEnchantmentType with value set to v.
func NewOptEnchantmentType(v EnchantmentType) OptEnchantmentType {
	return OptEnchantmentType{
		Value: v,
		Set:   true,
	}
}

// OptEnchantmentType is optional EnchantmentType.
type OptEnchantmentType struct {
	Value EnchantmentType
	Set   bool
}

// IsSet returns true if OptEnchantmentType was set.
func (o OptEnchantmentType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptEnchantmentType) Reset() {
	var v EnchantmentType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptEnchantmentType) SetTo(v EnchantmentType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptEnchantmentType) Get() (v EnchantmentType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptEnchantmentType) Or(d EnchantmentType) EnchantmentType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilterQueryFilters returns new OptFilterQueryFilters with value set to v.
func NewOptFilterQueryFilters(v *FilterQueryFilters) OptFilterQueryFilters {
	return OptFilterQueryFilters{
		Value: v,
		Set:   true,
	}
}

// OptFilterQueryFilters is optional *FilterQueryFilters.
type OptFilterQueryFilters struct {
	Value *FilterQueryFilters
	Set   bool
}

// IsSet returns true if OptFilterQueryFilters was set.
func (o OptFilterQueryFilters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilterQueryFilters) Reset() {
	var v *FilterQueryFilters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilterQueryFilters) SetTo(v *FilterQueryFilters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilterQueryFilters) Get() (v *FilterQueryFilters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilterQueryFilters) Or(d *FilterQueryFilters) *FilterQueryFilters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFilterType returns new OptFilterType with value set to v.
func NewOptFilterType(v FilterType) OptFilterType {
	return OptFilterType{
		Value: v,
		Set:   true,
	}
}

// OptFilterType is optional FilterType.
type OptFilterType struct {
	Value FilterType
	Set   bool
}

// IsSet returns true if OptFilterType was set.
func (o OptFilterType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFilterType) Reset() {
	var v FilterType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFilterType) SetTo(v FilterType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFilterType) Get() (v FilterType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFilterType) Or(d FilterType) FilterType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFinderType returns new OptFinderType with value set to v.
func NewOptFinderType(v FinderType) OptFinderType {
	return OptFinderType{
		Value: v,
		Set:   true,
	}
}

// OptFinderType is optional FinderType.
type OptFinderType struct {
	Value FinderType
	Set   bool
}

// IsSet returns true if OptFinderType was set.
func (o OptFinderType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFinderType) Reset() {
	var v FinderType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFinderType) SetTo(v FinderType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFinderType) Get() (v FinderType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFinderType) Or(d FinderType) FinderType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFlipSettingsFilters returns new OptFlipSettingsFilters with value set to v.
func NewOptFlipSettingsFilters(v *FlipSettingsFilters) OptFlipSettingsFilters {
	return OptFlipSettingsFilters{
		Value: v,
		Set:   true,
	}
}

// OptFlipSettingsFilters is optional *FlipSettingsFilters.
type OptFlipSettingsFilters struct {
	Value *FlipSettingsFilters
	Set   bool
}

// IsSet returns true if OptFlipSettingsFilters was set.
func (o OptFlipSettingsFilters) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFlipSettingsFilters) Reset() {
	var v *FlipSettingsFilters
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFlipSettingsFilters) SetTo(v *FlipSettingsFilters) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFlipSettingsFilters) Get() (v *FlipSettingsFilters, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFlipSettingsFilters) Or(d *FlipSettingsFilters) *FlipSettingsFilters {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat32 returns new OptFloat32 with value set to v.
func NewOptFloat32(v float32) OptFloat32 {
	return OptFloat32{
		Value: v,
		Set:   true,
	}
}

// OptFloat32 is optional float32.
type OptFloat32 struct {
	Value float32
	Set   bool
}

// IsSet returns true if OptFloat32 was set.
func (o OptFloat32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat32) Reset() {
	var v float32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat32) SetTo(v float32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat32) Get() (v float32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat32) Or(d float32) float32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptItemCategory returns new OptItemCategory with value set to v.
func NewOptItemCategory(v ItemCategory) OptItemCategory {
	return OptItemCategory{
		Value: v,
		Set:   true,
	}
}

// OptItemCategory is optional ItemCategory.
type OptItemCategory struct {
	Value ItemCategory
	Set   bool
}

// IsSet returns true if OptItemCategory was set.
func (o OptItemCategory) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptItemCategory) Reset() {
	var v ItemCategory
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptItemCategory) SetTo(v ItemCategory) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptItemCategory) Get() (v ItemCategory, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptItemCategory) Or(d ItemCategory) ItemCategory {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptItemFlags returns new OptItemFlags with value set to v.
func NewOptItemFlags(v ItemFlags) OptItemFlags {
	return OptItemFlags{
		Value: v,
		Set:   true,
	}
}

// OptItemFlags is optional ItemFlags.
type OptItemFlags struct {
	Value ItemFlags
	Set   bool
}

// IsSet returns true if OptItemFlags was set.
func (o OptItemFlags) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptItemFlags) Reset() {
	var v ItemFlags
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptItemFlags) SetTo(v ItemFlags) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptItemFlags) Get() (v ItemFlags, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptItemFlags) Or(d ItemFlags) ItemFlags {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptKatUpgradeCost returns new OptKatUpgradeCost with value set to v.
func NewOptKatUpgradeCost(v KatUpgradeCost) OptKatUpgradeCost {
	return OptKatUpgradeCost{
		Value: v,
		Set:   true,
	}
}

// OptKatUpgradeCost is optional KatUpgradeCost.
type OptKatUpgradeCost struct {
	Value KatUpgradeCost
	Set   bool
}

// IsSet returns true if OptKatUpgradeCost was set.
func (o OptKatUpgradeCost) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptKatUpgradeCost) Reset() {
	var v KatUpgradeCost
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptKatUpgradeCost) SetTo(v KatUpgradeCost) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptKatUpgradeCost) Get() (v KatUpgradeCost, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptKatUpgradeCost) Or(d KatUpgradeCost) KatUpgradeCost {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptListEntryFilter returns new OptListEntryFilter with value set to v.
func NewOptListEntryFilter(v *ListEntryFilter) OptListEntryFilter {
	return OptListEntryFilter{
		Value: v,
		Set:   true,
	}
}

// OptListEntryFilter is optional *ListEntryFilter.
type OptListEntryFilter struct {
	Value *ListEntryFilter
	Set   bool
}

// IsSet returns true if OptListEntryFilter was set.
func (o OptListEntryFilter) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptListEntryFilter) Reset() {
	var v *ListEntryFilter
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptListEntryFilter) SetTo(v *ListEntryFilter) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptListEntryFilter) Get() (v *ListEntryFilter, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptListEntryFilter) Or(d *ListEntryFilter) *ListEntryFilter {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModSettings returns new OptModSettings with value set to v.
func NewOptModSettings(v ModSettings) OptModSettings {
	return OptModSettings{
		Value: v,
		Set:   true,
	}
}

// OptModSettings is optional ModSettings.
type OptModSettings struct {
	Value ModSettings
	Set   bool
}

// IsSet returns true if OptModSettings was set.
func (o OptModSettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModSettings) Reset() {
	var v ModSettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModSettings) SetTo(v ModSettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModSettings) Get() (v ModSettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModSettings) Or(d ModSettings) ModSettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModType returns new OptModType with value set to v.
func NewOptModType(v ModType) OptModType {
	return OptModType{
		Value: v,
		Set:   true,
	}
}

// OptModType is optional ModType.
type OptModType struct {
	Value ModType
	Set   bool
}

// IsSet returns true if OptModType was set.
func (o OptModType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModType) Reset() {
	var v ModType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModType) SetTo(v ModType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModType) Get() (v ModType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModType) Or(d ModType) ModType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptModelCandidate returns new OptModelCandidate with value set to v.
func NewOptModelCandidate(v ModelCandidate) OptModelCandidate {
	return OptModelCandidate{
		Value: v,
		Set:   true,
	}
}

// OptModelCandidate is optional ModelCandidate.
type OptModelCandidate struct {
	Value ModelCandidate
	Set   bool
}

// IsSet returns true if OptModelCandidate was set.
func (o OptModelCandidate) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptModelCandidate) Reset() {
	var v ModelCandidate
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptModelCandidate) SetTo(v ModelCandidate) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptModelCandidate) Get() (v ModelCandidate, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptModelCandidate) Or(d ModelCandidate) ModelCandidate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNbtData returns new OptNbtData with value set to v.
func NewOptNbtData(v NbtData) OptNbtData {
	return OptNbtData{
		Value: v,
		Set:   true,
	}
}

// OptNbtData is optional NbtData.
type OptNbtData struct {
	Value NbtData
	Set   bool
}

// IsSet returns true if OptNbtData was set.
func (o OptNbtData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNbtData) Reset() {
	var v NbtData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNbtData) SetTo(v NbtData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNbtData) Get() (v NbtData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNbtData) Or(d NbtData) NbtData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNbtDataData returns new OptNbtDataData with value set to v.
func NewOptNbtDataData(v *NbtDataData) OptNbtDataData {
	return OptNbtDataData{
		Value: v,
		Set:   true,
	}
}

// OptNbtDataData is optional *NbtDataData.
type OptNbtDataData struct {
	Value *NbtDataData
	Set   bool
}

// IsSet returns true if OptNbtDataData was set.
func (o OptNbtDataData) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNbtDataData) Reset() {
	var v *NbtDataData
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptNbtDataData) SetTo(v *NbtDataData) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptNbtDataData) Get() (v *NbtDataData, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNbtDataData) Or(d *NbtDataData) *NbtDataData {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilBuyOrderArray returns new OptNilBuyOrderArray with value set to v.
func NewOptNilBuyOrderArray(v []BuyOrder) OptNilBuyOrderArray {
	return OptNilBuyOrderArray{
		Value: v,
		Set:   true,
	}
}

// OptNilBuyOrderArray is optional nullable []BuyOrder.
type OptNilBuyOrderArray struct {
	Value []BuyOrder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilBuyOrderArray was set.
func (o OptNilBuyOrderArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilBuyOrderArray) Reset() {
	var v []BuyOrder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilBuyOrderArray) SetTo(v []BuyOrder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilBuyOrderArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilBuyOrderArray) Get() (v []BuyOrder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilBuyOrderArray) Or(d []BuyOrder) []BuyOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilColorEnchantArray returns new OptNilColorEnchantArray with value set to v.
func NewOptNilColorEnchantArray(v []ColorEnchant) OptNilColorEnchantArray {
	return OptNilColorEnchantArray{
		Value: v,
		Set:   true,
	}
}

// OptNilColorEnchantArray is optional nullable []ColorEnchant.
type OptNilColorEnchantArray struct {
	Value []ColorEnchant
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilColorEnchantArray was set.
func (o OptNilColorEnchantArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilColorEnchantArray) Reset() {
	var v []ColorEnchant
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilColorEnchantArray) SetTo(v []ColorEnchant) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilColorEnchantArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilColorEnchantArray) Get() (v []ColorEnchant, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilColorEnchantArray) Or(d []ColorEnchant) []ColorEnchant {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilColorSaveAuctionFlatNbt returns new OptNilColorSaveAuctionFlatNbt with value set to v.
func NewOptNilColorSaveAuctionFlatNbt(v ColorSaveAuctionFlatNbt) OptNilColorSaveAuctionFlatNbt {
	return OptNilColorSaveAuctionFlatNbt{
		Value: v,
		Set:   true,
	}
}

// OptNilColorSaveAuctionFlatNbt is optional nullable ColorSaveAuctionFlatNbt.
type OptNilColorSaveAuctionFlatNbt struct {
	Value ColorSaveAuctionFlatNbt
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilColorSaveAuctionFlatNbt was set.
func (o OptNilColorSaveAuctionFlatNbt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilColorSaveAuctionFlatNbt) Reset() {
	var v ColorSaveAuctionFlatNbt
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilColorSaveAuctionFlatNbt) SetTo(v ColorSaveAuctionFlatNbt) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilColorSaveAuctionFlatNbt) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilColorSaveAuctionFlatNbt) Get() (v ColorSaveAuctionFlatNbt, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilColorSaveAuctionFlatNbt) Or(d ColorSaveAuctionFlatNbt) ColorSaveAuctionFlatNbt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilDescriptionFieldArrayArray returns new OptNilDescriptionFieldArrayArray with value set to v.
func NewOptNilDescriptionFieldArrayArray(v [][]DescriptionField) OptNilDescriptionFieldArrayArray {
	return OptNilDescriptionFieldArrayArray{
		Value: v,
		Set:   true,
	}
}

// OptNilDescriptionFieldArrayArray is optional nullable [][]DescriptionField.
type OptNilDescriptionFieldArrayArray struct {
	Value [][]DescriptionField
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilDescriptionFieldArrayArray was set.
func (o OptNilDescriptionFieldArrayArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilDescriptionFieldArrayArray) Reset() {
	var v [][]DescriptionField
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilDescriptionFieldArrayArray) SetTo(v [][]DescriptionField) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilDescriptionFieldArrayArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilDescriptionFieldArrayArray) Get() (v [][]DescriptionField, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilDescriptionFieldArrayArray) Or(d [][]DescriptionField) [][]DescriptionField {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilEnchantmentArray returns new OptNilEnchantmentArray with value set to v.
func NewOptNilEnchantmentArray(v []Enchantment) OptNilEnchantmentArray {
	return OptNilEnchantmentArray{
		Value: v,
		Set:   true,
	}
}

// OptNilEnchantmentArray is optional nullable []Enchantment.
type OptNilEnchantmentArray struct {
	Value []Enchantment
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilEnchantmentArray was set.
func (o OptNilEnchantmentArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilEnchantmentArray) Reset() {
	var v []Enchantment
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilEnchantmentArray) SetTo(v []Enchantment) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilEnchantmentArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilEnchantmentArray) Get() (v []Enchantment, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilEnchantmentArray) Or(d []Enchantment) []Enchantment {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilFlipDetailsArray returns new OptNilFlipDetailsArray with value set to v.
func NewOptNilFlipDetailsArray(v []FlipDetails) OptNilFlipDetailsArray {
	return OptNilFlipDetailsArray{
		Value: v,
		Set:   true,
	}
}

// OptNilFlipDetailsArray is optional nullable []FlipDetails.
type OptNilFlipDetailsArray struct {
	Value []FlipDetails
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilFlipDetailsArray was set.
func (o OptNilFlipDetailsArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilFlipDetailsArray) Reset() {
	var v []FlipDetails
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilFlipDetailsArray) SetTo(v []FlipDetails) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilFlipDetailsArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilFlipDetailsArray) Get() (v []FlipDetails, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilFlipDetailsArray) Or(d []FlipDetails) []FlipDetails {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilIngredientArray returns new OptNilIngredientArray with value set to v.
func NewOptNilIngredientArray(v []Ingredient) OptNilIngredientArray {
	return OptNilIngredientArray{
		Value: v,
		Set:   true,
	}
}

// OptNilIngredientArray is optional nullable []Ingredient.
type OptNilIngredientArray struct {
	Value []Ingredient
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilIngredientArray was set.
func (o OptNilIngredientArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilIngredientArray) Reset() {
	var v []Ingredient
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilIngredientArray) SetTo(v []Ingredient) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilIngredientArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilIngredientArray) Get() (v []Ingredient, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilIngredientArray) Or(d []Ingredient) []Ingredient {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilListEntryArray returns new OptNilListEntryArray with value set to v.
func NewOptNilListEntryArray(v []ListEntry) OptNilListEntryArray {
	return OptNilListEntryArray{
		Value: v,
		Set:   true,
	}
}

// OptNilListEntryArray is optional nullable []ListEntry.
type OptNilListEntryArray struct {
	Value []ListEntry
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilListEntryArray was set.
func (o OptNilListEntryArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilListEntryArray) Reset() {
	var v []ListEntry
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilListEntryArray) SetTo(v []ListEntry) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilListEntryArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilListEntryArray) Get() (v []ListEntry, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilListEntryArray) Or(d []ListEntry) []ListEntry {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilModelCandidateArray returns new OptNilModelCandidateArray with value set to v.
func NewOptNilModelCandidateArray(v []ModelCandidate) OptNilModelCandidateArray {
	return OptNilModelCandidateArray{
		Value: v,
		Set:   true,
	}
}

// OptNilModelCandidateArray is optional nullable []ModelCandidate.
type OptNilModelCandidateArray struct {
	Value []ModelCandidate
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilModelCandidateArray was set.
func (o OptNilModelCandidateArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilModelCandidateArray) Reset() {
	var v []ModelCandidate
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilModelCandidateArray) SetTo(v []ModelCandidate) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilModelCandidateArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilModelCandidateArray) Get() (v []ModelCandidate, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilModelCandidateArray) Or(d []ModelCandidate) []ModelCandidate {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilModelPerkArray returns new OptNilModelPerkArray with value set to v.
func NewOptNilModelPerkArray(v []ModelPerk) OptNilModelPerkArray {
	return OptNilModelPerkArray{
		Value: v,
		Set:   true,
	}
}

// OptNilModelPerkArray is optional nullable []ModelPerk.
type OptNilModelPerkArray struct {
	Value []ModelPerk
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilModelPerkArray was set.
func (o OptNilModelPerkArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilModelPerkArray) Reset() {
	var v []ModelPerk
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilModelPerkArray) SetTo(v []ModelPerk) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilModelPerkArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilModelPerkArray) Get() (v []ModelPerk, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilModelPerkArray) Or(d []ModelPerk) []ModelPerk {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilPropertyChangeArray returns new OptNilPropertyChangeArray with value set to v.
func NewOptNilPropertyChangeArray(v []PropertyChange) OptNilPropertyChangeArray {
	return OptNilPropertyChangeArray{
		Value: v,
		Set:   true,
	}
}

// OptNilPropertyChangeArray is optional nullable []PropertyChange.
type OptNilPropertyChangeArray struct {
	Value []PropertyChange
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilPropertyChangeArray was set.
func (o OptNilPropertyChangeArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilPropertyChangeArray) Reset() {
	var v []PropertyChange
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilPropertyChangeArray) SetTo(v []PropertyChange) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilPropertyChangeArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilPropertyChangeArray) Get() (v []PropertyChange, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilPropertyChangeArray) Or(d []PropertyChange) []PropertyChange {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSaveBidsArray returns new OptNilSaveBidsArray with value set to v.
func NewOptNilSaveBidsArray(v []SaveBids) OptNilSaveBidsArray {
	return OptNilSaveBidsArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSaveBidsArray is optional nullable []SaveBids.
type OptNilSaveBidsArray struct {
	Value []SaveBids
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSaveBidsArray was set.
func (o OptNilSaveBidsArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSaveBidsArray) Reset() {
	var v []SaveBids
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSaveBidsArray) SetTo(v []SaveBids) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSaveBidsArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSaveBidsArray) Get() (v []SaveBids, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSaveBidsArray) Or(d []SaveBids) []SaveBids {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilSellOrderArray returns new OptNilSellOrderArray with value set to v.
func NewOptNilSellOrderArray(v []SellOrder) OptNilSellOrderArray {
	return OptNilSellOrderArray{
		Value: v,
		Set:   true,
	}
}

// OptNilSellOrderArray is optional nullable []SellOrder.
type OptNilSellOrderArray struct {
	Value []SellOrder
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilSellOrderArray was set.
func (o OptNilSellOrderArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilSellOrderArray) Reset() {
	var v []SellOrder
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilSellOrderArray) SetTo(v []SellOrder) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilSellOrderArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilSellOrderArray) Get() (v []SellOrder, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilSellOrderArray) Or(d []SellOrder) []SellOrder {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilString returns new OptNilString with value set to v.
func NewOptNilString(v string) OptNilString {
	return OptNilString{
		Value: v,
		Set:   true,
	}
}

// OptNilString is optional nullable string.
type OptNilString struct {
	Value string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilString was set.
func (o OptNilString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilString) Reset() {
	var v string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilString) SetTo(v string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilString) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilString) Get() (v string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilStringArray returns new OptNilStringArray with value set to v.
func NewOptNilStringArray(v []string) OptNilStringArray {
	return OptNilStringArray{
		Value: v,
		Set:   true,
	}
}

// OptNilStringArray is optional nullable []string.
type OptNilStringArray struct {
	Value []string
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilStringArray was set.
func (o OptNilStringArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilStringArray) Reset() {
	var v []string
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilStringArray) SetTo(v []string) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilStringArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilStringArray) Get() (v []string, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilStringArray) Or(d []string) []string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptNilUUIDArray returns new OptNilUUIDArray with value set to v.
func NewOptNilUUIDArray(v []UUID) OptNilUUIDArray {
	return OptNilUUIDArray{
		Value: v,
		Set:   true,
	}
}

// OptNilUUIDArray is optional nullable []UUID.
type OptNilUUIDArray struct {
	Value []UUID
	Set   bool
	Null  bool
}

// IsSet returns true if OptNilUUIDArray was set.
func (o OptNilUUIDArray) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptNilUUIDArray) Reset() {
	var v []UUID
	o.Value = v
	o.Set = false
	o.Null = false
}

// SetTo sets value to v.
func (o *OptNilUUIDArray) SetTo(v []UUID) {
	o.Set = true
	o.Null = false
	o.Value = v
}

// IsSet returns true if value is Null.
func (o OptNilUUIDArray) IsNull() bool { return o.Null }

// Get returns value and boolean that denotes whether value was set.
func (o OptNilUUIDArray) Get() (v []UUID, ok bool) {
	if o.Null {
		return v, false
	}
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptNilUUIDArray) Or(d []UUID) []UUID {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptOldRefInfo returns new OptOldRefInfo with value set to v.
func NewOptOldRefInfo(v OldRefInfo) OptOldRefInfo {
	return OptOldRefInfo{
		Value: v,
		Set:   true,
	}
}

// OptOldRefInfo is optional OldRefInfo.
type OptOldRefInfo struct {
	Value OldRefInfo
	Set   bool
}

// IsSet returns true if OptOldRefInfo was set.
func (o OptOldRefInfo) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptOldRefInfo) Reset() {
	var v OldRefInfo
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptOldRefInfo) SetTo(v OldRefInfo) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptOldRefInfo) Get() (v OldRefInfo, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptOldRefInfo) Or(d OldRefInfo) OldRefInfo {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptProductType returns new OptProductType with value set to v.
func NewOptProductType(v ProductType) OptProductType {
	return OptProductType{
		Value: v,
		Set:   true,
	}
}

// OptProductType is optional ProductType.
type OptProductType struct {
	Value ProductType
	Set   bool
}

// IsSet returns true if OptProductType was set.
func (o OptProductType) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptProductType) Reset() {
	var v ProductType
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptProductType) SetTo(v ProductType) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptProductType) Get() (v ProductType, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptProductType) Or(d ProductType) ProductType {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptReforge returns new OptReforge with value set to v.
func NewOptReforge(v Reforge) OptReforge {
	return OptReforge{
		Value: v,
		Set:   true,
	}
}

// OptReforge is optional Reforge.
type OptReforge struct {
	Value Reforge
	Set   bool
}

// IsSet returns true if OptReforge was set.
func (o OptReforge) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptReforge) Reset() {
	var v Reforge
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptReforge) SetTo(v Reforge) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptReforge) Get() (v Reforge, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptReforge) Or(d Reforge) Reforge {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptRequiredCollection returns new OptRequiredCollection with value set to v.
func NewOptRequiredCollection(v RequiredCollection) OptRequiredCollection {
	return OptRequiredCollection{
		Value: v,
		Set:   true,
	}
}

// OptRequiredCollection is optional RequiredCollection.
type OptRequiredCollection struct {
	Value RequiredCollection
	Set   bool
}

// IsSet returns true if OptRequiredCollection was set.
func (o OptRequiredCollection) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptRequiredCollection) Reset() {
	var v RequiredCollection
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptRequiredCollection) SetTo(v RequiredCollection) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptRequiredCollection) Get() (v RequiredCollection, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptRequiredCollection) Or(d RequiredCollection) RequiredCollection {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSaveAuction returns new OptSaveAuction with value set to v.
func NewOptSaveAuction(v SaveAuction) OptSaveAuction {
	return OptSaveAuction{
		Value: v,
		Set:   true,
	}
}

// OptSaveAuction is optional SaveAuction.
type OptSaveAuction struct {
	Value SaveAuction
	Set   bool
}

// IsSet returns true if OptSaveAuction was set.
func (o OptSaveAuction) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSaveAuction) Reset() {
	var v SaveAuction
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSaveAuction) SetTo(v SaveAuction) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSaveAuction) Get() (v SaveAuction, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSaveAuction) Or(d SaveAuction) SaveAuction {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptSaveAuctionFlatNbt returns new OptSaveAuctionFlatNbt with value set to v.
func NewOptSaveAuctionFlatNbt(v *SaveAuctionFlatNbt) OptSaveAuctionFlatNbt {
	return OptSaveAuctionFlatNbt{
		Value: v,
		Set:   true,
	}
}

// OptSaveAuctionFlatNbt is optional *SaveAuctionFlatNbt.
type OptSaveAuctionFlatNbt struct {
	Value *SaveAuctionFlatNbt
	Set   bool
}

// IsSet returns true if OptSaveAuctionFlatNbt was set.
func (o OptSaveAuctionFlatNbt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptSaveAuctionFlatNbt) Reset() {
	var v *SaveAuctionFlatNbt
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptSaveAuctionFlatNbt) SetTo(v *SaveAuctionFlatNbt) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptSaveAuctionFlatNbt) Get() (v *SaveAuctionFlatNbt, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptSaveAuctionFlatNbt) Or(d *SaveAuctionFlatNbt) *SaveAuctionFlatNbt {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptTier returns new OptTier with value set to v.
func NewOptTier(v Tier) OptTier {
	return OptTier{
		Value: v,
		Set:   true,
	}
}

// OptTier is optional Tier.
type OptTier struct {
	Value Tier
	Set   bool
}

// IsSet returns true if OptTier was set.
func (o OptTier) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptTier) Reset() {
	var v Tier
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptTier) SetTo(v Tier) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptTier) Get() (v Tier, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptTier) Or(d Tier) Tier {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptVisibilitySettings returns new OptVisibilitySettings with value set to v.
func NewOptVisibilitySettings(v VisibilitySettings) OptVisibilitySettings {
	return OptVisibilitySettings{
		Value: v,
		Set:   true,
	}
}

// OptVisibilitySettings is optional VisibilitySettings.
type OptVisibilitySettings struct {
	Value VisibilitySettings
	Set   bool
}

// IsSet returns true if OptVisibilitySettings was set.
func (o OptVisibilitySettings) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptVisibilitySettings) Reset() {
	var v VisibilitySettings
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptVisibilitySettings) SetTo(v VisibilitySettings) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptVisibilitySettings) Get() (v VisibilitySettings, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptVisibilitySettings) Or(d VisibilitySettings) VisibilitySettings {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/PlayerResult
type PlayerResult struct {
	Name     OptNilString `json:"name"`
	UUID     OptNilString `json:"uuid"`
	HitCount OptInt32     `json:"hitCount"`
}

// GetName returns the value of Name.
func (s *PlayerResult) GetName() OptNilString {
	return s.Name
}

// GetUUID returns the value of UUID.
func (s *PlayerResult) GetUUID() OptNilString {
	return s.UUID
}

// GetHitCount returns the value of HitCount.
func (s *PlayerResult) GetHitCount() OptInt32 {
	return s.HitCount
}

// SetName sets the value of Name.
func (s *PlayerResult) SetName(val OptNilString) {
	s.Name = val
}

// SetUUID sets the value of UUID.
func (s *PlayerResult) SetUUID(val OptNilString) {
	s.UUID = val
}

// SetHitCount sets the value of HitCount.
func (s *PlayerResult) SetHitCount(val OptInt32) {
	s.HitCount = val
}

// Ref: #/components/schemas/PriceEstimate
type PriceEstimate struct {
	// The best matching lowest bin found on ah.
	Lbin OptInt64 `json:"lbin"`
	// The best matching median sell price.
	Median OptInt64 `json:"median"`
	// Average 24 hour sell volume.
	Volume OptFloat32 `json:"volume"`
	// The link to best matching lbin.
	LbinLink OptNilString `json:"lbinLink"`
	// Suggested price for selling withing 5 minutes.
	FastSell OptInt64 `json:"fastSell"`
	// The key of the median price.
	MedianKey OptNilString `json:"medianKey"`
	// The key of the.
	ItemKey OptNilString `json:"itemKey"`
}

// GetLbin returns the value of Lbin.
func (s *PriceEstimate) GetLbin() OptInt64 {
	return s.Lbin
}

// GetMedian returns the value of Median.
func (s *PriceEstimate) GetMedian() OptInt64 {
	return s.Median
}

// GetVolume returns the value of Volume.
func (s *PriceEstimate) GetVolume() OptFloat32 {
	return s.Volume
}

// GetLbinLink returns the value of LbinLink.
func (s *PriceEstimate) GetLbinLink() OptNilString {
	return s.LbinLink
}

// GetFastSell returns the value of FastSell.
func (s *PriceEstimate) GetFastSell() OptInt64 {
	return s.FastSell
}

// GetMedianKey returns the value of MedianKey.
func (s *PriceEstimate) GetMedianKey() OptNilString {
	return s.MedianKey
}

// GetItemKey returns the value of ItemKey.
func (s *PriceEstimate) GetItemKey() OptNilString {
	return s.ItemKey
}

// SetLbin sets the value of Lbin.
func (s *PriceEstimate) SetLbin(val OptInt64) {
	s.Lbin = val
}

// SetMedian sets the value of Median.
func (s *PriceEstimate) SetMedian(val OptInt64) {
	s.Median = val
}

// SetVolume sets the value of Volume.
func (s *PriceEstimate) SetVolume(val OptFloat32) {
	s.Volume = val
}

// SetLbinLink sets the value of LbinLink.
func (s *PriceEstimate) SetLbinLink(val OptNilString) {
	s.LbinLink = val
}

// SetFastSell sets the value of FastSell.
func (s *PriceEstimate) SetFastSell(val OptInt64) {
	s.FastSell = val
}

// SetMedianKey sets the value of MedianKey.
func (s *PriceEstimate) SetMedianKey(val OptNilString) {
	s.MedianKey = val
}

// SetItemKey sets the value of ItemKey.
func (s *PriceEstimate) SetItemKey(val OptNilString) {
	s.ItemKey = val
}

// Ref: #/components/schemas/PriceSumary
type PriceSumary struct {
	Min    OptInt64   `json:"min"`
	Median OptInt64   `json:"median"`
	Mean   OptFloat64 `json:"mean"`
	Mode   OptInt64   `json:"mode"`
	Volume OptFloat64 `json:"volume"`
	Max    OptInt64   `json:"max"`
}

// GetMin returns the value of Min.
func (s *PriceSumary) GetMin() OptInt64 {
	return s.Min
}

// GetMedian returns the value of Median.
func (s *PriceSumary) GetMedian() OptInt64 {
	return s.Median
}

// GetMean returns the value of Mean.
func (s *PriceSumary) GetMean() OptFloat64 {
	return s.Mean
}

// GetMode returns the value of Mode.
func (s *PriceSumary) GetMode() OptInt64 {
	return s.Mode
}

// GetVolume returns the value of Volume.
func (s *PriceSumary) GetVolume() OptFloat64 {
	return s.Volume
}

// GetMax returns the value of Max.
func (s *PriceSumary) GetMax() OptInt64 {
	return s.Max
}

// SetMin sets the value of Min.
func (s *PriceSumary) SetMin(val OptInt64) {
	s.Min = val
}

// SetMedian sets the value of Median.
func (s *PriceSumary) SetMedian(val OptInt64) {
	s.Median = val
}

// SetMean sets the value of Mean.
func (s *PriceSumary) SetMean(val OptFloat64) {
	s.Mean = val
}

// SetMode sets the value of Mode.
func (s *PriceSumary) SetMode(val OptInt64) {
	s.Mode = val
}

// SetVolume sets the value of Volume.
func (s *PriceSumary) SetVolume(val OptFloat64) {
	s.Volume = val
}

// SetMax sets the value of Max.
func (s *PriceSumary) SetMax(val OptInt64) {
	s.Max = val
}

// Ref: #/components/schemas/PrivacySettings
type PrivacySettings struct {
	ChatRegex           OptNilString      `json:"chatRegex"`
	CollectChat         OptBool           `json:"collectChat"`
	CollectInventory    OptBool           `json:"collectInventory"`
	CollectTab          OptBool           `json:"collectTab"`
	CollectScoreboard   OptBool           `json:"collectScoreboard"`
	AllowProxy          OptBool           `json:"allowProxy"`
	CollectInvClick     OptBool           `json:"collectInvClick"`
	CollectChatClicks   OptBool           `json:"collectChatClicks"`
	CollectLobbyChanges OptBool           `json:"collectLobbyChanges"`
	CollectEntities     OptBool           `json:"collectEntities"`
	CollectLocation     OptBool           `json:"collectLocation"`
	ExtendDescriptions  OptBool           `json:"extendDescriptions"`
	CommandPrefixes     OptNilStringArray `json:"commandPrefixes"`
	AutoStart           OptBool           `json:"autoStart"`
}

// GetChatRegex returns the value of ChatRegex.
func (s *PrivacySettings) GetChatRegex() OptNilString {
	return s.ChatRegex
}

// GetCollectChat returns the value of CollectChat.
func (s *PrivacySettings) GetCollectChat() OptBool {
	return s.CollectChat
}

// GetCollectInventory returns the value of CollectInventory.
func (s *PrivacySettings) GetCollectInventory() OptBool {
	return s.CollectInventory
}

// GetCollectTab returns the value of CollectTab.
func (s *PrivacySettings) GetCollectTab() OptBool {
	return s.CollectTab
}

// GetCollectScoreboard returns the value of CollectScoreboard.
func (s *PrivacySettings) GetCollectScoreboard() OptBool {
	return s.CollectScoreboard
}

// GetAllowProxy returns the value of AllowProxy.
func (s *PrivacySettings) GetAllowProxy() OptBool {
	return s.AllowProxy
}

// GetCollectInvClick returns the value of CollectInvClick.
func (s *PrivacySettings) GetCollectInvClick() OptBool {
	return s.CollectInvClick
}

// GetCollectChatClicks returns the value of CollectChatClicks.
func (s *PrivacySettings) GetCollectChatClicks() OptBool {
	return s.CollectChatClicks
}

// GetCollectLobbyChanges returns the value of CollectLobbyChanges.
func (s *PrivacySettings) GetCollectLobbyChanges() OptBool {
	return s.CollectLobbyChanges
}

// GetCollectEntities returns the value of CollectEntities.
func (s *PrivacySettings) GetCollectEntities() OptBool {
	return s.CollectEntities
}

// GetCollectLocation returns the value of CollectLocation.
func (s *PrivacySettings) GetCollectLocation() OptBool {
	return s.CollectLocation
}

// GetExtendDescriptions returns the value of ExtendDescriptions.
func (s *PrivacySettings) GetExtendDescriptions() OptBool {
	return s.ExtendDescriptions
}

// GetCommandPrefixes returns the value of CommandPrefixes.
func (s *PrivacySettings) GetCommandPrefixes() OptNilStringArray {
	return s.CommandPrefixes
}

// GetAutoStart returns the value of AutoStart.
func (s *PrivacySettings) GetAutoStart() OptBool {
	return s.AutoStart
}

// SetChatRegex sets the value of ChatRegex.
func (s *PrivacySettings) SetChatRegex(val OptNilString) {
	s.ChatRegex = val
}

// SetCollectChat sets the value of CollectChat.
func (s *PrivacySettings) SetCollectChat(val OptBool) {
	s.CollectChat = val
}

// SetCollectInventory sets the value of CollectInventory.
func (s *PrivacySettings) SetCollectInventory(val OptBool) {
	s.CollectInventory = val
}

// SetCollectTab sets the value of CollectTab.
func (s *PrivacySettings) SetCollectTab(val OptBool) {
	s.CollectTab = val
}

// SetCollectScoreboard sets the value of CollectScoreboard.
func (s *PrivacySettings) SetCollectScoreboard(val OptBool) {
	s.CollectScoreboard = val
}

// SetAllowProxy sets the value of AllowProxy.
func (s *PrivacySettings) SetAllowProxy(val OptBool) {
	s.AllowProxy = val
}

// SetCollectInvClick sets the value of CollectInvClick.
func (s *PrivacySettings) SetCollectInvClick(val OptBool) {
	s.CollectInvClick = val
}

// SetCollectChatClicks sets the value of CollectChatClicks.
func (s *PrivacySettings) SetCollectChatClicks(val OptBool) {
	s.CollectChatClicks = val
}

// SetCollectLobbyChanges sets the value of CollectLobbyChanges.
func (s *PrivacySettings) SetCollectLobbyChanges(val OptBool) {
	s.CollectLobbyChanges = val
}

// SetCollectEntities sets the value of CollectEntities.
func (s *PrivacySettings) SetCollectEntities(val OptBool) {
	s.CollectEntities = val
}

// SetCollectLocation sets the value of CollectLocation.
func (s *PrivacySettings) SetCollectLocation(val OptBool) {
	s.CollectLocation = val
}

// SetExtendDescriptions sets the value of ExtendDescriptions.
func (s *PrivacySettings) SetExtendDescriptions(val OptBool) {
	s.ExtendDescriptions = val
}

// SetCommandPrefixes sets the value of CommandPrefixes.
func (s *PrivacySettings) SetCommandPrefixes(val OptNilStringArray) {
	s.CommandPrefixes = val
}

// SetAutoStart sets the value of AutoStart.
func (s *PrivacySettings) SetAutoStart(val OptBool) {
	s.AutoStart = val
}

// Ref: #/components/schemas/ProductType
type ProductType string

const (
	ProductTypeNONE          ProductType = "NONE"
	ProductTypeSERVICE       ProductType = "SERVICE"
	ProductTypeCOLLECTABLE   ProductType = "COLLECTABLE"
	ProductTypeTOPUP         ProductType = "TOP_UP"
	ProductTypeLOCKED        ProductType = "LOCKED"
	ProductTypeDISABLED      ProductType = "DISABLED"
	ProductTypeVARIABLEPRICE ProductType = "VARIABLE_PRICE"
)

// MarshalText implements encoding.TextMarshaler.
func (s ProductType) MarshalText() ([]byte, error) {
	switch s {
	case ProductTypeNONE:
		return []byte(s), nil
	case ProductTypeSERVICE:
		return []byte(s), nil
	case ProductTypeCOLLECTABLE:
		return []byte(s), nil
	case ProductTypeTOPUP:
		return []byte(s), nil
	case ProductTypeLOCKED:
		return []byte(s), nil
	case ProductTypeDISABLED:
		return []byte(s), nil
	case ProductTypeVARIABLEPRICE:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *ProductType) UnmarshalText(data []byte) error {
	switch ProductType(data) {
	case ProductTypeNONE:
		*s = ProductTypeNONE
		return nil
	case ProductTypeSERVICE:
		*s = ProductTypeSERVICE
		return nil
	case ProductTypeCOLLECTABLE:
		*s = ProductTypeCOLLECTABLE
		return nil
	case ProductTypeTOPUP:
		*s = ProductTypeTOPUP
		return nil
	case ProductTypeLOCKED:
		*s = ProductTypeLOCKED
		return nil
	case ProductTypeDISABLED:
		*s = ProductTypeDISABLED
		return nil
	case ProductTypeVARIABLEPRICE:
		*s = ProductTypeVARIABLEPRICE
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/ProfitableCraft
type ProfitableCraft struct {
	ItemId        OptNilString          `json:"itemId"`
	ItemName      OptNilString          `json:"itemName"`
	SellPrice     OptFloat64            `json:"sellPrice"`
	CraftCost     OptFloat64            `json:"craftCost"`
	Ingredients   OptNilIngredientArray `json:"ingredients"`
	ReqCollection OptRequiredCollection `json:"reqCollection"`
	ReqSlayer     OptRequiredCollection `json:"reqSlayer"`
	Volume        OptFloat64            `json:"volume"`
	Median        OptFloat32            `json:"median"`
}

// GetItemId returns the value of ItemId.
func (s *ProfitableCraft) GetItemId() OptNilString {
	return s.ItemId
}

// GetItemName returns the value of ItemName.
func (s *ProfitableCraft) GetItemName() OptNilString {
	return s.ItemName
}

// GetSellPrice returns the value of SellPrice.
func (s *ProfitableCraft) GetSellPrice() OptFloat64 {
	return s.SellPrice
}

// GetCraftCost returns the value of CraftCost.
func (s *ProfitableCraft) GetCraftCost() OptFloat64 {
	return s.CraftCost
}

// GetIngredients returns the value of Ingredients.
func (s *ProfitableCraft) GetIngredients() OptNilIngredientArray {
	return s.Ingredients
}

// GetReqCollection returns the value of ReqCollection.
func (s *ProfitableCraft) GetReqCollection() OptRequiredCollection {
	return s.ReqCollection
}

// GetReqSlayer returns the value of ReqSlayer.
func (s *ProfitableCraft) GetReqSlayer() OptRequiredCollection {
	return s.ReqSlayer
}

// GetVolume returns the value of Volume.
func (s *ProfitableCraft) GetVolume() OptFloat64 {
	return s.Volume
}

// GetMedian returns the value of Median.
func (s *ProfitableCraft) GetMedian() OptFloat32 {
	return s.Median
}

// SetItemId sets the value of ItemId.
func (s *ProfitableCraft) SetItemId(val OptNilString) {
	s.ItemId = val
}

// SetItemName sets the value of ItemName.
func (s *ProfitableCraft) SetItemName(val OptNilString) {
	s.ItemName = val
}

// SetSellPrice sets the value of SellPrice.
func (s *ProfitableCraft) SetSellPrice(val OptFloat64) {
	s.SellPrice = val
}

// SetCraftCost sets the value of CraftCost.
func (s *ProfitableCraft) SetCraftCost(val OptFloat64) {
	s.CraftCost = val
}

// SetIngredients sets the value of Ingredients.
func (s *ProfitableCraft) SetIngredients(val OptNilIngredientArray) {
	s.Ingredients = val
}

// SetReqCollection sets the value of ReqCollection.
func (s *ProfitableCraft) SetReqCollection(val OptRequiredCollection) {
	s.ReqCollection = val
}

// SetReqSlayer sets the value of ReqSlayer.
func (s *ProfitableCraft) SetReqSlayer(val OptRequiredCollection) {
	s.ReqSlayer = val
}

// SetVolume sets the value of Volume.
func (s *ProfitableCraft) SetVolume(val OptFloat64) {
	s.Volume = val
}

// SetMedian sets the value of Median.
func (s *ProfitableCraft) SetMedian(val OptFloat32) {
	s.Median = val
}

// Ref: #/components/schemas/PropertyChange
type PropertyChange struct {
	Description OptNilString `json:"description"`
	Effect      OptInt64     `json:"effect"`
}

// GetDescription returns the value of Description.
func (s *PropertyChange) GetDescription() OptNilString {
	return s.Description
}

// GetEffect returns the value of Effect.
func (s *PropertyChange) GetEffect() OptInt64 {
	return s.Effect
}

// SetDescription sets the value of Description.
func (s *PropertyChange) SetDescription(val OptNilString) {
	s.Description = val
}

// SetEffect sets the value of Effect.
func (s *PropertyChange) SetEffect(val OptInt64) {
	s.Effect = val
}

// Arguments for purchasing a service.
// Ref: #/components/schemas/PurchaseArgs
type PurchaseArgs struct {
	// The service to pruchase.
	Slug OptNilString `json:"slug"`
	// How many instances to purchase (longer time).
	Count OptInt32 `json:"count"`
	// Reference to prevent dupplicates.
	Reference OptNilString `json:"reference"`
}

// GetSlug returns the value of Slug.
func (s *PurchaseArgs) GetSlug() OptNilString {
	return s.Slug
}

// GetCount returns the value of Count.
func (s *PurchaseArgs) GetCount() OptInt32 {
	return s.Count
}

// GetReference returns the value of Reference.
func (s *PurchaseArgs) GetReference() OptNilString {
	return s.Reference
}

// SetSlug sets the value of Slug.
func (s *PurchaseArgs) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetCount sets the value of Count.
func (s *PurchaseArgs) SetCount(val OptInt32) {
	s.Count = val
}

// SetReference sets the value of Reference.
func (s *PurchaseArgs) SetReference(val OptNilString) {
	s.Reference = val
}

// Ref: #/components/schemas/ReferralInfo
type ReferralInfo struct {
	ReferedCount       OptInt32      `json:"referedCount"`
	ValidatedMinecraft OptInt32      `json:"validatedMinecraft"`
	PurchasedCoins     OptInt32      `json:"purchasedCoins"`
	ReferredBy         OptNilString  `json:"referredBy"`
	OldInfo            OptOldRefInfo `json:"oldInfo"`
}

// GetReferedCount returns the value of ReferedCount.
func (s *ReferralInfo) GetReferedCount() OptInt32 {
	return s.ReferedCount
}

// GetValidatedMinecraft returns the value of ValidatedMinecraft.
func (s *ReferralInfo) GetValidatedMinecraft() OptInt32 {
	return s.ValidatedMinecraft
}

// GetPurchasedCoins returns the value of PurchasedCoins.
func (s *ReferralInfo) GetPurchasedCoins() OptInt32 {
	return s.PurchasedCoins
}

// GetReferredBy returns the value of ReferredBy.
func (s *ReferralInfo) GetReferredBy() OptNilString {
	return s.ReferredBy
}

// GetOldInfo returns the value of OldInfo.
func (s *ReferralInfo) GetOldInfo() OptOldRefInfo {
	return s.OldInfo
}

// SetReferedCount sets the value of ReferedCount.
func (s *ReferralInfo) SetReferedCount(val OptInt32) {
	s.ReferedCount = val
}

// SetValidatedMinecraft sets the value of ValidatedMinecraft.
func (s *ReferralInfo) SetValidatedMinecraft(val OptInt32) {
	s.ValidatedMinecraft = val
}

// SetPurchasedCoins sets the value of PurchasedCoins.
func (s *ReferralInfo) SetPurchasedCoins(val OptInt32) {
	s.PurchasedCoins = val
}

// SetReferredBy sets the value of ReferredBy.
func (s *ReferralInfo) SetReferredBy(val OptNilString) {
	s.ReferredBy = val
}

// SetOldInfo sets the value of OldInfo.
func (s *ReferralInfo) SetOldInfo(val OptOldRefInfo) {
	s.OldInfo = val
}

// Object containing referral code to give reward to.
// Ref: #/components/schemas/ReferredBy
type ReferredBy struct {
	RefCode OptNilString `json:"refCode"`
}

// GetRefCode returns the value of RefCode.
func (s *ReferredBy) GetRefCode() OptNilString {
	return s.RefCode
}

// SetRefCode sets the value of RefCode.
func (s *ReferredBy) SetRefCode(val OptNilString) {
	s.RefCode = val
}

// Ref: #/components/schemas/Reforge
type Reforge string

const (
	ReforgeNone         Reforge = "None"
	ReforgeDemonic      Reforge = "Demonic"
	ReforgeForceful     Reforge = "Forceful"
	ReforgeGentle       Reforge = "Gentle"
	ReforgeGodly        Reforge = "Godly"
	ReforgeHurtful      Reforge = "Hurtful"
	ReforgeKeen         Reforge = "Keen"
	ReforgeStrong       Reforge = "Strong"
	ReforgeSuperior     Reforge = "Superior"
	ReforgeUnpleasant   Reforge = "Unpleasant"
	ReforgeZealous      Reforge = "Zealous"
	ReforgeOdd          Reforge = "Odd"
	ReforgeRich         Reforge = "Rich"
	ReforgeEpic         Reforge = "Epic"
	ReforgeFair         Reforge = "Fair"
	ReforgeFast         Reforge = "Fast"
	ReforgeHeroic       Reforge = "Heroic"
	ReforgeLegendary    Reforge = "Legendary"
	ReforgeSpicy        Reforge = "Spicy"
	ReforgeDeadly       Reforge = "Deadly"
	ReforgeFine         Reforge = "Fine"
	ReforgeGrand        Reforge = "Grand"
	ReforgeHasty        Reforge = "Hasty"
	ReforgeNeat         Reforge = "Neat"
	ReforgePapid        Reforge = "Papid"
	ReforgeUnreal       Reforge = "Unreal"
	ReforgeClean        Reforge = "Clean"
	ReforgeFierce       Reforge = "Fierce"
	ReforgeHeavy        Reforge = "Heavy"
	ReforgeLight        Reforge = "Light"
	ReforgeMythic       Reforge = "Mythic"
	ReforgePure         Reforge = "Pure"
	ReforgeSmart        Reforge = "Smart"
	ReforgeTitanic      Reforge = "Titanic"
	ReforgeWise         Reforge = "Wise"
	ReforgeVery         Reforge = "Very"
	ReforgeHighly       Reforge = "Highly"
	ReforgeBizarre      Reforge = "Bizarre"
	ReforgeItchy        Reforge = "Itchy"
	ReforgeOmnious      Reforge = "Omnious"
	ReforgePleasant     Reforge = "Pleasant"
	ReforgePretty       Reforge = "Pretty"
	ReforgeShiny        Reforge = "Shiny"
	ReforgeSimple       Reforge = "Simple"
	ReforgeStrange      Reforge = "Strange"
	ReforgeVivid        Reforge = "Vivid"
	ReforgeOminous      Reforge = "Ominous"
	ReforgeSharp        Reforge = "Sharp"
	ReforgeRapid        Reforge = "Rapid"
	ReforgeNecrotic     Reforge = "Necrotic"
	ReforgeFabled       Reforge = "Fabled"
	ReforgePrecise      Reforge = "Precise"
	ReforgeGiant        Reforge = "Giant"
	ReforgeAoteStone    Reforge = "aote_stone"
	ReforgeSpiritual    Reforge = "Spiritual"
	ReforgeTreacherous  Reforge = "Treacherous"
	ReforgeRenowned     Reforge = "Renowned"
	ReforgeReinforced   Reforge = "Reinforced"
	ReforgeRichBow      Reforge = "rich_bow"
	ReforgeSpiked       Reforge = "Spiked"
	ReforgePerfect      Reforge = "Perfect"
	ReforgeMagnetic     Reforge = "Magnetic"
	ReforgeLoving       Reforge = "Loving"
	ReforgeGilded       Reforge = "Gilded"
	ReforgeOddSword     Reforge = "odd_sword"
	ReforgeSalty        Reforge = "Salty"
	ReforgeSilky        Reforge = "Silky"
	ReforgeRefined      Reforge = "Refined"
	ReforgeSuspicious   Reforge = "suspicious"
	ReforgeToil         Reforge = "toil"
	ReforgeEmpowered    Reforge = "empowered"
	ReforgeFruitful     Reforge = "fruitful"
	ReforgeBlessed      Reforge = "blessed"
	ReforgeShaded       Reforge = "shaded"
	ReforgeAwkward      Reforge = "awkward"
	ReforgeDirty        Reforge = "dirty"
	ReforgeUndead       Reforge = "undead"
	ReforgeCubic        Reforge = "cubic"
	ReforgeBloody       Reforge = "bloody"
	ReforgeMoil         Reforge = "moil"
	ReforgeRidiculous   Reforge = "ridiculous"
	ReforgeRichSword    Reforge = "rich_sword"
	ReforgeWarped       Reforge = "warped"
	ReforgeOddBow       Reforge = "odd_bow"
	ReforgeCandied      Reforge = "candied"
	ReforgeSubmerged    Reforge = "submerged"
	ReforgeAncient      Reforge = "ancient"
	ReforgeWithered     Reforge = "withered"
	ReforgeSweet        Reforge = "sweet"
	ReforgeFleet        Reforge = "fleet"
	ReforgeStellar      Reforge = "stellar"
	ReforgeMithraic     Reforge = "mithraic"
	ReforgeAuspicious   Reforge = "Auspicious"
	ReforgeHeadstrong   Reforge = "headstrong"
	ReforgeStiff        Reforge = "stiff"
	ReforgeBulky        Reforge = "bulky"
	ReforgeLucky        Reforge = "lucky"
	ReforgeBountiful    Reforge = "bountiful"
	ReforgeHeated       Reforge = "heated"
	ReforgeJaded        Reforge = "jaded"
	ReforgeAmbered      Reforge = "ambered"
	ReforgeDoubleBit    Reforge = "double_bit"
	ReforgeExcellent    Reforge = "excellent"
	ReforgeFortunate    Reforge = "fortunate"
	ReforgeProspector   Reforge = "prospector"
	ReforgeLush         Reforge = "lush"
	ReforgeSturdy       Reforge = "sturdy"
	ReforgeLumberjack   Reforge = "lumberjack"
	ReforgeUnyielding   Reforge = "unyielding"
	ReforgeGreat        Reforge = "great"
	ReforgeRobust       Reforge = "robust"
	ReforgeRugged       Reforge = "rugged"
	ReforgeZooming      Reforge = "zooming"
	ReforgePeasant      Reforge = "peasant"
	ReforgeStrengthened Reforge = "strengthened"
	ReforgeGlistening   Reforge = "glistening"
	ReforgeWaxed        Reforge = "waxed"
	ReforgeFortified    Reforge = "fortified"
	ReforgeGreenThumb   Reforge = "green_thumb"
	ReforgePitchin      Reforge = "pitchin"
	ReforgeColdfusion   Reforge = "coldfusion"
	ReforgeUnknown      Reforge = "Unknown"
	ReforgeAny          Reforge = "Any"
)

// MarshalText implements encoding.TextMarshaler.
func (s Reforge) MarshalText() ([]byte, error) {
	switch s {
	case ReforgeNone:
		return []byte(s), nil
	case ReforgeDemonic:
		return []byte(s), nil
	case ReforgeForceful:
		return []byte(s), nil
	case ReforgeGentle:
		return []byte(s), nil
	case ReforgeGodly:
		return []byte(s), nil
	case ReforgeHurtful:
		return []byte(s), nil
	case ReforgeKeen:
		return []byte(s), nil
	case ReforgeStrong:
		return []byte(s), nil
	case ReforgeSuperior:
		return []byte(s), nil
	case ReforgeUnpleasant:
		return []byte(s), nil
	case ReforgeZealous:
		return []byte(s), nil
	case ReforgeOdd:
		return []byte(s), nil
	case ReforgeRich:
		return []byte(s), nil
	case ReforgeEpic:
		return []byte(s), nil
	case ReforgeFair:
		return []byte(s), nil
	case ReforgeFast:
		return []byte(s), nil
	case ReforgeHeroic:
		return []byte(s), nil
	case ReforgeLegendary:
		return []byte(s), nil
	case ReforgeSpicy:
		return []byte(s), nil
	case ReforgeDeadly:
		return []byte(s), nil
	case ReforgeFine:
		return []byte(s), nil
	case ReforgeGrand:
		return []byte(s), nil
	case ReforgeHasty:
		return []byte(s), nil
	case ReforgeNeat:
		return []byte(s), nil
	case ReforgePapid:
		return []byte(s), nil
	case ReforgeUnreal:
		return []byte(s), nil
	case ReforgeClean:
		return []byte(s), nil
	case ReforgeFierce:
		return []byte(s), nil
	case ReforgeHeavy:
		return []byte(s), nil
	case ReforgeLight:
		return []byte(s), nil
	case ReforgeMythic:
		return []byte(s), nil
	case ReforgePure:
		return []byte(s), nil
	case ReforgeSmart:
		return []byte(s), nil
	case ReforgeTitanic:
		return []byte(s), nil
	case ReforgeWise:
		return []byte(s), nil
	case ReforgeVery:
		return []byte(s), nil
	case ReforgeHighly:
		return []byte(s), nil
	case ReforgeBizarre:
		return []byte(s), nil
	case ReforgeItchy:
		return []byte(s), nil
	case ReforgeOmnious:
		return []byte(s), nil
	case ReforgePleasant:
		return []byte(s), nil
	case ReforgePretty:
		return []byte(s), nil
	case ReforgeShiny:
		return []byte(s), nil
	case ReforgeSimple:
		return []byte(s), nil
	case ReforgeStrange:
		return []byte(s), nil
	case ReforgeVivid:
		return []byte(s), nil
	case ReforgeOminous:
		return []byte(s), nil
	case ReforgeSharp:
		return []byte(s), nil
	case ReforgeRapid:
		return []byte(s), nil
	case ReforgeNecrotic:
		return []byte(s), nil
	case ReforgeFabled:
		return []byte(s), nil
	case ReforgePrecise:
		return []byte(s), nil
	case ReforgeGiant:
		return []byte(s), nil
	case ReforgeAoteStone:
		return []byte(s), nil
	case ReforgeSpiritual:
		return []byte(s), nil
	case ReforgeTreacherous:
		return []byte(s), nil
	case ReforgeRenowned:
		return []byte(s), nil
	case ReforgeReinforced:
		return []byte(s), nil
	case ReforgeRichBow:
		return []byte(s), nil
	case ReforgeSpiked:
		return []byte(s), nil
	case ReforgePerfect:
		return []byte(s), nil
	case ReforgeMagnetic:
		return []byte(s), nil
	case ReforgeLoving:
		return []byte(s), nil
	case ReforgeGilded:
		return []byte(s), nil
	case ReforgeOddSword:
		return []byte(s), nil
	case ReforgeSalty:
		return []byte(s), nil
	case ReforgeSilky:
		return []byte(s), nil
	case ReforgeRefined:
		return []byte(s), nil
	case ReforgeSuspicious:
		return []byte(s), nil
	case ReforgeToil:
		return []byte(s), nil
	case ReforgeEmpowered:
		return []byte(s), nil
	case ReforgeFruitful:
		return []byte(s), nil
	case ReforgeBlessed:
		return []byte(s), nil
	case ReforgeShaded:
		return []byte(s), nil
	case ReforgeAwkward:
		return []byte(s), nil
	case ReforgeDirty:
		return []byte(s), nil
	case ReforgeUndead:
		return []byte(s), nil
	case ReforgeCubic:
		return []byte(s), nil
	case ReforgeBloody:
		return []byte(s), nil
	case ReforgeMoil:
		return []byte(s), nil
	case ReforgeRidiculous:
		return []byte(s), nil
	case ReforgeRichSword:
		return []byte(s), nil
	case ReforgeWarped:
		return []byte(s), nil
	case ReforgeOddBow:
		return []byte(s), nil
	case ReforgeCandied:
		return []byte(s), nil
	case ReforgeSubmerged:
		return []byte(s), nil
	case ReforgeAncient:
		return []byte(s), nil
	case ReforgeWithered:
		return []byte(s), nil
	case ReforgeSweet:
		return []byte(s), nil
	case ReforgeFleet:
		return []byte(s), nil
	case ReforgeStellar:
		return []byte(s), nil
	case ReforgeMithraic:
		return []byte(s), nil
	case ReforgeAuspicious:
		return []byte(s), nil
	case ReforgeHeadstrong:
		return []byte(s), nil
	case ReforgeStiff:
		return []byte(s), nil
	case ReforgeBulky:
		return []byte(s), nil
	case ReforgeLucky:
		return []byte(s), nil
	case ReforgeBountiful:
		return []byte(s), nil
	case ReforgeHeated:
		return []byte(s), nil
	case ReforgeJaded:
		return []byte(s), nil
	case ReforgeAmbered:
		return []byte(s), nil
	case ReforgeDoubleBit:
		return []byte(s), nil
	case ReforgeExcellent:
		return []byte(s), nil
	case ReforgeFortunate:
		return []byte(s), nil
	case ReforgeProspector:
		return []byte(s), nil
	case ReforgeLush:
		return []byte(s), nil
	case ReforgeSturdy:
		return []byte(s), nil
	case ReforgeLumberjack:
		return []byte(s), nil
	case ReforgeUnyielding:
		return []byte(s), nil
	case ReforgeGreat:
		return []byte(s), nil
	case ReforgeRobust:
		return []byte(s), nil
	case ReforgeRugged:
		return []byte(s), nil
	case ReforgeZooming:
		return []byte(s), nil
	case ReforgePeasant:
		return []byte(s), nil
	case ReforgeStrengthened:
		return []byte(s), nil
	case ReforgeGlistening:
		return []byte(s), nil
	case ReforgeWaxed:
		return []byte(s), nil
	case ReforgeFortified:
		return []byte(s), nil
	case ReforgeGreenThumb:
		return []byte(s), nil
	case ReforgePitchin:
		return []byte(s), nil
	case ReforgeColdfusion:
		return []byte(s), nil
	case ReforgeUnknown:
		return []byte(s), nil
	case ReforgeAny:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Reforge) UnmarshalText(data []byte) error {
	switch Reforge(data) {
	case ReforgeNone:
		*s = ReforgeNone
		return nil
	case ReforgeDemonic:
		*s = ReforgeDemonic
		return nil
	case ReforgeForceful:
		*s = ReforgeForceful
		return nil
	case ReforgeGentle:
		*s = ReforgeGentle
		return nil
	case ReforgeGodly:
		*s = ReforgeGodly
		return nil
	case ReforgeHurtful:
		*s = ReforgeHurtful
		return nil
	case ReforgeKeen:
		*s = ReforgeKeen
		return nil
	case ReforgeStrong:
		*s = ReforgeStrong
		return nil
	case ReforgeSuperior:
		*s = ReforgeSuperior
		return nil
	case ReforgeUnpleasant:
		*s = ReforgeUnpleasant
		return nil
	case ReforgeZealous:
		*s = ReforgeZealous
		return nil
	case ReforgeOdd:
		*s = ReforgeOdd
		return nil
	case ReforgeRich:
		*s = ReforgeRich
		return nil
	case ReforgeEpic:
		*s = ReforgeEpic
		return nil
	case ReforgeFair:
		*s = ReforgeFair
		return nil
	case ReforgeFast:
		*s = ReforgeFast
		return nil
	case ReforgeHeroic:
		*s = ReforgeHeroic
		return nil
	case ReforgeLegendary:
		*s = ReforgeLegendary
		return nil
	case ReforgeSpicy:
		*s = ReforgeSpicy
		return nil
	case ReforgeDeadly:
		*s = ReforgeDeadly
		return nil
	case ReforgeFine:
		*s = ReforgeFine
		return nil
	case ReforgeGrand:
		*s = ReforgeGrand
		return nil
	case ReforgeHasty:
		*s = ReforgeHasty
		return nil
	case ReforgeNeat:
		*s = ReforgeNeat
		return nil
	case ReforgePapid:
		*s = ReforgePapid
		return nil
	case ReforgeUnreal:
		*s = ReforgeUnreal
		return nil
	case ReforgeClean:
		*s = ReforgeClean
		return nil
	case ReforgeFierce:
		*s = ReforgeFierce
		return nil
	case ReforgeHeavy:
		*s = ReforgeHeavy
		return nil
	case ReforgeLight:
		*s = ReforgeLight
		return nil
	case ReforgeMythic:
		*s = ReforgeMythic
		return nil
	case ReforgePure:
		*s = ReforgePure
		return nil
	case ReforgeSmart:
		*s = ReforgeSmart
		return nil
	case ReforgeTitanic:
		*s = ReforgeTitanic
		return nil
	case ReforgeWise:
		*s = ReforgeWise
		return nil
	case ReforgeVery:
		*s = ReforgeVery
		return nil
	case ReforgeHighly:
		*s = ReforgeHighly
		return nil
	case ReforgeBizarre:
		*s = ReforgeBizarre
		return nil
	case ReforgeItchy:
		*s = ReforgeItchy
		return nil
	case ReforgeOmnious:
		*s = ReforgeOmnious
		return nil
	case ReforgePleasant:
		*s = ReforgePleasant
		return nil
	case ReforgePretty:
		*s = ReforgePretty
		return nil
	case ReforgeShiny:
		*s = ReforgeShiny
		return nil
	case ReforgeSimple:
		*s = ReforgeSimple
		return nil
	case ReforgeStrange:
		*s = ReforgeStrange
		return nil
	case ReforgeVivid:
		*s = ReforgeVivid
		return nil
	case ReforgeOminous:
		*s = ReforgeOminous
		return nil
	case ReforgeSharp:
		*s = ReforgeSharp
		return nil
	case ReforgeRapid:
		*s = ReforgeRapid
		return nil
	case ReforgeNecrotic:
		*s = ReforgeNecrotic
		return nil
	case ReforgeFabled:
		*s = ReforgeFabled
		return nil
	case ReforgePrecise:
		*s = ReforgePrecise
		return nil
	case ReforgeGiant:
		*s = ReforgeGiant
		return nil
	case ReforgeAoteStone:
		*s = ReforgeAoteStone
		return nil
	case ReforgeSpiritual:
		*s = ReforgeSpiritual
		return nil
	case ReforgeTreacherous:
		*s = ReforgeTreacherous
		return nil
	case ReforgeRenowned:
		*s = ReforgeRenowned
		return nil
	case ReforgeReinforced:
		*s = ReforgeReinforced
		return nil
	case ReforgeRichBow:
		*s = ReforgeRichBow
		return nil
	case ReforgeSpiked:
		*s = ReforgeSpiked
		return nil
	case ReforgePerfect:
		*s = ReforgePerfect
		return nil
	case ReforgeMagnetic:
		*s = ReforgeMagnetic
		return nil
	case ReforgeLoving:
		*s = ReforgeLoving
		return nil
	case ReforgeGilded:
		*s = ReforgeGilded
		return nil
	case ReforgeOddSword:
		*s = ReforgeOddSword
		return nil
	case ReforgeSalty:
		*s = ReforgeSalty
		return nil
	case ReforgeSilky:
		*s = ReforgeSilky
		return nil
	case ReforgeRefined:
		*s = ReforgeRefined
		return nil
	case ReforgeSuspicious:
		*s = ReforgeSuspicious
		return nil
	case ReforgeToil:
		*s = ReforgeToil
		return nil
	case ReforgeEmpowered:
		*s = ReforgeEmpowered
		return nil
	case ReforgeFruitful:
		*s = ReforgeFruitful
		return nil
	case ReforgeBlessed:
		*s = ReforgeBlessed
		return nil
	case ReforgeShaded:
		*s = ReforgeShaded
		return nil
	case ReforgeAwkward:
		*s = ReforgeAwkward
		return nil
	case ReforgeDirty:
		*s = ReforgeDirty
		return nil
	case ReforgeUndead:
		*s = ReforgeUndead
		return nil
	case ReforgeCubic:
		*s = ReforgeCubic
		return nil
	case ReforgeBloody:
		*s = ReforgeBloody
		return nil
	case ReforgeMoil:
		*s = ReforgeMoil
		return nil
	case ReforgeRidiculous:
		*s = ReforgeRidiculous
		return nil
	case ReforgeRichSword:
		*s = ReforgeRichSword
		return nil
	case ReforgeWarped:
		*s = ReforgeWarped
		return nil
	case ReforgeOddBow:
		*s = ReforgeOddBow
		return nil
	case ReforgeCandied:
		*s = ReforgeCandied
		return nil
	case ReforgeSubmerged:
		*s = ReforgeSubmerged
		return nil
	case ReforgeAncient:
		*s = ReforgeAncient
		return nil
	case ReforgeWithered:
		*s = ReforgeWithered
		return nil
	case ReforgeSweet:
		*s = ReforgeSweet
		return nil
	case ReforgeFleet:
		*s = ReforgeFleet
		return nil
	case ReforgeStellar:
		*s = ReforgeStellar
		return nil
	case ReforgeMithraic:
		*s = ReforgeMithraic
		return nil
	case ReforgeAuspicious:
		*s = ReforgeAuspicious
		return nil
	case ReforgeHeadstrong:
		*s = ReforgeHeadstrong
		return nil
	case ReforgeStiff:
		*s = ReforgeStiff
		return nil
	case ReforgeBulky:
		*s = ReforgeBulky
		return nil
	case ReforgeLucky:
		*s = ReforgeLucky
		return nil
	case ReforgeBountiful:
		*s = ReforgeBountiful
		return nil
	case ReforgeHeated:
		*s = ReforgeHeated
		return nil
	case ReforgeJaded:
		*s = ReforgeJaded
		return nil
	case ReforgeAmbered:
		*s = ReforgeAmbered
		return nil
	case ReforgeDoubleBit:
		*s = ReforgeDoubleBit
		return nil
	case ReforgeExcellent:
		*s = ReforgeExcellent
		return nil
	case ReforgeFortunate:
		*s = ReforgeFortunate
		return nil
	case ReforgeProspector:
		*s = ReforgeProspector
		return nil
	case ReforgeLush:
		*s = ReforgeLush
		return nil
	case ReforgeSturdy:
		*s = ReforgeSturdy
		return nil
	case ReforgeLumberjack:
		*s = ReforgeLumberjack
		return nil
	case ReforgeUnyielding:
		*s = ReforgeUnyielding
		return nil
	case ReforgeGreat:
		*s = ReforgeGreat
		return nil
	case ReforgeRobust:
		*s = ReforgeRobust
		return nil
	case ReforgeRugged:
		*s = ReforgeRugged
		return nil
	case ReforgeZooming:
		*s = ReforgeZooming
		return nil
	case ReforgePeasant:
		*s = ReforgePeasant
		return nil
	case ReforgeStrengthened:
		*s = ReforgeStrengthened
		return nil
	case ReforgeGlistening:
		*s = ReforgeGlistening
		return nil
	case ReforgeWaxed:
		*s = ReforgeWaxed
		return nil
	case ReforgeFortified:
		*s = ReforgeFortified
		return nil
	case ReforgeGreenThumb:
		*s = ReforgeGreenThumb
		return nil
	case ReforgePitchin:
		*s = ReforgePitchin
		return nil
	case ReforgeColdfusion:
		*s = ReforgeColdfusion
		return nil
	case ReforgeUnknown:
		*s = ReforgeUnknown
		return nil
	case ReforgeAny:
		*s = ReforgeAny
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Ref: #/components/schemas/RequiredCollection
type RequiredCollection struct {
	Name  OptNilString `json:"name"`
	Level OptInt32     `json:"level"`
}

// GetName returns the value of Name.
func (s *RequiredCollection) GetName() OptNilString {
	return s.Name
}

// GetLevel returns the value of Level.
func (s *RequiredCollection) GetLevel() OptInt32 {
	return s.Level
}

// SetName sets the value of Name.
func (s *RequiredCollection) SetName(val OptNilString) {
	s.Name = val
}

// SetLevel sets the value of Level.
func (s *RequiredCollection) SetLevel(val OptInt32) {
	s.Level = val
}

// Ref: #/components/schemas/SaveAuction
type SaveAuction struct {
	UUID             OptNilString           `json:"uuid"`
	Count            OptInt32               `json:"count"`
	StartingBid      OptInt64               `json:"startingBid"`
	Tag              OptNilString           `json:"tag"`
	ItemName         OptNilString           `json:"itemName"`
	Start            OptDateTime            `json:"start"`
	End              OptDateTime            `json:"end"`
	AuctioneerId     OptNilString           `json:"auctioneerId"`
	ProfileId        OptNilString           `json:"profileId"`
	Coop             OptNilStringArray      `json:"coop"`
	CoopMembers      OptNilUUIDArray        `json:"coopMembers"`
	HighestBidAmount OptInt64               `json:"highestBidAmount"`
	Bids             OptNilSaveBidsArray    `json:"bids"`
	AnvilUses        OptInt32               `json:"anvilUses"`
	Enchantments     OptNilEnchantmentArray `json:"enchantments"`
	NbtData          OptNbtData             `json:"nbtData"`
	ItemCreatedAt    OptDateTime            `json:"itemCreatedAt"`
	Reforge          OptReforge             `json:"reforge"`
	Category         OptCategory            `json:"category"`
	Tier             OptTier                `json:"tier"`
	Bin              OptBool                `json:"bin"`
	FlatNbt          OptSaveAuctionFlatNbt  `json:"flatNbt"`
}

// GetUUID returns the value of UUID.
func (s *SaveAuction) GetUUID() OptNilString {
	return s.UUID
}

// GetCount returns the value of Count.
func (s *SaveAuction) GetCount() OptInt32 {
	return s.Count
}

// GetStartingBid returns the value of StartingBid.
func (s *SaveAuction) GetStartingBid() OptInt64 {
	return s.StartingBid
}

// GetTag returns the value of Tag.
func (s *SaveAuction) GetTag() OptNilString {
	return s.Tag
}

// GetItemName returns the value of ItemName.
func (s *SaveAuction) GetItemName() OptNilString {
	return s.ItemName
}

// GetStart returns the value of Start.
func (s *SaveAuction) GetStart() OptDateTime {
	return s.Start
}

// GetEnd returns the value of End.
func (s *SaveAuction) GetEnd() OptDateTime {
	return s.End
}

// GetAuctioneerId returns the value of AuctioneerId.
func (s *SaveAuction) GetAuctioneerId() OptNilString {
	return s.AuctioneerId
}

// GetProfileId returns the value of ProfileId.
func (s *SaveAuction) GetProfileId() OptNilString {
	return s.ProfileId
}

// GetCoop returns the value of Coop.
func (s *SaveAuction) GetCoop() OptNilStringArray {
	return s.Coop
}

// GetCoopMembers returns the value of CoopMembers.
func (s *SaveAuction) GetCoopMembers() OptNilUUIDArray {
	return s.CoopMembers
}

// GetHighestBidAmount returns the value of HighestBidAmount.
func (s *SaveAuction) GetHighestBidAmount() OptInt64 {
	return s.HighestBidAmount
}

// GetBids returns the value of Bids.
func (s *SaveAuction) GetBids() OptNilSaveBidsArray {
	return s.Bids
}

// GetAnvilUses returns the value of AnvilUses.
func (s *SaveAuction) GetAnvilUses() OptInt32 {
	return s.AnvilUses
}

// GetEnchantments returns the value of Enchantments.
func (s *SaveAuction) GetEnchantments() OptNilEnchantmentArray {
	return s.Enchantments
}

// GetNbtData returns the value of NbtData.
func (s *SaveAuction) GetNbtData() OptNbtData {
	return s.NbtData
}

// GetItemCreatedAt returns the value of ItemCreatedAt.
func (s *SaveAuction) GetItemCreatedAt() OptDateTime {
	return s.ItemCreatedAt
}

// GetReforge returns the value of Reforge.
func (s *SaveAuction) GetReforge() OptReforge {
	return s.Reforge
}

// GetCategory returns the value of Category.
func (s *SaveAuction) GetCategory() OptCategory {
	return s.Category
}

// GetTier returns the value of Tier.
func (s *SaveAuction) GetTier() OptTier {
	return s.Tier
}

// GetBin returns the value of Bin.
func (s *SaveAuction) GetBin() OptBool {
	return s.Bin
}

// GetFlatNbt returns the value of FlatNbt.
func (s *SaveAuction) GetFlatNbt() OptSaveAuctionFlatNbt {
	return s.FlatNbt
}

// SetUUID sets the value of UUID.
func (s *SaveAuction) SetUUID(val OptNilString) {
	s.UUID = val
}

// SetCount sets the value of Count.
func (s *SaveAuction) SetCount(val OptInt32) {
	s.Count = val
}

// SetStartingBid sets the value of StartingBid.
func (s *SaveAuction) SetStartingBid(val OptInt64) {
	s.StartingBid = val
}

// SetTag sets the value of Tag.
func (s *SaveAuction) SetTag(val OptNilString) {
	s.Tag = val
}

// SetItemName sets the value of ItemName.
func (s *SaveAuction) SetItemName(val OptNilString) {
	s.ItemName = val
}

// SetStart sets the value of Start.
func (s *SaveAuction) SetStart(val OptDateTime) {
	s.Start = val
}

// SetEnd sets the value of End.
func (s *SaveAuction) SetEnd(val OptDateTime) {
	s.End = val
}

// SetAuctioneerId sets the value of AuctioneerId.
func (s *SaveAuction) SetAuctioneerId(val OptNilString) {
	s.AuctioneerId = val
}

// SetProfileId sets the value of ProfileId.
func (s *SaveAuction) SetProfileId(val OptNilString) {
	s.ProfileId = val
}

// SetCoop sets the value of Coop.
func (s *SaveAuction) SetCoop(val OptNilStringArray) {
	s.Coop = val
}

// SetCoopMembers sets the value of CoopMembers.
func (s *SaveAuction) SetCoopMembers(val OptNilUUIDArray) {
	s.CoopMembers = val
}

// SetHighestBidAmount sets the value of HighestBidAmount.
func (s *SaveAuction) SetHighestBidAmount(val OptInt64) {
	s.HighestBidAmount = val
}

// SetBids sets the value of Bids.
func (s *SaveAuction) SetBids(val OptNilSaveBidsArray) {
	s.Bids = val
}

// SetAnvilUses sets the value of AnvilUses.
func (s *SaveAuction) SetAnvilUses(val OptInt32) {
	s.AnvilUses = val
}

// SetEnchantments sets the value of Enchantments.
func (s *SaveAuction) SetEnchantments(val OptNilEnchantmentArray) {
	s.Enchantments = val
}

// SetNbtData sets the value of NbtData.
func (s *SaveAuction) SetNbtData(val OptNbtData) {
	s.NbtData = val
}

// SetItemCreatedAt sets the value of ItemCreatedAt.
func (s *SaveAuction) SetItemCreatedAt(val OptDateTime) {
	s.ItemCreatedAt = val
}

// SetReforge sets the value of Reforge.
func (s *SaveAuction) SetReforge(val OptReforge) {
	s.Reforge = val
}

// SetCategory sets the value of Category.
func (s *SaveAuction) SetCategory(val OptCategory) {
	s.Category = val
}

// SetTier sets the value of Tier.
func (s *SaveAuction) SetTier(val OptTier) {
	s.Tier = val
}

// SetBin sets the value of Bin.
func (s *SaveAuction) SetBin(val OptBool) {
	s.Bin = val
}

// SetFlatNbt sets the value of FlatNbt.
func (s *SaveAuction) SetFlatNbt(val OptSaveAuctionFlatNbt) {
	s.FlatNbt = val
}

type SaveAuctionFlatNbt struct{}

// Ref: #/components/schemas/SaveBids
type SaveBids struct {
	Bidder    OptNilString `json:"bidder"`
	ProfileId OptNilString `json:"profileId"`
	Amount    OptInt64     `json:"amount"`
	Timestamp OptDateTime  `json:"timestamp"`
}

// GetBidder returns the value of Bidder.
func (s *SaveBids) GetBidder() OptNilString {
	return s.Bidder
}

// GetProfileId returns the value of ProfileId.
func (s *SaveBids) GetProfileId() OptNilString {
	return s.ProfileId
}

// GetAmount returns the value of Amount.
func (s *SaveBids) GetAmount() OptInt64 {
	return s.Amount
}

// GetTimestamp returns the value of Timestamp.
func (s *SaveBids) GetTimestamp() OptDateTime {
	return s.Timestamp
}

// SetBidder sets the value of Bidder.
func (s *SaveBids) SetBidder(val OptNilString) {
	s.Bidder = val
}

// SetProfileId sets the value of ProfileId.
func (s *SaveBids) SetProfileId(val OptNilString) {
	s.ProfileId = val
}

// SetAmount sets the value of Amount.
func (s *SaveBids) SetAmount(val OptInt64) {
	s.Amount = val
}

// SetTimestamp sets the value of Timestamp.
func (s *SaveBids) SetTimestamp(val OptDateTime) {
	s.Timestamp = val
}

// Ref: #/components/schemas/SearchResultItem
type SearchResultItem struct {
	Name    OptNilString `json:"name"`
	ID      OptNilString `json:"id"`
	Type    OptNilString `json:"type"`
	IconUrl OptNilString `json:"iconUrl"`
	Img     OptNilString `json:"img"`
	Tier    OptTier      `json:"tier"`
}

// GetName returns the value of Name.
func (s *SearchResultItem) GetName() OptNilString {
	return s.Name
}

// GetID returns the value of ID.
func (s *SearchResultItem) GetID() OptNilString {
	return s.ID
}

// GetType returns the value of Type.
func (s *SearchResultItem) GetType() OptNilString {
	return s.Type
}

// GetIconUrl returns the value of IconUrl.
func (s *SearchResultItem) GetIconUrl() OptNilString {
	return s.IconUrl
}

// GetImg returns the value of Img.
func (s *SearchResultItem) GetImg() OptNilString {
	return s.Img
}

// GetTier returns the value of Tier.
func (s *SearchResultItem) GetTier() OptTier {
	return s.Tier
}

// SetName sets the value of Name.
func (s *SearchResultItem) SetName(val OptNilString) {
	s.Name = val
}

// SetID sets the value of ID.
func (s *SearchResultItem) SetID(val OptNilString) {
	s.ID = val
}

// SetType sets the value of Type.
func (s *SearchResultItem) SetType(val OptNilString) {
	s.Type = val
}

// SetIconUrl sets the value of IconUrl.
func (s *SearchResultItem) SetIconUrl(val OptNilString) {
	s.IconUrl = val
}

// SetImg sets the value of Img.
func (s *SearchResultItem) SetImg(val OptNilString) {
	s.Img = val
}

// SetTier sets the value of Tier.
func (s *SearchResultItem) SetTier(val OptTier) {
	s.Tier = val
}

// Ref: #/components/schemas/SellOrder
type SellOrder struct {
	Amount       OptInt32   `json:"amount"`
	PricePerUnit OptFloat64 `json:"pricePerUnit"`
	Orders       OptInt32   `json:"orders"`
}

// GetAmount returns the value of Amount.
func (s *SellOrder) GetAmount() OptInt32 {
	return s.Amount
}

// GetPricePerUnit returns the value of PricePerUnit.
func (s *SellOrder) GetPricePerUnit() OptFloat64 {
	return s.PricePerUnit
}

// GetOrders returns the value of Orders.
func (s *SellOrder) GetOrders() OptInt32 {
	return s.Orders
}

// SetAmount sets the value of Amount.
func (s *SellOrder) SetAmount(val OptInt32) {
	s.Amount = val
}

// SetPricePerUnit sets the value of PricePerUnit.
func (s *SellOrder) SetPricePerUnit(val OptFloat64) {
	s.PricePerUnit = val
}

// SetOrders sets the value of Orders.
func (s *SellOrder) SetOrders(val OptInt32) {
	s.Orders = val
}

// Ref: #/components/schemas/SkyblockItem
type SkyblockItem struct {
	NpcSellPrice  OptFloat32      `json:"npcSellPrice"`
	MinecraftType OptNilString    `json:"minecraftType"`
	IconUrl       OptNilString    `json:"iconUrl"`
	Name          OptNilString    `json:"name"`
	Tag           OptNilString    `json:"tag"`
	Flags         OptItemFlags    `json:"flags"`
	Tier          OptTier         `json:"tier"`
	Category      OptItemCategory `json:"category"`
}

// GetNpcSellPrice returns the value of NpcSellPrice.
func (s *SkyblockItem) GetNpcSellPrice() OptFloat32 {
	return s.NpcSellPrice
}

// GetMinecraftType returns the value of MinecraftType.
func (s *SkyblockItem) GetMinecraftType() OptNilString {
	return s.MinecraftType
}

// GetIconUrl returns the value of IconUrl.
func (s *SkyblockItem) GetIconUrl() OptNilString {
	return s.IconUrl
}

// GetName returns the value of Name.
func (s *SkyblockItem) GetName() OptNilString {
	return s.Name
}

// GetTag returns the value of Tag.
func (s *SkyblockItem) GetTag() OptNilString {
	return s.Tag
}

// GetFlags returns the value of Flags.
func (s *SkyblockItem) GetFlags() OptItemFlags {
	return s.Flags
}

// GetTier returns the value of Tier.
func (s *SkyblockItem) GetTier() OptTier {
	return s.Tier
}

// GetCategory returns the value of Category.
func (s *SkyblockItem) GetCategory() OptItemCategory {
	return s.Category
}

// SetNpcSellPrice sets the value of NpcSellPrice.
func (s *SkyblockItem) SetNpcSellPrice(val OptFloat32) {
	s.NpcSellPrice = val
}

// SetMinecraftType sets the value of MinecraftType.
func (s *SkyblockItem) SetMinecraftType(val OptNilString) {
	s.MinecraftType = val
}

// SetIconUrl sets the value of IconUrl.
func (s *SkyblockItem) SetIconUrl(val OptNilString) {
	s.IconUrl = val
}

// SetName sets the value of Name.
func (s *SkyblockItem) SetName(val OptNilString) {
	s.Name = val
}

// SetTag sets the value of Tag.
func (s *SkyblockItem) SetTag(val OptNilString) {
	s.Tag = val
}

// SetFlags sets the value of Flags.
func (s *SkyblockItem) SetFlags(val OptItemFlags) {
	s.Flags = val
}

// SetTier sets the value of Tier.
func (s *SkyblockItem) SetTier(val OptTier) {
	s.Tier = val
}

// SetCategory sets the value of Category.
func (s *SkyblockItem) SetCategory(val OptItemCategory) {
	s.Category = val
}

// Ref: #/components/schemas/StorageQuickStatus
type StorageQuickStatus struct {
	ProductId       OptNilString         `json:"productId"`
	BuyPrice        OptFloat64           `json:"buyPrice"`
	BuyVolume       OptInt64             `json:"buyVolume"`
	BuyMovingWeek   OptInt64             `json:"buyMovingWeek"`
	BuyOrdersCount  OptInt32             `json:"buyOrdersCount"`
	SellPrice       OptFloat64           `json:"sellPrice"`
	SellVolume      OptInt64             `json:"sellVolume"`
	SellMovingWeek  OptInt64             `json:"sellMovingWeek"`
	SellOrdersCount OptInt32             `json:"sellOrdersCount"`
	TimeStamp       OptDateTime          `json:"timeStamp"`
	BuyOrders       OptNilBuyOrderArray  `json:"buyOrders"`
	SellOrders      OptNilSellOrderArray `json:"sellOrders"`
}

// GetProductId returns the value of ProductId.
func (s *StorageQuickStatus) GetProductId() OptNilString {
	return s.ProductId
}

// GetBuyPrice returns the value of BuyPrice.
func (s *StorageQuickStatus) GetBuyPrice() OptFloat64 {
	return s.BuyPrice
}

// GetBuyVolume returns the value of BuyVolume.
func (s *StorageQuickStatus) GetBuyVolume() OptInt64 {
	return s.BuyVolume
}

// GetBuyMovingWeek returns the value of BuyMovingWeek.
func (s *StorageQuickStatus) GetBuyMovingWeek() OptInt64 {
	return s.BuyMovingWeek
}

// GetBuyOrdersCount returns the value of BuyOrdersCount.
func (s *StorageQuickStatus) GetBuyOrdersCount() OptInt32 {
	return s.BuyOrdersCount
}

// GetSellPrice returns the value of SellPrice.
func (s *StorageQuickStatus) GetSellPrice() OptFloat64 {
	return s.SellPrice
}

// GetSellVolume returns the value of SellVolume.
func (s *StorageQuickStatus) GetSellVolume() OptInt64 {
	return s.SellVolume
}

// GetSellMovingWeek returns the value of SellMovingWeek.
func (s *StorageQuickStatus) GetSellMovingWeek() OptInt64 {
	return s.SellMovingWeek
}

// GetSellOrdersCount returns the value of SellOrdersCount.
func (s *StorageQuickStatus) GetSellOrdersCount() OptInt32 {
	return s.SellOrdersCount
}

// GetTimeStamp returns the value of TimeStamp.
func (s *StorageQuickStatus) GetTimeStamp() OptDateTime {
	return s.TimeStamp
}

// GetBuyOrders returns the value of BuyOrders.
func (s *StorageQuickStatus) GetBuyOrders() OptNilBuyOrderArray {
	return s.BuyOrders
}

// GetSellOrders returns the value of SellOrders.
func (s *StorageQuickStatus) GetSellOrders() OptNilSellOrderArray {
	return s.SellOrders
}

// SetProductId sets the value of ProductId.
func (s *StorageQuickStatus) SetProductId(val OptNilString) {
	s.ProductId = val
}

// SetBuyPrice sets the value of BuyPrice.
func (s *StorageQuickStatus) SetBuyPrice(val OptFloat64) {
	s.BuyPrice = val
}

// SetBuyVolume sets the value of BuyVolume.
func (s *StorageQuickStatus) SetBuyVolume(val OptInt64) {
	s.BuyVolume = val
}

// SetBuyMovingWeek sets the value of BuyMovingWeek.
func (s *StorageQuickStatus) SetBuyMovingWeek(val OptInt64) {
	s.BuyMovingWeek = val
}

// SetBuyOrdersCount sets the value of BuyOrdersCount.
func (s *StorageQuickStatus) SetBuyOrdersCount(val OptInt32) {
	s.BuyOrdersCount = val
}

// SetSellPrice sets the value of SellPrice.
func (s *StorageQuickStatus) SetSellPrice(val OptFloat64) {
	s.SellPrice = val
}

// SetSellVolume sets the value of SellVolume.
func (s *StorageQuickStatus) SetSellVolume(val OptInt64) {
	s.SellVolume = val
}

// SetSellMovingWeek sets the value of SellMovingWeek.
func (s *StorageQuickStatus) SetSellMovingWeek(val OptInt64) {
	s.SellMovingWeek = val
}

// SetSellOrdersCount sets the value of SellOrdersCount.
func (s *StorageQuickStatus) SetSellOrdersCount(val OptInt32) {
	s.SellOrdersCount = val
}

// SetTimeStamp sets the value of TimeStamp.
func (s *StorageQuickStatus) SetTimeStamp(val OptDateTime) {
	s.TimeStamp = val
}

// SetBuyOrders sets the value of BuyOrders.
func (s *StorageQuickStatus) SetBuyOrders(val OptNilBuyOrderArray) {
	s.BuyOrders = val
}

// SetSellOrders sets the value of SellOrders.
func (s *StorageQuickStatus) SetSellOrders(val OptNilSellOrderArray) {
	s.SellOrders = val
}

// Element for the /lowSupply page.
// Ref: #/components/schemas/SupplyElement
type SupplyElement struct {
	// Item Tag of the time.
	Tag OptNilString `json:"tag"`
	// How much supply there is on the ah.
	Supply OptInt64 `json:"supply"`
	// Median sell price.
	Median   OptInt64       `json:"median"`
	LbinData OptBinResponse `json:"lbinData"`
	// The average amount of sells in 24 hours.
	Volume OptFloat64 `json:"volume"`
}

// GetTag returns the value of Tag.
func (s *SupplyElement) GetTag() OptNilString {
	return s.Tag
}

// GetSupply returns the value of Supply.
func (s *SupplyElement) GetSupply() OptInt64 {
	return s.Supply
}

// GetMedian returns the value of Median.
func (s *SupplyElement) GetMedian() OptInt64 {
	return s.Median
}

// GetLbinData returns the value of LbinData.
func (s *SupplyElement) GetLbinData() OptBinResponse {
	return s.LbinData
}

// GetVolume returns the value of Volume.
func (s *SupplyElement) GetVolume() OptFloat64 {
	return s.Volume
}

// SetTag sets the value of Tag.
func (s *SupplyElement) SetTag(val OptNilString) {
	s.Tag = val
}

// SetSupply sets the value of Supply.
func (s *SupplyElement) SetSupply(val OptInt64) {
	s.Supply = val
}

// SetMedian sets the value of Median.
func (s *SupplyElement) SetMedian(val OptInt64) {
	s.Median = val
}

// SetLbinData sets the value of LbinData.
func (s *SupplyElement) SetLbinData(val OptBinResponse) {
	s.LbinData = val
}

// SetVolume sets the value of Volume.
func (s *SupplyElement) SetVolume(val OptFloat64) {
	s.Volume = val
}

// Ref: #/components/schemas/Tier
type Tier string

const (
	TierUNKNOWN     Tier = "UNKNOWN"
	TierCOMMON      Tier = "COMMON"
	TierUNCOMMON    Tier = "UNCOMMON"
	TierRARE        Tier = "RARE"
	TierEPIC        Tier = "EPIC"
	TierLEGENDARY   Tier = "LEGENDARY"
	TierSPECIAL     Tier = "SPECIAL"
	TierVERYSPECIAL Tier = "VERY_SPECIAL"
	TierMYTHIC      Tier = "MYTHIC"
	TierSUPREME     Tier = "SUPREME"
)

// MarshalText implements encoding.TextMarshaler.
func (s Tier) MarshalText() ([]byte, error) {
	switch s {
	case TierUNKNOWN:
		return []byte(s), nil
	case TierCOMMON:
		return []byte(s), nil
	case TierUNCOMMON:
		return []byte(s), nil
	case TierRARE:
		return []byte(s), nil
	case TierEPIC:
		return []byte(s), nil
	case TierLEGENDARY:
		return []byte(s), nil
	case TierSPECIAL:
		return []byte(s), nil
	case TierVERYSPECIAL:
		return []byte(s), nil
	case TierMYTHIC:
		return []byte(s), nil
	case TierSUPREME:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *Tier) UnmarshalText(data []byte) error {
	switch Tier(data) {
	case TierUNKNOWN:
		*s = TierUNKNOWN
		return nil
	case TierCOMMON:
		*s = TierCOMMON
		return nil
	case TierUNCOMMON:
		*s = TierUNCOMMON
		return nil
	case TierRARE:
		*s = TierRARE
		return nil
	case TierEPIC:
		*s = TierEPIC
		return nil
	case TierLEGENDARY:
		*s = TierLEGENDARY
		return nil
	case TierSPECIAL:
		*s = TierSPECIAL
		return nil
	case TierVERYSPECIAL:
		*s = TierVERYSPECIAL
		return nil
	case TierMYTHIC:
		*s = TierMYTHIC
		return nil
	case TierSUPREME:
		*s = TierSUPREME
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Additional arguments for a topup.
// Ref: #/components/schemas/TopUpArguments
type TopUpArguments struct {
	// A specific amount of coins to topup.
	CoinAmount OptInt32 `json:"coinAmount"`
	// The url to redirect to after successful payment.
	SuccessUrl OptNilString `json:"successUrl"`
	// The url to redirect to when user aborts payment.
	CancelUrl OptNilString `json:"cancelUrl"`
}

// GetCoinAmount returns the value of CoinAmount.
func (s *TopUpArguments) GetCoinAmount() OptInt32 {
	return s.CoinAmount
}

// GetSuccessUrl returns the value of SuccessUrl.
func (s *TopUpArguments) GetSuccessUrl() OptNilString {
	return s.SuccessUrl
}

// GetCancelUrl returns the value of CancelUrl.
func (s *TopUpArguments) GetCancelUrl() OptNilString {
	return s.CancelUrl
}

// SetCoinAmount sets the value of CoinAmount.
func (s *TopUpArguments) SetCoinAmount(val OptInt32) {
	s.CoinAmount = val
}

// SetSuccessUrl sets the value of SuccessUrl.
func (s *TopUpArguments) SetSuccessUrl(val OptNilString) {
	s.SuccessUrl = val
}

// SetCancelUrl sets the value of CancelUrl.
func (s *TopUpArguments) SetCancelUrl(val OptNilString) {
	s.CancelUrl = val
}

// Ref: #/components/schemas/TopUpProduct
type TopUpProduct struct {
	Type             OptProductType `json:"type"`
	Price            OptFloat64     `json:"price"`
	CurrencyCode     OptNilString   `json:"currencyCode"`
	ProviderSlug     OptNilString   `json:"providerSlug"`
	ID               OptInt32       `json:"id"`
	Title            OptNilString   `json:"title"`
	Slug             OptNilString   `json:"slug"`
	Description      OptNilString   `json:"description"`
	Cost             OptFloat64     `json:"cost"`
	OwnershipSeconds OptInt64       `json:"ownershipSeconds"`
}

// GetType returns the value of Type.
func (s *TopUpProduct) GetType() OptProductType {
	return s.Type
}

// GetPrice returns the value of Price.
func (s *TopUpProduct) GetPrice() OptFloat64 {
	return s.Price
}

// GetCurrencyCode returns the value of CurrencyCode.
func (s *TopUpProduct) GetCurrencyCode() OptNilString {
	return s.CurrencyCode
}

// GetProviderSlug returns the value of ProviderSlug.
func (s *TopUpProduct) GetProviderSlug() OptNilString {
	return s.ProviderSlug
}

// GetID returns the value of ID.
func (s *TopUpProduct) GetID() OptInt32 {
	return s.ID
}

// GetTitle returns the value of Title.
func (s *TopUpProduct) GetTitle() OptNilString {
	return s.Title
}

// GetSlug returns the value of Slug.
func (s *TopUpProduct) GetSlug() OptNilString {
	return s.Slug
}

// GetDescription returns the value of Description.
func (s *TopUpProduct) GetDescription() OptNilString {
	return s.Description
}

// GetCost returns the value of Cost.
func (s *TopUpProduct) GetCost() OptFloat64 {
	return s.Cost
}

// GetOwnershipSeconds returns the value of OwnershipSeconds.
func (s *TopUpProduct) GetOwnershipSeconds() OptInt64 {
	return s.OwnershipSeconds
}

// SetType sets the value of Type.
func (s *TopUpProduct) SetType(val OptProductType) {
	s.Type = val
}

// SetPrice sets the value of Price.
func (s *TopUpProduct) SetPrice(val OptFloat64) {
	s.Price = val
}

// SetCurrencyCode sets the value of CurrencyCode.
func (s *TopUpProduct) SetCurrencyCode(val OptNilString) {
	s.CurrencyCode = val
}

// SetProviderSlug sets the value of ProviderSlug.
func (s *TopUpProduct) SetProviderSlug(val OptNilString) {
	s.ProviderSlug = val
}

// SetID sets the value of ID.
func (s *TopUpProduct) SetID(val OptInt32) {
	s.ID = val
}

// SetTitle sets the value of Title.
func (s *TopUpProduct) SetTitle(val OptNilString) {
	s.Title = val
}

// SetSlug sets the value of Slug.
func (s *TopUpProduct) SetSlug(val OptNilString) {
	s.Slug = val
}

// SetDescription sets the value of Description.
func (s *TopUpProduct) SetDescription(val OptNilString) {
	s.Description = val
}

// SetCost sets the value of Cost.
func (s *TopUpProduct) SetCost(val OptFloat64) {
	s.Cost = val
}

// SetOwnershipSeconds sets the value of OwnershipSeconds.
func (s *TopUpProduct) SetOwnershipSeconds(val OptInt64) {
	s.OwnershipSeconds = val
}

// Ref: #/components/schemas/UuId
type UUID struct {
	ID    OptInt32     `json:"id"`
	Value OptNilString `json:"value"`
}

// GetID returns the value of ID.
func (s *UUID) GetID() OptInt32 {
	return s.ID
}

// GetValue returns the value of Value.
func (s *UUID) GetValue() OptNilString {
	return s.Value
}

// SetID sets the value of ID.
func (s *UUID) SetID(val OptInt32) {
	s.ID = val
}

// SetValue sets the value of Value.
func (s *UUID) SetValue(val OptNilString) {
	s.Value = val
}

// Ref: #/components/schemas/VisibilitySettings
type VisibilitySettings struct {
	Cost               OptBool  `json:"cost"`
	EstProfit          OptBool  `json:"estProfit"`
	Lbin               OptBool  `json:"lbin"`
	Slbin              OptBool  `json:"slbin"`
	MedPrice           OptBool  `json:"medPrice"`
	Seller             OptBool  `json:"seller"`
	Volume             OptBool  `json:"volume"`
	ExtraFields        OptInt32 `json:"extraFields"`
	AvgSellTime        OptBool  `json:"avgSellTime"`
	ProfitPercent      OptBool  `json:"profitPercent"`
	Profit             OptBool  `json:"profit"`
	SellerOpenBtn      OptBool  `json:"sellerOpenBtn"`
	Lore               OptBool  `json:"lore"`
	Links              OptBool  `json:"links"`
	CopySuccessMessage OptBool  `json:"copySuccessMessage"`
	HideSold           OptBool  `json:"hideSold"`
}

// GetCost returns the value of Cost.
func (s *VisibilitySettings) GetCost() OptBool {
	return s.Cost
}

// GetEstProfit returns the value of EstProfit.
func (s *VisibilitySettings) GetEstProfit() OptBool {
	return s.EstProfit
}

// GetLbin returns the value of Lbin.
func (s *VisibilitySettings) GetLbin() OptBool {
	return s.Lbin
}

// GetSlbin returns the value of Slbin.
func (s *VisibilitySettings) GetSlbin() OptBool {
	return s.Slbin
}

// GetMedPrice returns the value of MedPrice.
func (s *VisibilitySettings) GetMedPrice() OptBool {
	return s.MedPrice
}

// GetSeller returns the value of Seller.
func (s *VisibilitySettings) GetSeller() OptBool {
	return s.Seller
}

// GetVolume returns the value of Volume.
func (s *VisibilitySettings) GetVolume() OptBool {
	return s.Volume
}

// GetExtraFields returns the value of ExtraFields.
func (s *VisibilitySettings) GetExtraFields() OptInt32 {
	return s.ExtraFields
}

// GetAvgSellTime returns the value of AvgSellTime.
func (s *VisibilitySettings) GetAvgSellTime() OptBool {
	return s.AvgSellTime
}

// GetProfitPercent returns the value of ProfitPercent.
func (s *VisibilitySettings) GetProfitPercent() OptBool {
	return s.ProfitPercent
}

// GetProfit returns the value of Profit.
func (s *VisibilitySettings) GetProfit() OptBool {
	return s.Profit
}

// GetSellerOpenBtn returns the value of SellerOpenBtn.
func (s *VisibilitySettings) GetSellerOpenBtn() OptBool {
	return s.SellerOpenBtn
}

// GetLore returns the value of Lore.
func (s *VisibilitySettings) GetLore() OptBool {
	return s.Lore
}

// GetLinks returns the value of Links.
func (s *VisibilitySettings) GetLinks() OptBool {
	return s.Links
}

// GetCopySuccessMessage returns the value of CopySuccessMessage.
func (s *VisibilitySettings) GetCopySuccessMessage() OptBool {
	return s.CopySuccessMessage
}

// GetHideSold returns the value of HideSold.
func (s *VisibilitySettings) GetHideSold() OptBool {
	return s.HideSold
}

// SetCost sets the value of Cost.
func (s *VisibilitySettings) SetCost(val OptBool) {
	s.Cost = val
}

// SetEstProfit sets the value of EstProfit.
func (s *VisibilitySettings) SetEstProfit(val OptBool) {
	s.EstProfit = val
}

// SetLbin sets the value of Lbin.
func (s *VisibilitySettings) SetLbin(val OptBool) {
	s.Lbin = val
}

// SetSlbin sets the value of Slbin.
func (s *VisibilitySettings) SetSlbin(val OptBool) {
	s.Slbin = val
}

// SetMedPrice sets the value of MedPrice.
func (s *VisibilitySettings) SetMedPrice(val OptBool) {
	s.MedPrice = val
}

// SetSeller sets the value of Seller.
func (s *VisibilitySettings) SetSeller(val OptBool) {
	s.Seller = val
}

// SetVolume sets the value of Volume.
func (s *VisibilitySettings) SetVolume(val OptBool) {
	s.Volume = val
}

// SetExtraFields sets the value of ExtraFields.
func (s *VisibilitySettings) SetExtraFields(val OptInt32) {
	s.ExtraFields = val
}

// SetAvgSellTime sets the value of AvgSellTime.
func (s *VisibilitySettings) SetAvgSellTime(val OptBool) {
	s.AvgSellTime = val
}

// SetProfitPercent sets the value of ProfitPercent.
func (s *VisibilitySettings) SetProfitPercent(val OptBool) {
	s.ProfitPercent = val
}

// SetProfit sets the value of Profit.
func (s *VisibilitySettings) SetProfit(val OptBool) {
	s.Profit = val
}

// SetSellerOpenBtn sets the value of SellerOpenBtn.
func (s *VisibilitySettings) SetSellerOpenBtn(val OptBool) {
	s.SellerOpenBtn = val
}

// SetLore sets the value of Lore.
func (s *VisibilitySettings) SetLore(val OptBool) {
	s.Lore = val
}

// SetLinks sets the value of Links.
func (s *VisibilitySettings) SetLinks(val OptBool) {
	s.Links = val
}

// SetCopySuccessMessage sets the value of CopySuccessMessage.
func (s *VisibilitySettings) SetCopySuccessMessage(val OptBool) {
	s.CopySuccessMessage = val
}

// SetHideSold sets the value of HideSold.
func (s *VisibilitySettings) SetHideSold(val OptBool) {
	s.HideSold = val
}
