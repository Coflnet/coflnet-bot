// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"

	"github.com/ogen-go/ogen/json"
)

// Encode encodes APIAuctionAuctionUuidUIDGetOKApplicationJSON as json.
func (s APIAuctionAuctionUuidUIDGetOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes APIAuctionAuctionUuidUIDGetOKApplicationJSON from json.
func (s *APIAuctionAuctionUuidUIDGetOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIAuctionAuctionUuidUIDGetOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIAuctionAuctionUuidUIDGetOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIAuctionAuctionUuidUIDGetOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIAuctionAuctionUuidUIDGetOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *APIAuctionsUidsSoldPostOKApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *APIAuctionsUidsSoldPostOKApplicationJSON) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfAPIAuctionsUidsSoldPostOKApplicationJSON = [0]string{}

// Decode decodes APIAuctionsUidsSoldPostOKApplicationJSON from json.
func (s *APIAuctionsUidsSoldPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIAuctionsUidsSoldPostOKApplicationJSON to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode APIAuctionsUidsSoldPostOKApplicationJSON")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIAuctionsUidsSoldPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIAuctionsUidsSoldPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON as json.
func (s APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON from json.
func (s *APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIBazaarItemHistoryItemTagStatusGetOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *APICraftAPICraftGetOKApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *APICraftAPICraftGetOKApplicationJSON) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfAPICraftAPICraftGetOKApplicationJSON = [0]string{}

// Decode decodes APICraftAPICraftGetOKApplicationJSON from json.
func (s *APICraftAPICraftGetOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICraftAPICraftGetOKApplicationJSON to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode APICraftAPICraftGetOKApplicationJSON")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICraftAPICraftGetOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICraftAPICraftGetOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *APICraftRecipeItemTagGetOKApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *APICraftRecipeItemTagGetOKApplicationJSON) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfAPICraftRecipeItemTagGetOKApplicationJSON = [0]string{}

// Decode decodes APICraftRecipeItemTagGetOKApplicationJSON from json.
func (s *APICraftRecipeItemTagGetOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APICraftRecipeItemTagGetOKApplicationJSON to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode APICraftRecipeItemTagGetOKApplicationJSON")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APICraftRecipeItemTagGetOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APICraftRecipeItemTagGetOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIDataProxyPostOKApplicationJSON as json.
func (s APIDataProxyPostOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes APIDataProxyPostOKApplicationJSON from json.
func (s *APIDataProxyPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIDataProxyPostOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIDataProxyPostOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIDataProxyPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIDataProxyPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *APIItemsNamesPostOKApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *APIItemsNamesPostOKApplicationJSON) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfAPIItemsNamesPostOKApplicationJSON = [0]string{}

// Decode decodes APIItemsNamesPostOKApplicationJSON from json.
func (s *APIItemsNamesPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIItemsNamesPostOKApplicationJSON to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode APIItemsNamesPostOKApplicationJSON")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIItemsNamesPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIItemsNamesPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIModDescriptionModificationsPostApplicationJSONBadRequest as json.
func (s *APIModDescriptionModificationsPostApplicationJSONBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APIModDescriptionModificationsPostApplicationJSONBadRequest from json.
func (s *APIModDescriptionModificationsPostApplicationJSONBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIModDescriptionModificationsPostApplicationJSONBadRequest to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIModDescriptionModificationsPostApplicationJSONBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIModDescriptionModificationsPostApplicationJSONBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIModDescriptionModificationsPostApplicationJSONBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIModDescriptionModificationsPostApplicationJSONInternalServerError as json.
func (s *APIModDescriptionModificationsPostApplicationJSONInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APIModDescriptionModificationsPostApplicationJSONInternalServerError from json.
func (s *APIModDescriptionModificationsPostApplicationJSONInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIModDescriptionModificationsPostApplicationJSONInternalServerError to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIModDescriptionModificationsPostApplicationJSONInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIModDescriptionModificationsPostApplicationJSONInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIModDescriptionModificationsPostApplicationJSONInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIModDescriptionModificationsPostOKApplicationJSON as json.
func (s APIModDescriptionModificationsPostOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := [][]DescModification(s)

	e.ArrStart()
	for _, elem := range unwrapped {
		e.ArrStart()
		for _, elem := range elem {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	e.ArrEnd()
}

// Decode decodes APIModDescriptionModificationsPostOKApplicationJSON from json.
func (s *APIModDescriptionModificationsPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIModDescriptionModificationsPostOKApplicationJSON to nil")
	}
	var unwrapped [][]DescModification
	if err := func() error {
		unwrapped = make([][]DescModification, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem []DescModification
			elem = make([]DescModification, 0)
			if err := d.Arr(func(d *jx.Decoder) error {
				var elemElem DescModification
				if err := elemElem.Decode(d); err != nil {
					return err
				}
				elem = append(elem, elemElem)
				return nil
			}); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIModDescriptionModificationsPostOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIModDescriptionModificationsPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIModDescriptionModificationsPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIModDescriptionPostApplicationJSONBadRequest as json.
func (s *APIModDescriptionPostApplicationJSONBadRequest) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APIModDescriptionPostApplicationJSONBadRequest from json.
func (s *APIModDescriptionPostApplicationJSONBadRequest) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIModDescriptionPostApplicationJSONBadRequest to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIModDescriptionPostApplicationJSONBadRequest(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIModDescriptionPostApplicationJSONBadRequest) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIModDescriptionPostApplicationJSONBadRequest) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIModDescriptionPostApplicationJSONInternalServerError as json.
func (s *APIModDescriptionPostApplicationJSONInternalServerError) Encode(e *jx.Encoder) {
	unwrapped := (*ErrorResponse)(s)

	unwrapped.Encode(e)
}

// Decode decodes APIModDescriptionPostApplicationJSONInternalServerError from json.
func (s *APIModDescriptionPostApplicationJSONInternalServerError) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIModDescriptionPostApplicationJSONInternalServerError to nil")
	}
	var unwrapped ErrorResponse
	if err := func() error {
		if err := unwrapped.Decode(d); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIModDescriptionPostApplicationJSONInternalServerError(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIModDescriptionPostApplicationJSONInternalServerError) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIModDescriptionPostApplicationJSONInternalServerError) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIModDescriptionPostOKApplicationJSON as json.
func (s APIModDescriptionPostOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := [][]string(s)

	e.ArrStart()
	for _, elem := range unwrapped {
		e.ArrStart()
		for _, elem := range elem {
			e.Str(elem)
		}
		e.ArrEnd()
	}
	e.ArrEnd()
}

// Decode decodes APIModDescriptionPostOKApplicationJSON from json.
func (s *APIModDescriptionPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIModDescriptionPostOKApplicationJSON to nil")
	}
	var unwrapped [][]string
	if err := func() error {
		unwrapped = make([][]string, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elem []string
			elem = make([]string, 0)
			if err := d.Arr(func(d *jx.Decoder) error {
				var elemElem string
				v, err := d.Str()
				elemElem = string(v)
				if err != nil {
					return err
				}
				elem = append(elem, elemElem)
				return nil
			}); err != nil {
				return err
			}
			unwrapped = append(unwrapped, elem)
			return nil
		}); err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIModDescriptionPostOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIModDescriptionPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIModDescriptionPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIModItemUUIDGetOKApplicationJSON as json.
func (s APIModItemUUIDGetOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes APIModItemUUIDGetOKApplicationJSON from json.
func (s *APIModItemUUIDGetOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIModItemUUIDGetOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIModItemUUIDGetOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIModItemUUIDGetOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIModItemUUIDGetOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIPlayerPlayerUuidNameGetOKApplicationJSON as json.
func (s APIPlayerPlayerUuidNameGetOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes APIPlayerPlayerUuidNameGetOKApplicationJSON from json.
func (s *APIPlayerPlayerUuidNameGetOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIPlayerPlayerUuidNameGetOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIPlayerPlayerUuidNameGetOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIPlayerPlayerUuidNameGetOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIPlayerPlayerUuidNameGetOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes APIPlayerPlayerUuidNamePostOKApplicationJSON as json.
func (s APIPlayerPlayerUuidNamePostOKApplicationJSON) Encode(e *jx.Encoder) {
	unwrapped := string(s)

	e.Str(unwrapped)
}

// Decode decodes APIPlayerPlayerUuidNamePostOKApplicationJSON from json.
func (s *APIPlayerPlayerUuidNamePostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIPlayerPlayerUuidNamePostOKApplicationJSON to nil")
	}
	var unwrapped string
	if err := func() error {
		v, err := d.Str()
		unwrapped = string(v)
		if err != nil {
			return err
		}
		return nil
	}(); err != nil {
		return errors.Wrap(err, "alias")
	}
	*s = APIPlayerPlayerUuidNamePostOKApplicationJSON(unwrapped)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s APIPlayerPlayerUuidNamePostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIPlayerPlayerUuidNamePostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *APIPremiumUserOwnsPostOKApplicationJSON) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *APIPremiumUserOwnsPostOKApplicationJSON) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfAPIPremiumUserOwnsPostOKApplicationJSON = [0]string{}

// Decode decodes APIPremiumUserOwnsPostOKApplicationJSON from json.
func (s *APIPremiumUserOwnsPostOKApplicationJSON) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode APIPremiumUserOwnsPostOKApplicationJSON to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode APIPremiumUserOwnsPostOKApplicationJSON")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *APIPremiumUserOwnsPostOKApplicationJSON) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *APIPremiumUserOwnsPostOKApplicationJSON) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuctionPreview) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuctionPreview) encodeFields(e *jx.Encoder) {
	{
		if s.Seller.Set {
			e.FieldStart("seller")
			s.Seller.Encode(e)
		}
	}
	{
		if s.Price.Set {
			e.FieldStart("price")
			s.Price.Encode(e)
		}
	}
	{
		if s.End.Set {
			e.FieldStart("end")
			s.End.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.PlayerName.Set {
			e.FieldStart("playerName")
			s.PlayerName.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuctionPreview = [5]string{
	0: "seller",
	1: "price",
	2: "end",
	3: "uuid",
	4: "playerName",
}

// Decode decodes AuctionPreview from json.
func (s *AuctionPreview) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuctionPreview to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "seller":
			if err := func() error {
				s.Seller.Reset()
				if err := s.Seller.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seller\"")
			}
		case "price":
			if err := func() error {
				s.Price.Reset()
				if err := s.Price.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"price\"")
			}
		case "end":
			if err := func() error {
				s.End.Reset()
				if err := s.End.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "playerName":
			if err := func() error {
				s.PlayerName.Reset()
				if err := s.PlayerName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playerName\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuctionPreview")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuctionPreview) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuctionPreview) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AuctionResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AuctionResult) encodeFields(e *jx.Encoder) {
	{
		if s.AuctionId.Set {
			e.FieldStart("auctionId")
			s.AuctionId.Encode(e)
		}
	}
	{
		if s.HighestBid.Set {
			e.FieldStart("highestBid")
			s.HighestBid.Encode(e)
		}
	}
	{
		if s.ItemName.Set {
			e.FieldStart("itemName")
			s.ItemName.Encode(e)
		}
	}
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.End.Set {
			e.FieldStart("end")
			s.End.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.StartingBid.Set {
			e.FieldStart("startingBid")
			s.StartingBid.Encode(e)
		}
	}
	{
		if s.Bin.Set {
			e.FieldStart("bin")
			s.Bin.Encode(e)
		}
	}
}

var jsonFieldsNameOfAuctionResult = [7]string{
	0: "auctionId",
	1: "highestBid",
	2: "itemName",
	3: "tag",
	4: "end",
	5: "startingBid",
	6: "bin",
}

// Decode decodes AuctionResult from json.
func (s *AuctionResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AuctionResult to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "auctionId":
			if err := func() error {
				s.AuctionId.Reset()
				if err := s.AuctionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auctionId\"")
			}
		case "highestBid":
			if err := func() error {
				s.HighestBid.Reset()
				if err := s.HighestBid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highestBid\"")
			}
		case "itemName":
			if err := func() error {
				s.ItemName.Reset()
				if err := s.ItemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemName\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "end":
			if err := func() error {
				s.End.Reset()
				if err := s.End.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		case "startingBid":
			if err := func() error {
				s.StartingBid.Reset()
				if err := s.StartingBid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startingBid\"")
			}
		case "bin":
			if err := func() error {
				s.Bin.Reset()
				if err := s.Bin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bin\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AuctionResult")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AuctionResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AuctionResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *AveragePrice) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *AveragePrice) encodeFields(e *jx.Encoder) {
	{
		if s.Min.Set {
			e.FieldStart("min")
			s.Min.Encode(e)
		}
	}
	{
		if s.Max.Set {
			e.FieldStart("max")
			s.Max.Encode(e)
		}
	}
	{
		if s.Avg.Set {
			e.FieldStart("avg")
			s.Avg.Encode(e)
		}
	}
	{
		if s.Volume.Set {
			e.FieldStart("volume")
			s.Volume.Encode(e)
		}
	}
	{
		if s.Time.Set {
			e.FieldStart("time")
			s.Time.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfAveragePrice = [5]string{
	0: "min",
	1: "max",
	2: "avg",
	3: "volume",
	4: "time",
}

// Decode decodes AveragePrice from json.
func (s *AveragePrice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode AveragePrice to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "min":
			if err := func() error {
				s.Min.Reset()
				if err := s.Min.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min\"")
			}
		case "max":
			if err := func() error {
				s.Max.Reset()
				if err := s.Max.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max\"")
			}
		case "avg":
			if err := func() error {
				s.Avg.Reset()
				if err := s.Avg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avg\"")
			}
		case "volume":
			if err := func() error {
				s.Volume.Reset()
				if err := s.Volume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volume\"")
			}
		case "time":
			if err := func() error {
				s.Time.Reset()
				if err := s.Time.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"time\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode AveragePrice")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *AveragePrice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *AveragePrice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BidResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BidResult) encodeFields(e *jx.Encoder) {
	{
		if s.HighestOwnBid.Set {
			e.FieldStart("highestOwnBid")
			s.HighestOwnBid.Encode(e)
		}
	}
	{
		if s.AuctionId.Set {
			e.FieldStart("auctionId")
			s.AuctionId.Encode(e)
		}
	}
	{
		if s.HighestBid.Set {
			e.FieldStart("highestBid")
			s.HighestBid.Encode(e)
		}
	}
	{
		if s.ItemName.Set {
			e.FieldStart("itemName")
			s.ItemName.Encode(e)
		}
	}
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.End.Set {
			e.FieldStart("end")
			s.End.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.StartingBid.Set {
			e.FieldStart("startingBid")
			s.StartingBid.Encode(e)
		}
	}
	{
		if s.Bin.Set {
			e.FieldStart("bin")
			s.Bin.Encode(e)
		}
	}
}

var jsonFieldsNameOfBidResult = [8]string{
	0: "highestOwnBid",
	1: "auctionId",
	2: "highestBid",
	3: "itemName",
	4: "tag",
	5: "end",
	6: "startingBid",
	7: "bin",
}

// Decode decodes BidResult from json.
func (s *BidResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BidResult to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "highestOwnBid":
			if err := func() error {
				s.HighestOwnBid.Reset()
				if err := s.HighestOwnBid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highestOwnBid\"")
			}
		case "auctionId":
			if err := func() error {
				s.AuctionId.Reset()
				if err := s.AuctionId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auctionId\"")
			}
		case "highestBid":
			if err := func() error {
				s.HighestBid.Reset()
				if err := s.HighestBid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highestBid\"")
			}
		case "itemName":
			if err := func() error {
				s.ItemName.Reset()
				if err := s.ItemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemName\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "end":
			if err := func() error {
				s.End.Reset()
				if err := s.End.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		case "startingBid":
			if err := func() error {
				s.StartingBid.Reset()
				if err := s.StartingBid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startingBid\"")
			}
		case "bin":
			if err := func() error {
				s.Bin.Reset()
				if err := s.Bin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bin\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BidResult")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BidResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BidResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BinResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BinResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Lowest.Set {
			e.FieldStart("lowest")
			s.Lowest.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.SecondLowest.Set {
			e.FieldStart("secondLowest")
			s.SecondLowest.Encode(e)
		}
	}
}

var jsonFieldsNameOfBinResponse = [3]string{
	0: "lowest",
	1: "uuid",
	2: "secondLowest",
}

// Decode decodes BinResponse from json.
func (s *BinResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BinResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "lowest":
			if err := func() error {
				s.Lowest.Reset()
				if err := s.Lowest.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lowest\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "secondLowest":
			if err := func() error {
				s.SecondLowest.Reset()
				if err := s.SecondLowest.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"secondLowest\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BinResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BinResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BinResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *BuyOrder) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *BuyOrder) encodeFields(e *jx.Encoder) {
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.PricePerUnit.Set {
			e.FieldStart("pricePerUnit")
			s.PricePerUnit.Encode(e)
		}
	}
	{
		if s.Orders.Set {
			e.FieldStart("orders")
			s.Orders.Encode(e)
		}
	}
}

var jsonFieldsNameOfBuyOrder = [3]string{
	0: "amount",
	1: "pricePerUnit",
	2: "orders",
}

// Decode decodes BuyOrder from json.
func (s *BuyOrder) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode BuyOrder to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "pricePerUnit":
			if err := func() error {
				s.PricePerUnit.Reset()
				if err := s.PricePerUnit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pricePerUnit\"")
			}
		case "orders":
			if err := func() error {
				s.Orders.Reset()
				if err := s.Orders.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"orders\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode BuyOrder")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *BuyOrder) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *BuyOrder) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Category as json.
func (s Category) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Category from json.
func (s *Category) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Category to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Category(v) {
	case CategoryUNKNOWN:
		*s = CategoryUNKNOWN
	case CategoryWEAPON:
		*s = CategoryWEAPON
	case CategoryARMOR:
		*s = CategoryARMOR
	case CategoryACCESSORIES:
		*s = CategoryACCESSORIES
	case CategoryCONSUMABLES:
		*s = CategoryCONSUMABLES
	case CategoryBLOCKS:
		*s = CategoryBLOCKS
	case CategoryMISC:
		*s = CategoryMISC
	default:
		*s = Category(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Category) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Category) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ColorEnchant) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ColorEnchant) encodeFields(e *jx.Encoder) {
	{
		if s.Color.Set {
			e.FieldStart("color")
			s.Color.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
}

var jsonFieldsNameOfColorEnchant = [3]string{
	0: "color",
	1: "type",
	2: "level",
}

// Decode decodes ColorEnchant from json.
func (s *ColorEnchant) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ColorEnchant to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "color":
			if err := func() error {
				s.Color.Reset()
				if err := s.Color.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"color\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ColorEnchant")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ColorEnchant) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ColorEnchant) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ColorSaveAuction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ColorSaveAuction) encodeFields(e *jx.Encoder) {
	{
		if s.Enchantments.Set {
			e.FieldStart("enchantments")
			s.Enchantments.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.StartingBid.Set {
			e.FieldStart("startingBid")
			s.StartingBid.Encode(e)
		}
	}
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.ItemName.Set {
			e.FieldStart("itemName")
			s.ItemName.Encode(e)
		}
	}
	{
		if s.Start.Set {
			e.FieldStart("start")
			s.Start.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.End.Set {
			e.FieldStart("end")
			s.End.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.AuctioneerId.Set {
			e.FieldStart("auctioneerId")
			s.AuctioneerId.Encode(e)
		}
	}
	{
		if s.ProfileId.Set {
			e.FieldStart("profileId")
			s.ProfileId.Encode(e)
		}
	}
	{
		if s.Coop.Set {
			e.FieldStart("coop")
			s.Coop.Encode(e)
		}
	}
	{
		if s.CoopMembers.Set {
			e.FieldStart("coopMembers")
			s.CoopMembers.Encode(e)
		}
	}
	{
		if s.HighestBidAmount.Set {
			e.FieldStart("highestBidAmount")
			s.HighestBidAmount.Encode(e)
		}
	}
	{
		if s.Bids.Set {
			e.FieldStart("bids")
			s.Bids.Encode(e)
		}
	}
	{
		if s.AnvilUses.Set {
			e.FieldStart("anvilUses")
			s.AnvilUses.Encode(e)
		}
	}
	{
		if s.NbtData.Set {
			e.FieldStart("nbtData")
			s.NbtData.Encode(e)
		}
	}
	{
		if s.ItemCreatedAt.Set {
			e.FieldStart("itemCreatedAt")
			s.ItemCreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Reforge.Set {
			e.FieldStart("reforge")
			s.Reforge.Encode(e)
		}
	}
	{
		if s.Category.Set {
			e.FieldStart("category")
			s.Category.Encode(e)
		}
	}
	{
		if s.Tier.Set {
			e.FieldStart("tier")
			s.Tier.Encode(e)
		}
	}
	{
		if s.Bin.Set {
			e.FieldStart("bin")
			s.Bin.Encode(e)
		}
	}
	{
		if s.FlatNbt.Set {
			e.FieldStart("flatNbt")
			s.FlatNbt.Encode(e)
		}
	}
}

var jsonFieldsNameOfColorSaveAuction = [22]string{
	0:  "enchantments",
	1:  "uuid",
	2:  "count",
	3:  "startingBid",
	4:  "tag",
	5:  "itemName",
	6:  "start",
	7:  "end",
	8:  "auctioneerId",
	9:  "profileId",
	10: "coop",
	11: "coopMembers",
	12: "highestBidAmount",
	13: "bids",
	14: "anvilUses",
	15: "nbtData",
	16: "itemCreatedAt",
	17: "reforge",
	18: "category",
	19: "tier",
	20: "bin",
	21: "flatNbt",
}

// Decode decodes ColorSaveAuction from json.
func (s *ColorSaveAuction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ColorSaveAuction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "enchantments":
			if err := func() error {
				s.Enchantments.Reset()
				if err := s.Enchantments.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enchantments\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "startingBid":
			if err := func() error {
				s.StartingBid.Reset()
				if err := s.StartingBid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startingBid\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "itemName":
			if err := func() error {
				s.ItemName.Reset()
				if err := s.ItemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemName\"")
			}
		case "start":
			if err := func() error {
				s.Start.Reset()
				if err := s.Start.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start\"")
			}
		case "end":
			if err := func() error {
				s.End.Reset()
				if err := s.End.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		case "auctioneerId":
			if err := func() error {
				s.AuctioneerId.Reset()
				if err := s.AuctioneerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auctioneerId\"")
			}
		case "profileId":
			if err := func() error {
				s.ProfileId.Reset()
				if err := s.ProfileId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profileId\"")
			}
		case "coop":
			if err := func() error {
				s.Coop.Reset()
				if err := s.Coop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"coop\"")
			}
		case "coopMembers":
			if err := func() error {
				s.CoopMembers.Reset()
				if err := s.CoopMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"coopMembers\"")
			}
		case "highestBidAmount":
			if err := func() error {
				s.HighestBidAmount.Reset()
				if err := s.HighestBidAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highestBidAmount\"")
			}
		case "bids":
			if err := func() error {
				s.Bids.Reset()
				if err := s.Bids.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bids\"")
			}
		case "anvilUses":
			if err := func() error {
				s.AnvilUses.Reset()
				if err := s.AnvilUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"anvilUses\"")
			}
		case "nbtData":
			if err := func() error {
				s.NbtData.Reset()
				if err := s.NbtData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nbtData\"")
			}
		case "itemCreatedAt":
			if err := func() error {
				s.ItemCreatedAt.Reset()
				if err := s.ItemCreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCreatedAt\"")
			}
		case "reforge":
			if err := func() error {
				s.Reforge.Reset()
				if err := s.Reforge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reforge\"")
			}
		case "category":
			if err := func() error {
				s.Category.Reset()
				if err := s.Category.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category\"")
			}
		case "tier":
			if err := func() error {
				s.Tier.Reset()
				if err := s.Tier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tier\"")
			}
		case "bin":
			if err := func() error {
				s.Bin.Reset()
				if err := s.Bin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bin\"")
			}
		case "flatNbt":
			if err := func() error {
				s.FlatNbt.Reset()
				if err := s.FlatNbt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatNbt\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ColorSaveAuction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ColorSaveAuction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ColorSaveAuction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s ColorSaveAuctionFlatNbt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields implements json.Marshaler.
func (s ColorSaveAuctionFlatNbt) encodeFields(e *jx.Encoder) {
	for k, elem := range s {
		e.FieldStart(k)

		elem.Encode(e)
	}
}

// Decode decodes ColorSaveAuctionFlatNbt from json.
func (s *ColorSaveAuctionFlatNbt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ColorSaveAuctionFlatNbt to nil")
	}
	m := s.init()
	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		var elem NilString
		if err := func() error {
			if err := elem.Decode(d); err != nil {
				return err
			}
			return nil
		}(); err != nil {
			return errors.Wrapf(err, "decode field %q", k)
		}
		m[string(k)] = elem
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ColorSaveAuctionFlatNbt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ColorSaveAuctionFlatNbt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ColorSaveAuctionFlatNbt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CommandListEntry) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CommandListEntry) encodeFields(e *jx.Encoder) {
	{
		if s.SubCommand.Set {
			e.FieldStart("subCommand")
			s.SubCommand.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfCommandListEntry = [2]string{
	0: "subCommand",
	1: "description",
}

// Decode decodes CommandListEntry from json.
func (s *CommandListEntry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CommandListEntry to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "subCommand":
			if err := func() error {
				s.SubCommand.Reset()
				if err := s.SubCommand.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"subCommand\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CommandListEntry")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CommandListEntry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CommandListEntry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *CurrentPrice) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *CurrentPrice) encodeFields(e *jx.Encoder) {
	{
		if s.Sell.Set {
			e.FieldStart("sell")
			s.Sell.Encode(e)
		}
	}
	{
		if s.Buy.Set {
			e.FieldStart("buy")
			s.Buy.Encode(e)
		}
	}
	{
		if s.Available.Set {
			e.FieldStart("available")
			s.Available.Encode(e)
		}
	}
	{
		if s.UpdatedAt.Set {
			e.FieldStart("updatedAt")
			s.UpdatedAt.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfCurrentPrice = [4]string{
	0: "sell",
	1: "buy",
	2: "available",
	3: "updatedAt",
}

// Decode decodes CurrentPrice from json.
func (s *CurrentPrice) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode CurrentPrice to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "sell":
			if err := func() error {
				s.Sell.Reset()
				if err := s.Sell.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sell\"")
			}
		case "buy":
			if err := func() error {
				s.Buy.Reset()
				if err := s.Buy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "available":
			if err := func() error {
				s.Available.Reset()
				if err := s.Available.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"available\"")
			}
		case "updatedAt":
			if err := func() error {
				s.UpdatedAt.Reset()
				if err := s.UpdatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"updatedAt\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode CurrentPrice")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *CurrentPrice) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *CurrentPrice) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DescModification) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DescModification) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Line.Set {
			e.FieldStart("line")
			s.Line.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfDescModification = [3]string{
	0: "type",
	1: "line",
	2: "value",
}

// Decode decodes DescModification from json.
func (s *DescModification) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DescModification to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "line":
			if err := func() error {
				s.Line.Reset()
				if err := s.Line.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"line\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DescModification")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DescModification) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DescModification) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes DescriptionField as json.
func (s DescriptionField) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes DescriptionField from json.
func (s *DescriptionField) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DescriptionField to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch DescriptionField(v) {
	case DescriptionFieldNONE:
		*s = DescriptionFieldNONE
	case DescriptionFieldLBIN:
		*s = DescriptionFieldLBIN
	case DescriptionFieldLBINKEY:
		*s = DescriptionFieldLBINKEY
	case DescriptionFieldMEDIAN:
		*s = DescriptionFieldMEDIAN
	case DescriptionFieldMEDIANKEY:
		*s = DescriptionFieldMEDIANKEY
	case DescriptionFieldVOLUME:
		*s = DescriptionFieldVOLUME
	case DescriptionFieldTAG:
		*s = DescriptionFieldTAG
	case DescriptionFieldCRAFTCOST:
		*s = DescriptionFieldCRAFTCOST
	case DescriptionFieldBazaarBuy:
		*s = DescriptionFieldBazaarBuy
	case DescriptionFieldBazaarSell:
		*s = DescriptionFieldBazaarSell
	case DescriptionFieldPRICEPAID:
		*s = DescriptionFieldPRICEPAID
	case DescriptionFieldITEMKEY:
		*s = DescriptionFieldITEMKEY
	case DescriptionFieldBAZAARCOST:
		*s = DescriptionFieldBAZAARCOST
	default:
		*s = DescriptionField(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s DescriptionField) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DescriptionField) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *DescriptionSetting) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *DescriptionSetting) encodeFields(e *jx.Encoder) {
	{
		if s.Fields.Set {
			e.FieldStart("fields")
			s.Fields.Encode(e)
		}
	}
}

var jsonFieldsNameOfDescriptionSetting = [1]string{
	0: "fields",
}

// Decode decodes DescriptionSetting from json.
func (s *DescriptionSetting) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode DescriptionSetting to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "fields":
			if err := func() error {
				s.Fields.Reset()
				if err := s.Fields.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fields\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode DescriptionSetting")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *DescriptionSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *DescriptionSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Enchantment) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Enchantment) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
}

var jsonFieldsNameOfEnchantment = [2]string{
	0: "type",
	1: "level",
}

// Decode decodes Enchantment from json.
func (s *Enchantment) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Enchantment to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Enchantment")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Enchantment) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Enchantment) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EnchantmentType as json.
func (s EnchantmentType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes EnchantmentType from json.
func (s *EnchantmentType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode EnchantmentType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch EnchantmentType(v) {
	case EnchantmentTypeUnknown:
		*s = EnchantmentTypeUnknown
	case EnchantmentTypeCleave:
		*s = EnchantmentTypeCleave
	case EnchantmentTypeCritical:
		*s = EnchantmentTypeCritical
	case EnchantmentTypeCubism:
		*s = EnchantmentTypeCubism
	case EnchantmentTypeEnderSlayer:
		*s = EnchantmentTypeEnderSlayer
	case EnchantmentTypeExecute:
		*s = EnchantmentTypeExecute
	case EnchantmentTypeExperience:
		*s = EnchantmentTypeExperience
	case EnchantmentTypeFirstStrike:
		*s = EnchantmentTypeFirstStrike
	case EnchantmentTypeGiantKiller:
		*s = EnchantmentTypeGiantKiller
	case EnchantmentTypeImpaling:
		*s = EnchantmentTypeImpaling
	case EnchantmentTypeLethality:
		*s = EnchantmentTypeLethality
	case EnchantmentTypeLifeSteal:
		*s = EnchantmentTypeLifeSteal
	case EnchantmentTypeLuck:
		*s = EnchantmentTypeLuck
	case EnchantmentTypeScavenger:
		*s = EnchantmentTypeScavenger
	case EnchantmentTypeThunderlord:
		*s = EnchantmentTypeThunderlord
	case EnchantmentTypeTelekinesis:
		*s = EnchantmentTypeTelekinesis
	case EnchantmentTypeVampirism:
		*s = EnchantmentTypeVampirism
	case EnchantmentTypeVenomous:
		*s = EnchantmentTypeVenomous
	case EnchantmentTypeGrowth:
		*s = EnchantmentTypeGrowth
	case EnchantmentTypeAiming:
		*s = EnchantmentTypeAiming
	case EnchantmentTypeDragonHunter:
		*s = EnchantmentTypeDragonHunter
	case EnchantmentTypeInfiniteQuiver:
		*s = EnchantmentTypeInfiniteQuiver
	case EnchantmentTypePiercing:
		*s = EnchantmentTypePiercing
	case EnchantmentTypeSnipe:
		*s = EnchantmentTypeSnipe
	case EnchantmentTypeHarvesting:
		*s = EnchantmentTypeHarvesting
	case EnchantmentTypeRainbow:
		*s = EnchantmentTypeRainbow
	case EnchantmentTypeSmeltingTouch:
		*s = EnchantmentTypeSmeltingTouch
	case EnchantmentTypeAngler:
		*s = EnchantmentTypeAngler
	case EnchantmentTypeBlessing:
		*s = EnchantmentTypeBlessing
	case EnchantmentTypeCaster:
		*s = EnchantmentTypeCaster
	case EnchantmentTypeFrail:
		*s = EnchantmentTypeFrail
	case EnchantmentTypeMagnet:
		*s = EnchantmentTypeMagnet
	case EnchantmentTypeSpikedHook:
		*s = EnchantmentTypeSpikedHook
	case EnchantmentTypeBaneOfArthropods:
		*s = EnchantmentTypeBaneOfArthropods
	case EnchantmentTypeFireAspect:
		*s = EnchantmentTypeFireAspect
	case EnchantmentTypeLooting:
		*s = EnchantmentTypeLooting
	case EnchantmentTypeKnockback:
		*s = EnchantmentTypeKnockback
	case EnchantmentTypeSharpness:
		*s = EnchantmentTypeSharpness
	case EnchantmentTypeSmite:
		*s = EnchantmentTypeSmite
	case EnchantmentTypeAquaAffinity:
		*s = EnchantmentTypeAquaAffinity
	case EnchantmentTypeBlastProtection:
		*s = EnchantmentTypeBlastProtection
	case EnchantmentTypeDepthStrider:
		*s = EnchantmentTypeDepthStrider
	case EnchantmentTypeFeatherFalling:
		*s = EnchantmentTypeFeatherFalling
	case EnchantmentTypeFireProtection:
		*s = EnchantmentTypeFireProtection
	case EnchantmentTypeFrostWalker:
		*s = EnchantmentTypeFrostWalker
	case EnchantmentTypeProjectileProtection:
		*s = EnchantmentTypeProjectileProtection
	case EnchantmentTypeProtection:
		*s = EnchantmentTypeProtection
	case EnchantmentTypeRespiration:
		*s = EnchantmentTypeRespiration
	case EnchantmentTypeThorns:
		*s = EnchantmentTypeThorns
	case EnchantmentTypeFlame:
		*s = EnchantmentTypeFlame
	case EnchantmentTypePower:
		*s = EnchantmentTypePower
	case EnchantmentTypePunch:
		*s = EnchantmentTypePunch
	case EnchantmentTypeEfficiency:
		*s = EnchantmentTypeEfficiency
	case EnchantmentTypeFortune:
		*s = EnchantmentTypeFortune
	case EnchantmentTypeSilkTouch:
		*s = EnchantmentTypeSilkTouch
	case EnchantmentTypeLure:
		*s = EnchantmentTypeLure
	case EnchantmentTypeLuckOfTheSea:
		*s = EnchantmentTypeLuckOfTheSea
	case EnchantmentTypeTrueProtection:
		*s = EnchantmentTypeTrueProtection
	case EnchantmentTypeSugarRush:
		*s = EnchantmentTypeSugarRush
	case EnchantmentTypeReplenish:
		*s = EnchantmentTypeReplenish
	case EnchantmentTypeRejuvenate:
		*s = EnchantmentTypeRejuvenate
	case EnchantmentTypeUltimateBank:
		*s = EnchantmentTypeUltimateBank
	case EnchantmentTypeUltimateCombo:
		*s = EnchantmentTypeUltimateCombo
	case EnchantmentTypeUltimateJerry:
		*s = EnchantmentTypeUltimateJerry
	case EnchantmentTypeUltimateLastStand:
		*s = EnchantmentTypeUltimateLastStand
	case EnchantmentTypeUltimateNoPainNoGain:
		*s = EnchantmentTypeUltimateNoPainNoGain
	case EnchantmentTypeUltimateWisdom:
		*s = EnchantmentTypeUltimateWisdom
	case EnchantmentTypeUltimateWise:
		*s = EnchantmentTypeUltimateWise
	case EnchantmentTypeExpertise:
		*s = EnchantmentTypeExpertise
	case EnchantmentTypeUltimateChimera:
		*s = EnchantmentTypeUltimateChimera
	case EnchantmentTypeUltimateRend:
		*s = EnchantmentTypeUltimateRend
	case EnchantmentTypeOverload:
		*s = EnchantmentTypeOverload
	case EnchantmentTypeUltimateLegion:
		*s = EnchantmentTypeUltimateLegion
	case EnchantmentTypeUltimateSwarm:
		*s = EnchantmentTypeUltimateSwarm
	case EnchantmentTypeBigBrain:
		*s = EnchantmentTypeBigBrain
	case EnchantmentTypeCompact:
		*s = EnchantmentTypeCompact
	case EnchantmentTypeVicious:
		*s = EnchantmentTypeVicious
	case EnchantmentTypeCounterStrike:
		*s = EnchantmentTypeCounterStrike
	case EnchantmentTypeTurboCarrot:
		*s = EnchantmentTypeTurboCarrot
	case EnchantmentTypeTurboCactus:
		*s = EnchantmentTypeTurboCactus
	case EnchantmentTypeTurboCane:
		*s = EnchantmentTypeTurboCane
	case EnchantmentTypeTurboCoco:
		*s = EnchantmentTypeTurboCoco
	case EnchantmentTypeTurboMelon:
		*s = EnchantmentTypeTurboMelon
	case EnchantmentTypeTurboMushrooms:
		*s = EnchantmentTypeTurboMushrooms
	case EnchantmentTypeTurboPumpkin:
		*s = EnchantmentTypeTurboPumpkin
	case EnchantmentTypeTurboPotato:
		*s = EnchantmentTypeTurboPotato
	case EnchantmentTypeTurboWarts:
		*s = EnchantmentTypeTurboWarts
	case EnchantmentTypeTurboWheat:
		*s = EnchantmentTypeTurboWheat
	case EnchantmentTypeChance:
		*s = EnchantmentTypeChance
	case EnchantmentTypePROSECUTE:
		*s = EnchantmentTypePROSECUTE
	case EnchantmentTypeSyphon:
		*s = EnchantmentTypeSyphon
	case EnchantmentTypeRespite:
		*s = EnchantmentTypeRespite
	case EnchantmentTypeThunderbolt:
		*s = EnchantmentTypeThunderbolt
	case EnchantmentTypeTitanKiller:
		*s = EnchantmentTypeTitanKiller
	case EnchantmentTypeTripleStrike:
		*s = EnchantmentTypeTripleStrike
	case EnchantmentTypeUltimateSoulEater:
		*s = EnchantmentTypeUltimateSoulEater
	case EnchantmentTypeUltimateOneForAll:
		*s = EnchantmentTypeUltimateOneForAll
	case EnchantmentTypeNone:
		*s = EnchantmentTypeNone
	case EnchantmentTypeCultivating:
		*s = EnchantmentTypeCultivating
	case EnchantmentTypeDelicate:
		*s = EnchantmentTypeDelicate
	case EnchantmentTypeManaSteal:
		*s = EnchantmentTypeManaSteal
	case EnchantmentTypeSmartyPants:
		*s = EnchantmentTypeSmartyPants
	case EnchantmentTypePristine:
		*s = EnchantmentTypePristine
	case EnchantmentTypeUltimateFatalTempo:
		*s = EnchantmentTypeUltimateFatalTempo
	case EnchantmentTypeUltimateInferno:
		*s = EnchantmentTypeUltimateInferno
	case EnchantmentTypeCharm:
		*s = EnchantmentTypeCharm
	case EnchantmentTypeCorruption:
		*s = EnchantmentTypeCorruption
	case EnchantmentTypeFerociousMana:
		*s = EnchantmentTypeFerociousMana
	case EnchantmentTypeStrongMana:
		*s = EnchantmentTypeStrongMana
	case EnchantmentTypeHardenedMana:
		*s = EnchantmentTypeHardenedMana
	case EnchantmentTypeManaVampire:
		*s = EnchantmentTypeManaVampire
	case EnchantmentTypeSmoldering:
		*s = EnchantmentTypeSmoldering
	case EnchantmentTypeUltimateDuplex:
		*s = EnchantmentTypeUltimateDuplex
	case EnchantmentTypeUltimateFlash:
		*s = EnchantmentTypeUltimateFlash
	case EnchantmentTypeHecatomb:
		*s = EnchantmentTypeHecatomb
	case EnchantmentTypeChampion:
		*s = EnchantmentTypeChampion
	case EnchantmentTypeUltimateHabaneroTactics:
		*s = EnchantmentTypeUltimateHabaneroTactics
	case EnchantmentTypeCayenne:
		*s = EnchantmentTypeCayenne
	case EnchantmentTypeDivineGift:
		*s = EnchantmentTypeDivineGift
	case EnchantmentTypePiscary:
		*s = EnchantmentTypePiscary
	case EnchantmentTypeUltimateBobbinTime:
		*s = EnchantmentTypeUltimateBobbinTime
	case EnchantmentTypeTabasco:
		*s = EnchantmentTypeTabasco
	case EnchantmentTypeProsperity:
		*s = EnchantmentTypeProsperity
	case EnchantmentTypeSunder:
		*s = EnchantmentTypeSunder
	case EnchantmentTypeAny:
		*s = EnchantmentTypeAny
	default:
		*s = EnchantmentType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s EnchantmentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *EnchantmentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ErrorResponse) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ErrorResponse) encodeFields(e *jx.Encoder) {
	{
		if s.Slug.Set {
			e.FieldStart("slug")
			s.Slug.Encode(e)
		}
	}
	{
		if s.Message.Set {
			e.FieldStart("message")
			s.Message.Encode(e)
		}
	}
	{
		if s.Trace.Set {
			e.FieldStart("trace")
			s.Trace.Encode(e)
		}
	}
}

var jsonFieldsNameOfErrorResponse = [3]string{
	0: "slug",
	1: "message",
	2: "trace",
}

// Decode decodes ErrorResponse from json.
func (s *ErrorResponse) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ErrorResponse to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "slug":
			if err := func() error {
				s.Slug.Reset()
				if err := s.Slug.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slug\"")
			}
		case "message":
			if err := func() error {
				s.Message.Reset()
				if err := s.Message.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"message\"")
			}
		case "trace":
			if err := func() error {
				s.Trace.Reset()
				if err := s.Trace.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"trace\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ErrorResponse")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ErrorResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ErrorResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FilterOptions) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FilterOptions) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Options.Set {
			e.FieldStart("options")
			s.Options.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.LongType.Set {
			e.FieldStart("longType")
			s.LongType.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
}

var jsonFieldsNameOfFilterOptions = [5]string{
	0: "name",
	1: "options",
	2: "type",
	3: "longType",
	4: "description",
}

// Decode decodes FilterOptions from json.
func (s *FilterOptions) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FilterOptions to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "options":
			if err := func() error {
				s.Options.Reset()
				if err := s.Options.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"options\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "longType":
			if err := func() error {
				s.LongType.Reset()
				if err := s.LongType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"longType\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FilterOptions")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FilterOptions) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FilterOptions) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FilterQuery) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FilterQuery) encodeFields(e *jx.Encoder) {
	{
		if s.Filters.Set {
			e.FieldStart("filters")
			s.Filters.Encode(e)
		}
	}
	{
		if s.Auction.Set {
			e.FieldStart("auction")
			s.Auction.Encode(e)
		}
	}
}

var jsonFieldsNameOfFilterQuery = [2]string{
	0: "filters",
	1: "auction",
}

// Decode decodes FilterQuery from json.
func (s *FilterQuery) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FilterQuery to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "filters":
			if err := func() error {
				s.Filters.Reset()
				if err := s.Filters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filters\"")
			}
		case "auction":
			if err := func() error {
				s.Auction.Reset()
				if err := s.Auction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auction\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FilterQuery")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FilterQuery) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FilterQuery) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FilterQueryFilters) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FilterQueryFilters) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfFilterQueryFilters = [0]string{}

// Decode decodes FilterQueryFilters from json.
func (s *FilterQueryFilters) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FilterQueryFilters to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FilterQueryFilters")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FilterQueryFilters) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FilterQueryFilters) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FilterType as json.
func (s FilterType) Encode(e *jx.Encoder) {
	e.Int32(int32(s))
}

// Decode decodes FilterType from json.
func (s *FilterType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FilterType to nil")
	}
	v, err := d.Int32()
	if err != nil {
		return err
	}
	*s = FilterType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FilterType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FilterType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FinderType as json.
func (s FinderType) Encode(e *jx.Encoder) {
	e.Int32(int32(s))
}

// Decode decodes FinderType from json.
func (s *FinderType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FinderType to nil")
	}
	v, err := d.Int32()
	if err != nil {
		return err
	}
	*s = FinderType(v)

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s FinderType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FinderType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FlipDetails) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FlipDetails) encodeFields(e *jx.Encoder) {
	{
		if s.ItemName.Set {
			e.FieldStart("itemName")
			s.ItemName.Encode(e)
		}
	}
	{
		if s.ItemTag.Set {
			e.FieldStart("itemTag")
			s.ItemTag.Encode(e)
		}
	}
	{
		if s.Tier.Set {
			e.FieldStart("tier")
			s.Tier.Encode(e)
		}
	}
	{
		if s.PricePaid.Set {
			e.FieldStart("pricePaid")
			s.PricePaid.Encode(e)
		}
	}
	{
		if s.SoldFor.Set {
			e.FieldStart("soldFor")
			s.SoldFor.Encode(e)
		}
	}
	{
		if s.Finder.Set {
			e.FieldStart("finder")
			s.Finder.Encode(e)
		}
	}
	{
		if s.UID.Set {
			e.FieldStart("uId")
			s.UID.Encode(e)
		}
	}
	{
		if s.OriginAuction.Set {
			e.FieldStart("originAuction")
			s.OriginAuction.Encode(e)
		}
	}
	{
		if s.SoldAuction.Set {
			e.FieldStart("soldAuction")
			s.SoldAuction.Encode(e)
		}
	}
	{
		if s.BuyTime.Set {
			e.FieldStart("buyTime")
			s.BuyTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.SellTime.Set {
			e.FieldStart("sellTime")
			s.SellTime.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Profit.Set {
			e.FieldStart("profit")
			s.Profit.Encode(e)
		}
	}
	{
		if s.PropertyChanges.Set {
			e.FieldStart("propertyChanges")
			s.PropertyChanges.Encode(e)
		}
	}
}

var jsonFieldsNameOfFlipDetails = [13]string{
	0:  "itemName",
	1:  "itemTag",
	2:  "tier",
	3:  "pricePaid",
	4:  "soldFor",
	5:  "finder",
	6:  "uId",
	7:  "originAuction",
	8:  "soldAuction",
	9:  "buyTime",
	10: "sellTime",
	11: "profit",
	12: "propertyChanges",
}

// Decode decodes FlipDetails from json.
func (s *FlipDetails) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FlipDetails to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "itemName":
			if err := func() error {
				s.ItemName.Reset()
				if err := s.ItemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemName\"")
			}
		case "itemTag":
			if err := func() error {
				s.ItemTag.Reset()
				if err := s.ItemTag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemTag\"")
			}
		case "tier":
			if err := func() error {
				s.Tier.Reset()
				if err := s.Tier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tier\"")
			}
		case "pricePaid":
			if err := func() error {
				s.PricePaid.Reset()
				if err := s.PricePaid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pricePaid\"")
			}
		case "soldFor":
			if err := func() error {
				s.SoldFor.Reset()
				if err := s.SoldFor.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"soldFor\"")
			}
		case "finder":
			if err := func() error {
				s.Finder.Reset()
				if err := s.Finder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"finder\"")
			}
		case "uId":
			if err := func() error {
				s.UID.Reset()
				if err := s.UID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uId\"")
			}
		case "originAuction":
			if err := func() error {
				s.OriginAuction.Reset()
				if err := s.OriginAuction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"originAuction\"")
			}
		case "soldAuction":
			if err := func() error {
				s.SoldAuction.Reset()
				if err := s.SoldAuction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"soldAuction\"")
			}
		case "buyTime":
			if err := func() error {
				s.BuyTime.Reset()
				if err := s.BuyTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyTime\"")
			}
		case "sellTime":
			if err := func() error {
				s.SellTime.Reset()
				if err := s.SellTime.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellTime\"")
			}
		case "profit":
			if err := func() error {
				s.Profit.Reset()
				if err := s.Profit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profit\"")
			}
		case "propertyChanges":
			if err := func() error {
				s.PropertyChanges.Reset()
				if err := s.PropertyChanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"propertyChanges\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FlipDetails")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FlipDetails) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FlipDetails) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FlipSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FlipSettings) encodeFields(e *jx.Encoder) {
	{
		if s.Filters.Set {
			e.FieldStart("filters")
			s.Filters.Encode(e)
		}
	}
	{
		if s.Blacklist.Set {
			e.FieldStart("blacklist")
			s.Blacklist.Encode(e)
		}
	}
	{
		if s.Whitelist.Set {
			e.FieldStart("whitelist")
			s.Whitelist.Encode(e)
		}
	}
	{
		if s.Lbin.Set {
			e.FieldStart("lbin")
			s.Lbin.Encode(e)
		}
	}
	{
		if s.Visibility.Set {
			e.FieldStart("visibility")
			s.Visibility.Encode(e)
		}
	}
	{
		if s.Mod.Set {
			e.FieldStart("mod")
			s.Mod.Encode(e)
		}
	}
	{
		if s.Finders.Set {
			e.FieldStart("finders")
			s.Finders.Encode(e)
		}
	}
	{
		if s.FastMode.Set {
			e.FieldStart("fastMode")
			s.FastMode.Encode(e)
		}
	}
	{
		if s.Changer.Set {
			e.FieldStart("changer")
			s.Changer.Encode(e)
		}
	}
	{
		if s.OnlyBin.Set {
			e.FieldStart("onlyBin")
			s.OnlyBin.Encode(e)
		}
	}
	{
		if s.WhitelistAftermain.Set {
			e.FieldStart("whitelistAftermain")
			s.WhitelistAftermain.Encode(e)
		}
	}
	{
		if s.MinProfit.Set {
			e.FieldStart("minProfit")
			s.MinProfit.Encode(e)
		}
	}
	{
		if s.MinProfitPercent.Set {
			e.FieldStart("minProfitPercent")
			s.MinProfitPercent.Encode(e)
		}
	}
	{
		if s.MinVolume.Set {
			e.FieldStart("minVolume")
			s.MinVolume.Encode(e)
		}
	}
	{
		if s.MaxCost.Set {
			e.FieldStart("maxCost")
			s.MaxCost.Encode(e)
		}
	}
	{
		if s.LastChange.Set {
			e.FieldStart("lastChange")
			s.LastChange.Encode(e)
		}
	}
}

var jsonFieldsNameOfFlipSettings = [16]string{
	0:  "filters",
	1:  "blacklist",
	2:  "whitelist",
	3:  "lbin",
	4:  "visibility",
	5:  "mod",
	6:  "finders",
	7:  "fastMode",
	8:  "changer",
	9:  "onlyBin",
	10: "whitelistAftermain",
	11: "minProfit",
	12: "minProfitPercent",
	13: "minVolume",
	14: "maxCost",
	15: "lastChange",
}

// Decode decodes FlipSettings from json.
func (s *FlipSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FlipSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "filters":
			if err := func() error {
				s.Filters.Reset()
				if err := s.Filters.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filters\"")
			}
		case "blacklist":
			if err := func() error {
				s.Blacklist.Reset()
				if err := s.Blacklist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blacklist\"")
			}
		case "whitelist":
			if err := func() error {
				s.Whitelist.Reset()
				if err := s.Whitelist.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whitelist\"")
			}
		case "lbin":
			if err := func() error {
				s.Lbin.Reset()
				if err := s.Lbin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lbin\"")
			}
		case "visibility":
			if err := func() error {
				s.Visibility.Reset()
				if err := s.Visibility.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"visibility\"")
			}
		case "mod":
			if err := func() error {
				s.Mod.Reset()
				if err := s.Mod.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mod\"")
			}
		case "finders":
			if err := func() error {
				s.Finders.Reset()
				if err := s.Finders.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"finders\"")
			}
		case "fastMode":
			if err := func() error {
				s.FastMode.Reset()
				if err := s.FastMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fastMode\"")
			}
		case "changer":
			if err := func() error {
				s.Changer.Reset()
				if err := s.Changer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"changer\"")
			}
		case "onlyBin":
			if err := func() error {
				s.OnlyBin.Reset()
				if err := s.OnlyBin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"onlyBin\"")
			}
		case "whitelistAftermain":
			if err := func() error {
				s.WhitelistAftermain.Reset()
				if err := s.WhitelistAftermain.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"whitelistAftermain\"")
			}
		case "minProfit":
			if err := func() error {
				s.MinProfit.Reset()
				if err := s.MinProfit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minProfit\"")
			}
		case "minProfitPercent":
			if err := func() error {
				s.MinProfitPercent.Reset()
				if err := s.MinProfitPercent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minProfitPercent\"")
			}
		case "minVolume":
			if err := func() error {
				s.MinVolume.Reset()
				if err := s.MinVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minVolume\"")
			}
		case "maxCost":
			if err := func() error {
				s.MaxCost.Reset()
				if err := s.MaxCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"maxCost\"")
			}
		case "lastChange":
			if err := func() error {
				s.LastChange.Reset()
				if err := s.LastChange.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lastChange\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FlipSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FlipSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FlipSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FlipSettingsFilters) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FlipSettingsFilters) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfFlipSettingsFilters = [0]string{}

// Decode decodes FlipSettingsFilters from json.
func (s *FlipSettingsFilters) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FlipSettingsFilters to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FlipSettingsFilters")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FlipSettingsFilters) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FlipSettingsFilters) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *FlipSumary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *FlipSumary) encodeFields(e *jx.Encoder) {
	{
		if s.Flips.Set {
			e.FieldStart("flips")
			s.Flips.Encode(e)
		}
	}
	{
		if s.TotalProfit.Set {
			e.FieldStart("totalProfit")
			s.TotalProfit.Encode(e)
		}
	}
}

var jsonFieldsNameOfFlipSumary = [2]string{
	0: "flips",
	1: "totalProfit",
}

// Decode decodes FlipSumary from json.
func (s *FlipSumary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode FlipSumary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "flips":
			if err := func() error {
				s.Flips.Reset()
				if err := s.Flips.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flips\"")
			}
		case "totalProfit":
			if err := func() error {
				s.TotalProfit.Reset()
				if err := s.TotalProfit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"totalProfit\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode FlipSumary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *FlipSumary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *FlipSumary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *GraphResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *GraphResult) encodeFields(e *jx.Encoder) {
	{
		if s.MaxBuy.Set {
			e.FieldStart("maxBuy")
			s.MaxBuy.Encode(e)
		}
	}
	{
		if s.MaxSell.Set {
			e.FieldStart("maxSell")
			s.MaxSell.Encode(e)
		}
	}
	{
		if s.MinBuy.Set {
			e.FieldStart("minBuy")
			s.MinBuy.Encode(e)
		}
	}
	{
		if s.MinSell.Set {
			e.FieldStart("minSell")
			s.MinSell.Encode(e)
		}
	}
	{
		if s.Buy.Set {
			e.FieldStart("buy")
			s.Buy.Encode(e)
		}
	}
	{
		if s.Sell.Set {
			e.FieldStart("sell")
			s.Sell.Encode(e)
		}
	}
	{
		if s.SellVolume.Set {
			e.FieldStart("sellVolume")
			s.SellVolume.Encode(e)
		}
	}
	{
		if s.BuyVolume.Set {
			e.FieldStart("buyVolume")
			s.BuyVolume.Encode(e)
		}
	}
	{
		if s.Timestamp.Set {
			e.FieldStart("timestamp")
			s.Timestamp.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.BuyMovingWeek.Set {
			e.FieldStart("buyMovingWeek")
			s.BuyMovingWeek.Encode(e)
		}
	}
	{
		if s.SellMovingWeek.Set {
			e.FieldStart("sellMovingWeek")
			s.SellMovingWeek.Encode(e)
		}
	}
}

var jsonFieldsNameOfGraphResult = [11]string{
	0:  "maxBuy",
	1:  "maxSell",
	2:  "minBuy",
	3:  "minSell",
	4:  "buy",
	5:  "sell",
	6:  "sellVolume",
	7:  "buyVolume",
	8:  "timestamp",
	9:  "buyMovingWeek",
	10: "sellMovingWeek",
}

// Decode decodes GraphResult from json.
func (s *GraphResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode GraphResult to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "maxBuy":
			if err := func() error {
				s.MaxBuy.Reset()
				if err := s.MaxBuy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"maxBuy\"")
			}
		case "maxSell":
			if err := func() error {
				s.MaxSell.Reset()
				if err := s.MaxSell.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"maxSell\"")
			}
		case "minBuy":
			if err := func() error {
				s.MinBuy.Reset()
				if err := s.MinBuy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minBuy\"")
			}
		case "minSell":
			if err := func() error {
				s.MinSell.Reset()
				if err := s.MinSell.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minSell\"")
			}
		case "buy":
			if err := func() error {
				s.Buy.Reset()
				if err := s.Buy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buy\"")
			}
		case "sell":
			if err := func() error {
				s.Sell.Reset()
				if err := s.Sell.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sell\"")
			}
		case "sellVolume":
			if err := func() error {
				s.SellVolume.Reset()
				if err := s.SellVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellVolume\"")
			}
		case "buyVolume":
			if err := func() error {
				s.BuyVolume.Reset()
				if err := s.BuyVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyVolume\"")
			}
		case "timestamp":
			if err := func() error {
				s.Timestamp.Reset()
				if err := s.Timestamp.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timestamp\"")
			}
		case "buyMovingWeek":
			if err := func() error {
				s.BuyMovingWeek.Reset()
				if err := s.BuyMovingWeek.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyMovingWeek\"")
			}
		case "sellMovingWeek":
			if err := func() error {
				s.SellMovingWeek.Reset()
				if err := s.SellMovingWeek.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellMovingWeek\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode GraphResult")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *GraphResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *GraphResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Ingredient) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Ingredient) encodeFields(e *jx.Encoder) {
	{
		if s.ItemId.Set {
			e.FieldStart("itemId")
			s.ItemId.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Cost.Set {
			e.FieldStart("cost")
			s.Cost.Encode(e)
		}
	}
}

var jsonFieldsNameOfIngredient = [3]string{
	0: "itemId",
	1: "count",
	2: "cost",
}

// Decode decodes Ingredient from json.
func (s *Ingredient) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Ingredient to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "itemId":
			if err := func() error {
				s.ItemId.Reset()
				if err := s.ItemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemId\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "cost":
			if err := func() error {
				s.Cost.Reset()
				if err := s.Cost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Ingredient")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Ingredient) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Ingredient) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *Int32Int64ValueTuple) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *Int32Int64ValueTuple) encodeFields(e *jx.Encoder) {
	{
		if s.Item1.Set {
			e.FieldStart("item1")
			s.Item1.Encode(e)
		}
	}
	{
		if s.Item2.Set {
			e.FieldStart("item2")
			s.Item2.Encode(e)
		}
	}
}

var jsonFieldsNameOfInt32Int64ValueTuple = [2]string{
	0: "item1",
	1: "item2",
}

// Decode decodes Int32Int64ValueTuple from json.
func (s *Int32Int64ValueTuple) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Int32Int64ValueTuple to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "item1":
			if err := func() error {
				s.Item1.Reset()
				if err := s.Item1.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item1\"")
			}
		case "item2":
			if err := func() error {
				s.Item2.Reset()
				if err := s.Item2.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"item2\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode Int32Int64ValueTuple")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *Int32Int64ValueTuple) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Int32Int64ValueTuple) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *InventoryBatchLookup) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *InventoryBatchLookup) encodeFields(e *jx.Encoder) {
	{
		if s.ProfileId.Set {
			e.FieldStart("profileId")
			s.ProfileId.Encode(e)
		}
	}
	{
		if s.PlayerId.Set {
			e.FieldStart("playerId")
			s.PlayerId.Encode(e)
		}
	}
	{
		if s.Uuids.Set {
			e.FieldStart("uuids")
			s.Uuids.Encode(e)
		}
	}
}

var jsonFieldsNameOfInventoryBatchLookup = [3]string{
	0: "profileId",
	1: "playerId",
	2: "uuids",
}

// Decode decodes InventoryBatchLookup from json.
func (s *InventoryBatchLookup) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InventoryBatchLookup to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "profileId":
			if err := func() error {
				s.ProfileId.Reset()
				if err := s.ProfileId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profileId\"")
			}
		case "playerId":
			if err := func() error {
				s.PlayerId.Reset()
				if err := s.PlayerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"playerId\"")
			}
		case "uuids":
			if err := func() error {
				s.Uuids.Reset()
				if err := s.Uuids.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuids\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode InventoryBatchLookup")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *InventoryBatchLookup) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InventoryBatchLookup) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *InventoryData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *InventoryData) encodeFields(e *jx.Encoder) {
	{
		if s.ChestName.Set {
			e.FieldStart("chestName")
			s.ChestName.Encode(e)
		}
	}
	{
		if s.FullInventoryNbt.Set {
			e.FieldStart("fullInventoryNbt")
			s.FullInventoryNbt.Encode(e)
		}
	}
	{
		if s.Settings.Set {
			e.FieldStart("settings")
			s.Settings.Encode(e)
		}
	}
}

var jsonFieldsNameOfInventoryData = [3]string{
	0: "chestName",
	1: "fullInventoryNbt",
	2: "settings",
}

// Decode decodes InventoryData from json.
func (s *InventoryData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode InventoryData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chestName":
			if err := func() error {
				s.ChestName.Reset()
				if err := s.ChestName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chestName\"")
			}
		case "fullInventoryNbt":
			if err := func() error {
				s.FullInventoryNbt.Reset()
				if err := s.FullInventoryNbt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fullInventoryNbt\"")
			}
		case "settings":
			if err := func() error {
				s.Settings.Reset()
				if err := s.Settings.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"settings\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode InventoryData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *InventoryData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *InventoryData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ItemCategory as json.
func (s ItemCategory) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ItemCategory from json.
func (s *ItemCategory) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ItemCategory to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ItemCategory(v) {
	case ItemCategoryUNKNOWN:
		*s = ItemCategoryUNKNOWN
	case ItemCategoryPETITEM:
		*s = ItemCategoryPETITEM
	case ItemCategorySWORD:
		*s = ItemCategorySWORD
	case ItemCategoryCHESTPLATE:
		*s = ItemCategoryCHESTPLATE
	case ItemCategoryHELMET:
		*s = ItemCategoryHELMET
	case ItemCategoryREFORGESTONE:
		*s = ItemCategoryREFORGESTONE
	case ItemCategoryCOSMETIC:
		*s = ItemCategoryCOSMETIC
	case ItemCategoryAXE:
		*s = ItemCategoryAXE
	case ItemCategoryLEGGINGS:
		*s = ItemCategoryLEGGINGS
	case ItemCategoryACCESSORY:
		*s = ItemCategoryACCESSORY
	case ItemCategoryBOW:
		*s = ItemCategoryBOW
	case ItemCategoryTRAVELSCROLL:
		*s = ItemCategoryTRAVELSCROLL
	case ItemCategoryBOOTS:
		*s = ItemCategoryBOOTS
	case ItemCategoryHOE:
		*s = ItemCategoryHOE
	case ItemCategoryBAIT:
		*s = ItemCategoryBAIT
	case ItemCategoryFISHINGROD:
		*s = ItemCategoryFISHINGROD
	case ItemCategoryDUNGEONPASS:
		*s = ItemCategoryDUNGEONPASS
	case ItemCategoryARROW:
		*s = ItemCategoryARROW
	case ItemCategorySPADE:
		*s = ItemCategorySPADE
	case ItemCategorySHEARS:
		*s = ItemCategorySHEARS
	case ItemCategoryPICKAXE:
		*s = ItemCategoryPICKAXE
	case ItemCategoryARROWPOISON:
		*s = ItemCategoryARROWPOISON
	case ItemCategoryWAND:
		*s = ItemCategoryWAND
	case ItemCategoryDRILL:
		*s = ItemCategoryDRILL
	case ItemCategoryFISHINGWEAPON:
		*s = ItemCategoryFISHINGWEAPON
	case ItemCategoryGAUNTLET:
		*s = ItemCategoryGAUNTLET
	case ItemCategoryFURNITURE:
		*s = ItemCategoryFURNITURE
	case ItemCategoryGENERATOR:
		*s = ItemCategoryGENERATOR
	case ItemCategoryMINIONSKIN:
		*s = ItemCategoryMINIONSKIN
	case ItemCategoryPRIVATEISLAND:
		*s = ItemCategoryPRIVATEISLAND
	case ItemCategoryISLANDCRYSTAL:
		*s = ItemCategoryISLANDCRYSTAL
	case ItemCategoryFRAGMENT:
		*s = ItemCategoryFRAGMENT
	case ItemCategorySLAYER:
		*s = ItemCategorySLAYER
	case ItemCategoryDUNGEON:
		*s = ItemCategoryDUNGEON
	case ItemCategoryDUNGEONITEM:
		*s = ItemCategoryDUNGEONITEM
	case ItemCategorySACK:
		*s = ItemCategorySACK
	case ItemCategoryPORTAL:
		*s = ItemCategoryPORTAL
	case ItemCategoryDEEPCAVERNS:
		*s = ItemCategoryDEEPCAVERNS
	case ItemCategoryBACKPACK:
		*s = ItemCategoryBACKPACK
	case ItemCategoryTALISMANENRICHMENT:
		*s = ItemCategoryTALISMANENRICHMENT
	case ItemCategoryTHEFISH:
		*s = ItemCategoryTHEFISH
	case ItemCategoryPET:
		*s = ItemCategoryPET
	case ItemCategoryPETSKIN:
		*s = ItemCategoryPETSKIN
	case ItemCategoryRUNE:
		*s = ItemCategoryRUNE
	case ItemCategoryArmorDye:
		*s = ItemCategoryArmorDye
	case ItemCategoryVanilla:
		*s = ItemCategoryVanilla
	case ItemCategoryNullNamed:
		*s = ItemCategoryNullNamed
	case ItemCategoryCLOAK:
		*s = ItemCategoryCLOAK
	case ItemCategoryNECKLACE:
		*s = ItemCategoryNECKLACE
	case ItemCategoryBELT:
		*s = ItemCategoryBELT
	case ItemCategoryGLOVES:
		*s = ItemCategoryGLOVES
	case ItemCategoryBRACELET:
		*s = ItemCategoryBRACELET
	default:
		*s = ItemCategory(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ItemCategory) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ItemCategory) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ItemFlags as json.
func (s ItemFlags) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ItemFlags from json.
func (s *ItemFlags) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ItemFlags to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ItemFlags(v) {
	case ItemFlagsNONE:
		*s = ItemFlagsNONE
	case ItemFlagsBAZAAR:
		*s = ItemFlagsBAZAAR
	case ItemFlagsTRADEABLE:
		*s = ItemFlagsTRADEABLE
	case ItemFlagsAUCTION:
		*s = ItemFlagsAUCTION
	case ItemFlagsCRAFT:
		*s = ItemFlagsCRAFT
	case ItemFlagsGLOWING:
		*s = ItemFlagsGLOWING
	case ItemFlagsMUSEUM:
		*s = ItemFlagsMUSEUM
	default:
		*s = ItemFlags(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ItemFlags) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ItemFlags) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ItemMetadataElement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ItemMetadataElement) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.Flags.Set {
			e.FieldStart("flags")
			s.Flags.Encode(e)
		}
	}
}

var jsonFieldsNameOfItemMetadataElement = [3]string{
	0: "name",
	1: "tag",
	2: "flags",
}

// Decode decodes ItemMetadataElement from json.
func (s *ItemMetadataElement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ItemMetadataElement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "flags":
			if err := func() error {
				s.Flags.Reset()
				if err := s.Flags.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flags\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ItemMetadataElement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ItemMetadataElement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ItemMetadataElement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ItemPreview) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ItemPreview) encodeFields(e *jx.Encoder) {
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfItemPreview = [2]string{
	0: "tag",
	1: "name",
}

// Decode decodes ItemPreview from json.
func (s *ItemPreview) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ItemPreview to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ItemPreview")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ItemPreview) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ItemPreview) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ItemSell) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ItemSell) encodeFields(e *jx.Encoder) {
	{
		if s.Seller.Set {
			e.FieldStart("seller")
			s.Seller.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Buyer.Set {
			e.FieldStart("buyer")
			s.Buyer.Encode(e)
		}
	}
	{
		if s.Timestamp.Set {
			e.FieldStart("timestamp")
			s.Timestamp.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfItemSell = [4]string{
	0: "seller",
	1: "uuid",
	2: "buyer",
	3: "timestamp",
}

// Decode decodes ItemSell from json.
func (s *ItemSell) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ItemSell to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "seller":
			if err := func() error {
				s.Seller.Reset()
				if err := s.Seller.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seller\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "buyer":
			if err := func() error {
				s.Buyer.Reset()
				if err := s.Buyer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyer\"")
			}
		case "timestamp":
			if err := func() error {
				s.Timestamp.Reset()
				if err := s.Timestamp.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timestamp\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ItemSell")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ItemSell) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ItemSell) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KatFlip) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KatFlip) encodeFields(e *jx.Encoder) {
	{
		if s.Volume.Set {
			e.FieldStart("volume")
			s.Volume.Encode(e)
		}
	}
	{
		if s.Median.Set {
			e.FieldStart("median")
			s.Median.Encode(e)
		}
	}
	{
		if s.UpgradeCost.Set {
			e.FieldStart("upgradeCost")
			s.UpgradeCost.Encode(e)
		}
	}
	{
		if s.MaterialCost.Set {
			e.FieldStart("materialCost")
			s.MaterialCost.Encode(e)
		}
	}
	{
		if s.OriginAuction.Set {
			e.FieldStart("originAuction")
			s.OriginAuction.Encode(e)
		}
	}
	{
		if s.CoreData.Set {
			e.FieldStart("coreData")
			s.CoreData.Encode(e)
		}
	}
	{
		if s.TargetRarity.Set {
			e.FieldStart("targetRarity")
			s.TargetRarity.Encode(e)
		}
	}
	{
		if s.Profit.Set {
			e.FieldStart("profit")
			s.Profit.Encode(e)
		}
	}
	{
		if s.ReferenceAuction.Set {
			e.FieldStart("referenceAuction")
			s.ReferenceAuction.Encode(e)
		}
	}
	{
		if s.PurchaseCost.Set {
			e.FieldStart("purchaseCost")
			s.PurchaseCost.Encode(e)
		}
	}
	{
		if s.OriginAuctionName.Set {
			e.FieldStart("originAuctionName")
			s.OriginAuctionName.Encode(e)
		}
	}
}

var jsonFieldsNameOfKatFlip = [11]string{
	0:  "volume",
	1:  "median",
	2:  "upgradeCost",
	3:  "materialCost",
	4:  "originAuction",
	5:  "coreData",
	6:  "targetRarity",
	7:  "profit",
	8:  "referenceAuction",
	9:  "purchaseCost",
	10: "originAuctionName",
}

// Decode decodes KatFlip from json.
func (s *KatFlip) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KatFlip to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "volume":
			if err := func() error {
				s.Volume.Reset()
				if err := s.Volume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volume\"")
			}
		case "median":
			if err := func() error {
				s.Median.Reset()
				if err := s.Median.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"median\"")
			}
		case "upgradeCost":
			if err := func() error {
				s.UpgradeCost.Reset()
				if err := s.UpgradeCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"upgradeCost\"")
			}
		case "materialCost":
			if err := func() error {
				s.MaterialCost.Reset()
				if err := s.MaterialCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"materialCost\"")
			}
		case "originAuction":
			if err := func() error {
				s.OriginAuction.Reset()
				if err := s.OriginAuction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"originAuction\"")
			}
		case "coreData":
			if err := func() error {
				s.CoreData.Reset()
				if err := s.CoreData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"coreData\"")
			}
		case "targetRarity":
			if err := func() error {
				s.TargetRarity.Reset()
				if err := s.TargetRarity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"targetRarity\"")
			}
		case "profit":
			if err := func() error {
				s.Profit.Reset()
				if err := s.Profit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profit\"")
			}
		case "referenceAuction":
			if err := func() error {
				s.ReferenceAuction.Reset()
				if err := s.ReferenceAuction.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"referenceAuction\"")
			}
		case "purchaseCost":
			if err := func() error {
				s.PurchaseCost.Reset()
				if err := s.PurchaseCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"purchaseCost\"")
			}
		case "originAuctionName":
			if err := func() error {
				s.OriginAuctionName.Reset()
				if err := s.OriginAuctionName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"originAuctionName\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KatFlip")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KatFlip) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KatFlip) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *KatUpgradeCost) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *KatUpgradeCost) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.BaseRarity.Set {
			e.FieldStart("baseRarity")
			s.BaseRarity.Encode(e)
		}
	}
	{
		if s.Hours.Set {
			e.FieldStart("hours")
			s.Hours.Encode(e)
		}
	}
	{
		if s.Cost.Set {
			e.FieldStart("cost")
			s.Cost.Encode(e)
		}
	}
	{
		if s.Material.Set {
			e.FieldStart("material")
			s.Material.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.ItemTag.Set {
			e.FieldStart("itemTag")
			s.ItemTag.Encode(e)
		}
	}
}

var jsonFieldsNameOfKatUpgradeCost = [7]string{
	0: "name",
	1: "baseRarity",
	2: "hours",
	3: "cost",
	4: "material",
	5: "amount",
	6: "itemTag",
}

// Decode decodes KatUpgradeCost from json.
func (s *KatUpgradeCost) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode KatUpgradeCost to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "baseRarity":
			if err := func() error {
				s.BaseRarity.Reset()
				if err := s.BaseRarity.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"baseRarity\"")
			}
		case "hours":
			if err := func() error {
				s.Hours.Reset()
				if err := s.Hours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hours\"")
			}
		case "cost":
			if err := func() error {
				s.Cost.Reset()
				if err := s.Cost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost\"")
			}
		case "material":
			if err := func() error {
				s.Material.Reset()
				if err := s.Material.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"material\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "itemTag":
			if err := func() error {
				s.ItemTag.Reset()
				if err := s.ItemTag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemTag\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode KatUpgradeCost")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *KatUpgradeCost) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *KatUpgradeCost) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListEntry) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListEntry) encodeFields(e *jx.Encoder) {
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.DisplayName.Set {
			e.FieldStart("displayName")
			s.DisplayName.Encode(e)
		}
	}
	{
		if s.Filter.Set {
			e.FieldStart("filter")
			s.Filter.Encode(e)
		}
	}
	{
		if s.Tags.Set {
			e.FieldStart("tags")
			s.Tags.Encode(e)
		}
	}
	{
		if s.Order.Set {
			e.FieldStart("order")
			s.Order.Encode(e)
		}
	}
	{
		if s.Group.Set {
			e.FieldStart("group")
			s.Group.Encode(e)
		}
	}
}

var jsonFieldsNameOfListEntry = [6]string{
	0: "tag",
	1: "displayName",
	2: "filter",
	3: "tags",
	4: "order",
	5: "group",
}

// Decode decodes ListEntry from json.
func (s *ListEntry) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListEntry to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "displayName":
			if err := func() error {
				s.DisplayName.Reset()
				if err := s.DisplayName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"displayName\"")
			}
		case "filter":
			if err := func() error {
				s.Filter.Reset()
				if err := s.Filter.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"filter\"")
			}
		case "tags":
			if err := func() error {
				s.Tags.Reset()
				if err := s.Tags.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tags\"")
			}
		case "order":
			if err := func() error {
				s.Order.Reset()
				if err := s.Order.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"order\"")
			}
		case "group":
			if err := func() error {
				s.Group.Reset()
				if err := s.Group.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"group\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListEntry")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListEntry) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListEntry) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ListEntryFilter) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ListEntryFilter) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfListEntryFilter = [0]string{}

// Decode decodes ListEntryFilter from json.
func (s *ListEntryFilter) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ListEntryFilter to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ListEntryFilter")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ListEntryFilter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ListEntryFilter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ModSettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ModSettings) encodeFields(e *jx.Encoder) {
	{
		if s.JustProfit.Set {
			e.FieldStart("justProfit")
			s.JustProfit.Encode(e)
		}
	}
	{
		if s.SoundOnFlip.Set {
			e.FieldStart("soundOnFlip")
			s.SoundOnFlip.Encode(e)
		}
	}
	{
		if s.ShortNumbers.Set {
			e.FieldStart("shortNumbers")
			s.ShortNumbers.Encode(e)
		}
	}
	{
		if s.BlockTenSecMsg.Set {
			e.FieldStart("blockTenSecMsg")
			s.BlockTenSecMsg.Encode(e)
		}
	}
	{
		if s.Format.Set {
			e.FieldStart("format")
			s.Format.Encode(e)
		}
	}
	{
		if s.Chat.Set {
			e.FieldStart("chat")
			s.Chat.Encode(e)
		}
	}
	{
		if s.Countdown.Set {
			e.FieldStart("countdown")
			s.Countdown.Encode(e)
		}
	}
	{
		if s.HideNoBestFlip.Set {
			e.FieldStart("hideNoBestFlip")
			s.HideNoBestFlip.Encode(e)
		}
	}
	{
		if s.TimerX.Set {
			e.FieldStart("timerX")
			s.TimerX.Encode(e)
		}
	}
	{
		if s.TimerY.Set {
			e.FieldStart("timerY")
			s.TimerY.Encode(e)
		}
	}
	{
		if s.TimerSeconds.Set {
			e.FieldStart("timerSeconds")
			s.TimerSeconds.Encode(e)
		}
	}
	{
		if s.TimerScale.Set {
			e.FieldStart("timerScale")
			s.TimerScale.Encode(e)
		}
	}
	{
		if s.TimerPrefix.Set {
			e.FieldStart("timerPrefix")
			s.TimerPrefix.Encode(e)
		}
	}
	{
		if s.TimerPrecision.Set {
			e.FieldStart("timerPrecision")
			s.TimerPrecision.Encode(e)
		}
	}
	{
		if s.BlockedMsg.Set {
			e.FieldStart("blockedMsg")
			s.BlockedMsg.Encode(e)
		}
	}
	{
		if s.NoAdjustToPurse.Set {
			e.FieldStart("noAdjustToPurse")
			s.NoAdjustToPurse.Encode(e)
		}
	}
	{
		if s.NoBedDelay.Set {
			e.FieldStart("noBedDelay")
			s.NoBedDelay.Encode(e)
		}
	}
	{
		if s.StreamerMode.Set {
			e.FieldStart("streamerMode")
			s.StreamerMode.Encode(e)
		}
	}
	{
		if s.AutoStartFlipper.Set {
			e.FieldStart("autoStartFlipper")
			s.AutoStartFlipper.Encode(e)
		}
	}
	{
		if s.NormalSoldFlips.Set {
			e.FieldStart("normalSoldFlips")
			s.NormalSoldFlips.Encode(e)
		}
	}
}

var jsonFieldsNameOfModSettings = [20]string{
	0:  "justProfit",
	1:  "soundOnFlip",
	2:  "shortNumbers",
	3:  "blockTenSecMsg",
	4:  "format",
	5:  "chat",
	6:  "countdown",
	7:  "hideNoBestFlip",
	8:  "timerX",
	9:  "timerY",
	10: "timerSeconds",
	11: "timerScale",
	12: "timerPrefix",
	13: "timerPrecision",
	14: "blockedMsg",
	15: "noAdjustToPurse",
	16: "noBedDelay",
	17: "streamerMode",
	18: "autoStartFlipper",
	19: "normalSoldFlips",
}

// Decode decodes ModSettings from json.
func (s *ModSettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ModSettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "justProfit":
			if err := func() error {
				s.JustProfit.Reset()
				if err := s.JustProfit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"justProfit\"")
			}
		case "soundOnFlip":
			if err := func() error {
				s.SoundOnFlip.Reset()
				if err := s.SoundOnFlip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"soundOnFlip\"")
			}
		case "shortNumbers":
			if err := func() error {
				s.ShortNumbers.Reset()
				if err := s.ShortNumbers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"shortNumbers\"")
			}
		case "blockTenSecMsg":
			if err := func() error {
				s.BlockTenSecMsg.Reset()
				if err := s.BlockTenSecMsg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blockTenSecMsg\"")
			}
		case "format":
			if err := func() error {
				s.Format.Reset()
				if err := s.Format.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"format\"")
			}
		case "chat":
			if err := func() error {
				s.Chat.Reset()
				if err := s.Chat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chat\"")
			}
		case "countdown":
			if err := func() error {
				s.Countdown.Reset()
				if err := s.Countdown.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"countdown\"")
			}
		case "hideNoBestFlip":
			if err := func() error {
				s.HideNoBestFlip.Reset()
				if err := s.HideNoBestFlip.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hideNoBestFlip\"")
			}
		case "timerX":
			if err := func() error {
				s.TimerX.Reset()
				if err := s.TimerX.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timerX\"")
			}
		case "timerY":
			if err := func() error {
				s.TimerY.Reset()
				if err := s.TimerY.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timerY\"")
			}
		case "timerSeconds":
			if err := func() error {
				s.TimerSeconds.Reset()
				if err := s.TimerSeconds.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timerSeconds\"")
			}
		case "timerScale":
			if err := func() error {
				s.TimerScale.Reset()
				if err := s.TimerScale.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timerScale\"")
			}
		case "timerPrefix":
			if err := func() error {
				s.TimerPrefix.Reset()
				if err := s.TimerPrefix.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timerPrefix\"")
			}
		case "timerPrecision":
			if err := func() error {
				s.TimerPrecision.Reset()
				if err := s.TimerPrecision.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timerPrecision\"")
			}
		case "blockedMsg":
			if err := func() error {
				s.BlockedMsg.Reset()
				if err := s.BlockedMsg.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"blockedMsg\"")
			}
		case "noAdjustToPurse":
			if err := func() error {
				s.NoAdjustToPurse.Reset()
				if err := s.NoAdjustToPurse.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noAdjustToPurse\"")
			}
		case "noBedDelay":
			if err := func() error {
				s.NoBedDelay.Reset()
				if err := s.NoBedDelay.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"noBedDelay\"")
			}
		case "streamerMode":
			if err := func() error {
				s.StreamerMode.Reset()
				if err := s.StreamerMode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"streamerMode\"")
			}
		case "autoStartFlipper":
			if err := func() error {
				s.AutoStartFlipper.Reset()
				if err := s.AutoStartFlipper.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"autoStartFlipper\"")
			}
		case "normalSoldFlips":
			if err := func() error {
				s.NormalSoldFlips.Reset()
				if err := s.NormalSoldFlips.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"normalSoldFlips\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ModSettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ModSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ModSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ModType as json.
func (s ModType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ModType from json.
func (s *ModType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ModType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ModType(v) {
	case ModTypeNONE:
		*s = ModTypeNONE
	case ModTypeINSERT:
		*s = ModTypeINSERT
	case ModTypeREPLACE:
		*s = ModTypeREPLACE
	case ModTypeAPPEND:
		*s = ModTypeAPPEND
	case ModTypeDELETE:
		*s = ModTypeDELETE
	default:
		*s = ModType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ModType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ModType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ModelCandidate) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ModelCandidate) encodeFields(e *jx.Encoder) {
	{
		if s.Key.Set {
			e.FieldStart("key")
			s.Key.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Perks.Set {
			e.FieldStart("perks")
			s.Perks.Encode(e)
		}
	}
}

var jsonFieldsNameOfModelCandidate = [3]string{
	0: "key",
	1: "name",
	2: "perks",
}

// Decode decodes ModelCandidate from json.
func (s *ModelCandidate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ModelCandidate to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "key":
			if err := func() error {
				s.Key.Reset()
				if err := s.Key.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"key\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "perks":
			if err := func() error {
				s.Perks.Reset()
				if err := s.Perks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"perks\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ModelCandidate")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ModelCandidate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ModelCandidate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ModelElectionPeriod) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ModelElectionPeriod) encodeFields(e *jx.Encoder) {
	{
		if s.Candidates.Set {
			e.FieldStart("candidates")
			s.Candidates.Encode(e)
		}
	}
	{
		if s.End.Set {
			e.FieldStart("end")
			s.End.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Start.Set {
			e.FieldStart("start")
			s.Start.Encode(e)
		}
	}
	{
		if s.Winner.Set {
			e.FieldStart("winner")
			s.Winner.Encode(e)
		}
	}
	{
		if s.Year.Set {
			e.FieldStart("year")
			s.Year.Encode(e)
		}
	}
}

var jsonFieldsNameOfModelElectionPeriod = [6]string{
	0: "candidates",
	1: "end",
	2: "id",
	3: "start",
	4: "winner",
	5: "year",
}

// Decode decodes ModelElectionPeriod from json.
func (s *ModelElectionPeriod) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ModelElectionPeriod to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "candidates":
			if err := func() error {
				s.Candidates.Reset()
				if err := s.Candidates.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"candidates\"")
			}
		case "end":
			if err := func() error {
				s.End.Reset()
				if err := s.End.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "start":
			if err := func() error {
				s.Start.Reset()
				if err := s.Start.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start\"")
			}
		case "winner":
			if err := func() error {
				s.Winner.Reset()
				if err := s.Winner.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"winner\"")
			}
		case "year":
			if err := func() error {
				s.Year.Reset()
				if err := s.Year.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"year\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ModelElectionPeriod")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ModelElectionPeriod) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ModelElectionPeriod) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ModelPerk) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ModelPerk) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
}

var jsonFieldsNameOfModelPerk = [2]string{
	0: "description",
	1: "name",
}

// Decode decodes ModelPerk from json.
func (s *ModelPerk) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ModelPerk to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ModelPerk")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ModelPerk) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ModelPerk) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NbtData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NbtData) encodeFields(e *jx.Encoder) {
	{
		if s.Data.Set {
			e.FieldStart("data")
			s.Data.Encode(e)
		}
	}
}

var jsonFieldsNameOfNbtData = [1]string{
	0: "data",
}

// Decode decodes NbtData from json.
func (s *NbtData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NbtData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "data":
			if err := func() error {
				s.Data.Reset()
				if err := s.Data.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"data\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NbtData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NbtData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NbtData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *NbtDataData) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *NbtDataData) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfNbtDataData = [0]string{}

// Decode decodes NbtDataData from json.
func (s *NbtDataData) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode NbtDataData to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode NbtDataData")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *NbtDataData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NbtDataData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o NilString) Encode(e *jx.Encoder) {
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *NilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode NilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Null = true
		return nil
	}
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s NilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *NilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *OldRefInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *OldRefInfo) encodeFields(e *jx.Encoder) {
	{
		if s.RefId.Set {
			e.FieldStart("refId")
			s.RefId.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.ReceivedTime.Set {
			e.FieldStart("receivedTime")
			s.ReceivedTime.Encode(e)
		}
	}
	{
		if s.ReceivedHours.Set {
			e.FieldStart("receivedHours")
			s.ReceivedHours.Encode(e)
		}
	}
	{
		if s.BougthPremium.Set {
			e.FieldStart("bougthPremium")
			s.BougthPremium.Encode(e)
		}
	}
}

var jsonFieldsNameOfOldRefInfo = [5]string{
	0: "refId",
	1: "count",
	2: "receivedTime",
	3: "receivedHours",
	4: "bougthPremium",
}

// Decode decodes OldRefInfo from json.
func (s *OldRefInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode OldRefInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "refId":
			if err := func() error {
				s.RefId.Reset()
				if err := s.RefId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"refId\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "receivedTime":
			if err := func() error {
				s.ReceivedTime.Reset()
				if err := s.ReceivedTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receivedTime\"")
			}
		case "receivedHours":
			if err := func() error {
				s.ReceivedHours.Reset()
				if err := s.ReceivedHours.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"receivedHours\"")
			}
		case "bougthPremium":
			if err := func() error {
				s.BougthPremium.Reset()
				if err := s.BougthPremium.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bougthPremium\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode OldRefInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *OldRefInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OldRefInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes BinResponse as json.
func (o OptBinResponse) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes BinResponse from json.
func (o *OptBinResponse) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBinResponse to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBinResponse) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBinResponse) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes bool as json.
func (o OptBool) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Bool(bool(o.Value))
}

// Decode decodes bool from json.
func (o *OptBool) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptBool to nil")
	}
	o.Set = true
	v, err := d.Bool()
	if err != nil {
		return err
	}
	o.Value = bool(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptBool) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptBool) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Category as json.
func (o OptCategory) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Category from json.
func (o *OptCategory) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptCategory to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptCategory) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptCategory) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes time.Time as json.
func (o OptDateTime) Encode(e *jx.Encoder, format func(*jx.Encoder, time.Time)) {
	if !o.Set {
		return
	}
	format(e, o.Value)
}

// Decode decodes time.Time from json.
func (o *OptDateTime) Decode(d *jx.Decoder, format func(*jx.Decoder) (time.Time, error)) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDateTime to nil")
	}
	o.Set = true
	v, err := format(d)
	if err != nil {
		return err
	}
	o.Value = v
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDateTime) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e, json.EncodeDateTime)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDateTime) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d, json.DecodeDateTime)
}

// Encode encodes DescriptionSetting as json.
func (o OptDescriptionSetting) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes DescriptionSetting from json.
func (o *OptDescriptionSetting) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptDescriptionSetting to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptDescriptionSetting) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptDescriptionSetting) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes EnchantmentType as json.
func (o OptEnchantmentType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes EnchantmentType from json.
func (o *OptEnchantmentType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptEnchantmentType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptEnchantmentType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptEnchantmentType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *FilterQueryFilters as json.
func (o OptFilterQueryFilters) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *FilterQueryFilters from json.
func (o *OptFilterQueryFilters) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFilterQueryFilters to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFilterQueryFilters) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFilterQueryFilters) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FilterType as json.
func (o OptFilterType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes FilterType from json.
func (o *OptFilterType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFilterType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFilterType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFilterType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes FinderType as json.
func (o OptFinderType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes FinderType from json.
func (o *OptFinderType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFinderType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFinderType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFinderType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *FlipSettingsFilters as json.
func (o OptFlipSettingsFilters) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *FlipSettingsFilters from json.
func (o *OptFlipSettingsFilters) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFlipSettingsFilters to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFlipSettingsFilters) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFlipSettingsFilters) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float32 as json.
func (o OptFloat32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float32(float32(o.Value))
}

// Decode decodes float32 from json.
func (o *OptFloat32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat32 to nil")
	}
	o.Set = true
	v, err := d.Float32()
	if err != nil {
		return err
	}
	o.Value = float32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes float64 as json.
func (o OptFloat64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Float64(float64(o.Value))
}

// Decode decodes float64 from json.
func (o *OptFloat64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptFloat64 to nil")
	}
	o.Set = true
	v, err := d.Float64()
	if err != nil {
		return err
	}
	o.Value = float64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptFloat64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptFloat64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int32 as json.
func (o OptInt32) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int32(int32(o.Value))
}

// Decode decodes int32 from json.
func (o *OptInt32) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt32 to nil")
	}
	o.Set = true
	v, err := d.Int32()
	if err != nil {
		return err
	}
	o.Value = int32(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt32) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt32) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes int64 as json.
func (o OptInt64) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Int64(int64(o.Value))
}

// Decode decodes int64 from json.
func (o *OptInt64) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptInt64 to nil")
	}
	o.Set = true
	v, err := d.Int64()
	if err != nil {
		return err
	}
	o.Value = int64(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptInt64) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptInt64) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ItemCategory as json.
func (o OptItemCategory) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ItemCategory from json.
func (o *OptItemCategory) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptItemCategory to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptItemCategory) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptItemCategory) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ItemFlags as json.
func (o OptItemFlags) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ItemFlags from json.
func (o *OptItemFlags) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptItemFlags to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptItemFlags) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptItemFlags) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes KatUpgradeCost as json.
func (o OptKatUpgradeCost) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes KatUpgradeCost from json.
func (o *OptKatUpgradeCost) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptKatUpgradeCost to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptKatUpgradeCost) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptKatUpgradeCost) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *ListEntryFilter as json.
func (o OptListEntryFilter) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *ListEntryFilter from json.
func (o *OptListEntryFilter) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptListEntryFilter to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptListEntryFilter) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptListEntryFilter) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ModSettings as json.
func (o OptModSettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ModSettings from json.
func (o *OptModSettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptModSettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptModSettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptModSettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ModType as json.
func (o OptModType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ModType from json.
func (o *OptModType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptModType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptModType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptModType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ModelCandidate as json.
func (o OptModelCandidate) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ModelCandidate from json.
func (o *OptModelCandidate) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptModelCandidate to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptModelCandidate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptModelCandidate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes NbtData as json.
func (o OptNbtData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes NbtData from json.
func (o *OptNbtData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNbtData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNbtData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNbtData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *NbtDataData as json.
func (o OptNbtDataData) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *NbtDataData from json.
func (o *OptNbtDataData) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNbtDataData to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNbtDataData) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNbtDataData) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []BuyOrder as json.
func (o OptNilBuyOrderArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []BuyOrder from json.
func (o *OptNilBuyOrderArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilBuyOrderArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []BuyOrder
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]BuyOrder, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem BuyOrder
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilBuyOrderArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilBuyOrderArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []ColorEnchant as json.
func (o OptNilColorEnchantArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []ColorEnchant from json.
func (o *OptNilColorEnchantArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilColorEnchantArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []ColorEnchant
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]ColorEnchant, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem ColorEnchant
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilColorEnchantArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilColorEnchantArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ColorSaveAuctionFlatNbt as json.
func (o OptNilColorSaveAuctionFlatNbt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	o.Value.Encode(e)
}

// Decode decodes ColorSaveAuctionFlatNbt from json.
func (o *OptNilColorSaveAuctionFlatNbt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilColorSaveAuctionFlatNbt to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v ColorSaveAuctionFlatNbt
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make(ColorSaveAuctionFlatNbt)
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilColorSaveAuctionFlatNbt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilColorSaveAuctionFlatNbt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes [][]DescriptionField as json.
func (o OptNilDescriptionFieldArrayArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		e.ArrStart()
		for _, elem := range elem {
			elem.Encode(e)
		}
		e.ArrEnd()
	}
	e.ArrEnd()
}

// Decode decodes [][]DescriptionField from json.
func (o *OptNilDescriptionFieldArrayArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilDescriptionFieldArrayArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v [][]DescriptionField
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([][]DescriptionField, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem []DescriptionField
		elem = make([]DescriptionField, 0)
		if err := d.Arr(func(d *jx.Decoder) error {
			var elemElem DescriptionField
			if err := elemElem.Decode(d); err != nil {
				return err
			}
			elem = append(elem, elemElem)
			return nil
		}); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilDescriptionFieldArrayArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilDescriptionFieldArrayArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []Enchantment as json.
func (o OptNilEnchantmentArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []Enchantment from json.
func (o *OptNilEnchantmentArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilEnchantmentArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []Enchantment
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]Enchantment, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem Enchantment
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilEnchantmentArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilEnchantmentArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []FlipDetails as json.
func (o OptNilFlipDetailsArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []FlipDetails from json.
func (o *OptNilFlipDetailsArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilFlipDetailsArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []FlipDetails
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]FlipDetails, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem FlipDetails
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilFlipDetailsArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilFlipDetailsArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []Ingredient as json.
func (o OptNilIngredientArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []Ingredient from json.
func (o *OptNilIngredientArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilIngredientArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []Ingredient
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]Ingredient, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem Ingredient
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilIngredientArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilIngredientArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []ListEntry as json.
func (o OptNilListEntryArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []ListEntry from json.
func (o *OptNilListEntryArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilListEntryArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []ListEntry
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]ListEntry, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem ListEntry
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilListEntryArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilListEntryArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []ModelCandidate as json.
func (o OptNilModelCandidateArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []ModelCandidate from json.
func (o *OptNilModelCandidateArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilModelCandidateArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []ModelCandidate
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]ModelCandidate, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem ModelCandidate
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilModelCandidateArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilModelCandidateArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []ModelPerk as json.
func (o OptNilModelPerkArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []ModelPerk from json.
func (o *OptNilModelPerkArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilModelPerkArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []ModelPerk
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]ModelPerk, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem ModelPerk
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilModelPerkArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilModelPerkArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []PropertyChange as json.
func (o OptNilPropertyChangeArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []PropertyChange from json.
func (o *OptNilPropertyChangeArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilPropertyChangeArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []PropertyChange
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]PropertyChange, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem PropertyChange
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilPropertyChangeArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilPropertyChangeArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []SaveBids as json.
func (o OptNilSaveBidsArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []SaveBids from json.
func (o *OptNilSaveBidsArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSaveBidsArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []SaveBids
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]SaveBids, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem SaveBids
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSaveBidsArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSaveBidsArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []SellOrder as json.
func (o OptNilSellOrderArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []SellOrder from json.
func (o *OptNilSellOrderArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilSellOrderArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []SellOrder
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]SellOrder, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem SellOrder
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilSellOrderArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilSellOrderArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptNilString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptNilString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilString to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []string as json.
func (o OptNilStringArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		e.Str(elem)
	}
	e.ArrEnd()
}

// Decode decodes []string from json.
func (o *OptNilStringArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilStringArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []string
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]string, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem string
		v, err := d.Str()
		elem = string(v)
		if err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilStringArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilStringArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes []UUID as json.
func (o OptNilUUIDArray) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	if o.Null {
		e.Null()
		return
	}
	e.ArrStart()
	for _, elem := range o.Value {
		elem.Encode(e)
	}
	e.ArrEnd()
}

// Decode decodes []UUID from json.
func (o *OptNilUUIDArray) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptNilUUIDArray to nil")
	}
	if d.Next() == jx.Null {
		if err := d.Null(); err != nil {
			return err
		}

		var v []UUID
		o.Value = v
		o.Set = true
		o.Null = true
		return nil
	}
	o.Set = true
	o.Null = false
	o.Value = make([]UUID, 0)
	if err := d.Arr(func(d *jx.Decoder) error {
		var elem UUID
		if err := elem.Decode(d); err != nil {
			return err
		}
		o.Value = append(o.Value, elem)
		return nil
	}); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptNilUUIDArray) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptNilUUIDArray) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes OldRefInfo as json.
func (o OptOldRefInfo) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes OldRefInfo from json.
func (o *OptOldRefInfo) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptOldRefInfo to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptOldRefInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptOldRefInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProductType as json.
func (o OptProductType) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes ProductType from json.
func (o *OptProductType) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptProductType to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptProductType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptProductType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Reforge as json.
func (o OptReforge) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Reforge from json.
func (o *OptReforge) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptReforge to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptReforge) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptReforge) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes RequiredCollection as json.
func (o OptRequiredCollection) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes RequiredCollection from json.
func (o *OptRequiredCollection) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptRequiredCollection to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptRequiredCollection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptRequiredCollection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes SaveAuction as json.
func (o OptSaveAuction) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes SaveAuction from json.
func (o *OptSaveAuction) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSaveAuction to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSaveAuction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSaveAuction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes *SaveAuctionFlatNbt as json.
func (o OptSaveAuctionFlatNbt) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes *SaveAuctionFlatNbt from json.
func (o *OptSaveAuctionFlatNbt) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptSaveAuctionFlatNbt to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptSaveAuctionFlatNbt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptSaveAuctionFlatNbt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes string as json.
func (o OptString) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes string from json.
func (o *OptString) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptString to nil")
	}
	o.Set = true
	v, err := d.Str()
	if err != nil {
		return err
	}
	o.Value = string(v)
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptString) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptString) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tier as json.
func (o OptTier) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	e.Str(string(o.Value))
}

// Decode decodes Tier from json.
func (o *OptTier) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptTier to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptTier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptTier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes VisibilitySettings as json.
func (o OptVisibilitySettings) Encode(e *jx.Encoder) {
	if !o.Set {
		return
	}
	o.Value.Encode(e)
}

// Decode decodes VisibilitySettings from json.
func (o *OptVisibilitySettings) Decode(d *jx.Decoder) error {
	if o == nil {
		return errors.New("invalid: unable to decode OptVisibilitySettings to nil")
	}
	o.Set = true
	if err := o.Value.Decode(d); err != nil {
		return err
	}
	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s OptVisibilitySettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *OptVisibilitySettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PlayerResult) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PlayerResult) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.HitCount.Set {
			e.FieldStart("hitCount")
			s.HitCount.Encode(e)
		}
	}
}

var jsonFieldsNameOfPlayerResult = [3]string{
	0: "name",
	1: "uuid",
	2: "hitCount",
}

// Decode decodes PlayerResult from json.
func (s *PlayerResult) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PlayerResult to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "hitCount":
			if err := func() error {
				s.HitCount.Reset()
				if err := s.HitCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hitCount\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PlayerResult")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PlayerResult) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PlayerResult) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PriceEstimate) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PriceEstimate) encodeFields(e *jx.Encoder) {
	{
		if s.Lbin.Set {
			e.FieldStart("lbin")
			s.Lbin.Encode(e)
		}
	}
	{
		if s.Median.Set {
			e.FieldStart("median")
			s.Median.Encode(e)
		}
	}
	{
		if s.Volume.Set {
			e.FieldStart("volume")
			s.Volume.Encode(e)
		}
	}
	{
		if s.LbinLink.Set {
			e.FieldStart("lbinLink")
			s.LbinLink.Encode(e)
		}
	}
	{
		if s.FastSell.Set {
			e.FieldStart("fastSell")
			s.FastSell.Encode(e)
		}
	}
	{
		if s.MedianKey.Set {
			e.FieldStart("medianKey")
			s.MedianKey.Encode(e)
		}
	}
	{
		if s.ItemKey.Set {
			e.FieldStart("itemKey")
			s.ItemKey.Encode(e)
		}
	}
}

var jsonFieldsNameOfPriceEstimate = [7]string{
	0: "lbin",
	1: "median",
	2: "volume",
	3: "lbinLink",
	4: "fastSell",
	5: "medianKey",
	6: "itemKey",
}

// Decode decodes PriceEstimate from json.
func (s *PriceEstimate) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PriceEstimate to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "lbin":
			if err := func() error {
				s.Lbin.Reset()
				if err := s.Lbin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lbin\"")
			}
		case "median":
			if err := func() error {
				s.Median.Reset()
				if err := s.Median.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"median\"")
			}
		case "volume":
			if err := func() error {
				s.Volume.Reset()
				if err := s.Volume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volume\"")
			}
		case "lbinLink":
			if err := func() error {
				s.LbinLink.Reset()
				if err := s.LbinLink.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lbinLink\"")
			}
		case "fastSell":
			if err := func() error {
				s.FastSell.Reset()
				if err := s.FastSell.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"fastSell\"")
			}
		case "medianKey":
			if err := func() error {
				s.MedianKey.Reset()
				if err := s.MedianKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"medianKey\"")
			}
		case "itemKey":
			if err := func() error {
				s.ItemKey.Reset()
				if err := s.ItemKey.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemKey\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PriceEstimate")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PriceEstimate) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PriceEstimate) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PriceSumary) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PriceSumary) encodeFields(e *jx.Encoder) {
	{
		if s.Min.Set {
			e.FieldStart("min")
			s.Min.Encode(e)
		}
	}
	{
		if s.Median.Set {
			e.FieldStart("median")
			s.Median.Encode(e)
		}
	}
	{
		if s.Mean.Set {
			e.FieldStart("mean")
			s.Mean.Encode(e)
		}
	}
	{
		if s.Mode.Set {
			e.FieldStart("mode")
			s.Mode.Encode(e)
		}
	}
	{
		if s.Volume.Set {
			e.FieldStart("volume")
			s.Volume.Encode(e)
		}
	}
	{
		if s.Max.Set {
			e.FieldStart("max")
			s.Max.Encode(e)
		}
	}
}

var jsonFieldsNameOfPriceSumary = [6]string{
	0: "min",
	1: "median",
	2: "mean",
	3: "mode",
	4: "volume",
	5: "max",
}

// Decode decodes PriceSumary from json.
func (s *PriceSumary) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PriceSumary to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "min":
			if err := func() error {
				s.Min.Reset()
				if err := s.Min.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"min\"")
			}
		case "median":
			if err := func() error {
				s.Median.Reset()
				if err := s.Median.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"median\"")
			}
		case "mean":
			if err := func() error {
				s.Mean.Reset()
				if err := s.Mean.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mean\"")
			}
		case "mode":
			if err := func() error {
				s.Mode.Reset()
				if err := s.Mode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"mode\"")
			}
		case "volume":
			if err := func() error {
				s.Volume.Reset()
				if err := s.Volume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volume\"")
			}
		case "max":
			if err := func() error {
				s.Max.Reset()
				if err := s.Max.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"max\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PriceSumary")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PriceSumary) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PriceSumary) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PrivacySettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PrivacySettings) encodeFields(e *jx.Encoder) {
	{
		if s.ChatRegex.Set {
			e.FieldStart("chatRegex")
			s.ChatRegex.Encode(e)
		}
	}
	{
		if s.CollectChat.Set {
			e.FieldStart("collectChat")
			s.CollectChat.Encode(e)
		}
	}
	{
		if s.CollectInventory.Set {
			e.FieldStart("collectInventory")
			s.CollectInventory.Encode(e)
		}
	}
	{
		if s.CollectTab.Set {
			e.FieldStart("collectTab")
			s.CollectTab.Encode(e)
		}
	}
	{
		if s.CollectScoreboard.Set {
			e.FieldStart("collectScoreboard")
			s.CollectScoreboard.Encode(e)
		}
	}
	{
		if s.AllowProxy.Set {
			e.FieldStart("allowProxy")
			s.AllowProxy.Encode(e)
		}
	}
	{
		if s.CollectInvClick.Set {
			e.FieldStart("collectInvClick")
			s.CollectInvClick.Encode(e)
		}
	}
	{
		if s.CollectChatClicks.Set {
			e.FieldStart("collectChatClicks")
			s.CollectChatClicks.Encode(e)
		}
	}
	{
		if s.CollectLobbyChanges.Set {
			e.FieldStart("collectLobbyChanges")
			s.CollectLobbyChanges.Encode(e)
		}
	}
	{
		if s.CollectEntities.Set {
			e.FieldStart("collectEntities")
			s.CollectEntities.Encode(e)
		}
	}
	{
		if s.CollectLocation.Set {
			e.FieldStart("collectLocation")
			s.CollectLocation.Encode(e)
		}
	}
	{
		if s.ExtendDescriptions.Set {
			e.FieldStart("extendDescriptions")
			s.ExtendDescriptions.Encode(e)
		}
	}
	{
		if s.CommandPrefixes.Set {
			e.FieldStart("commandPrefixes")
			s.CommandPrefixes.Encode(e)
		}
	}
	{
		if s.AutoStart.Set {
			e.FieldStart("autoStart")
			s.AutoStart.Encode(e)
		}
	}
}

var jsonFieldsNameOfPrivacySettings = [14]string{
	0:  "chatRegex",
	1:  "collectChat",
	2:  "collectInventory",
	3:  "collectTab",
	4:  "collectScoreboard",
	5:  "allowProxy",
	6:  "collectInvClick",
	7:  "collectChatClicks",
	8:  "collectLobbyChanges",
	9:  "collectEntities",
	10: "collectLocation",
	11: "extendDescriptions",
	12: "commandPrefixes",
	13: "autoStart",
}

// Decode decodes PrivacySettings from json.
func (s *PrivacySettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PrivacySettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "chatRegex":
			if err := func() error {
				s.ChatRegex.Reset()
				if err := s.ChatRegex.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"chatRegex\"")
			}
		case "collectChat":
			if err := func() error {
				s.CollectChat.Reset()
				if err := s.CollectChat.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectChat\"")
			}
		case "collectInventory":
			if err := func() error {
				s.CollectInventory.Reset()
				if err := s.CollectInventory.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectInventory\"")
			}
		case "collectTab":
			if err := func() error {
				s.CollectTab.Reset()
				if err := s.CollectTab.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectTab\"")
			}
		case "collectScoreboard":
			if err := func() error {
				s.CollectScoreboard.Reset()
				if err := s.CollectScoreboard.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectScoreboard\"")
			}
		case "allowProxy":
			if err := func() error {
				s.AllowProxy.Reset()
				if err := s.AllowProxy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"allowProxy\"")
			}
		case "collectInvClick":
			if err := func() error {
				s.CollectInvClick.Reset()
				if err := s.CollectInvClick.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectInvClick\"")
			}
		case "collectChatClicks":
			if err := func() error {
				s.CollectChatClicks.Reset()
				if err := s.CollectChatClicks.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectChatClicks\"")
			}
		case "collectLobbyChanges":
			if err := func() error {
				s.CollectLobbyChanges.Reset()
				if err := s.CollectLobbyChanges.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectLobbyChanges\"")
			}
		case "collectEntities":
			if err := func() error {
				s.CollectEntities.Reset()
				if err := s.CollectEntities.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectEntities\"")
			}
		case "collectLocation":
			if err := func() error {
				s.CollectLocation.Reset()
				if err := s.CollectLocation.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"collectLocation\"")
			}
		case "extendDescriptions":
			if err := func() error {
				s.ExtendDescriptions.Reset()
				if err := s.ExtendDescriptions.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extendDescriptions\"")
			}
		case "commandPrefixes":
			if err := func() error {
				s.CommandPrefixes.Reset()
				if err := s.CommandPrefixes.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"commandPrefixes\"")
			}
		case "autoStart":
			if err := func() error {
				s.AutoStart.Reset()
				if err := s.AutoStart.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"autoStart\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PrivacySettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PrivacySettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PrivacySettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes ProductType as json.
func (s ProductType) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes ProductType from json.
func (s *ProductType) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProductType to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch ProductType(v) {
	case ProductTypeNONE:
		*s = ProductTypeNONE
	case ProductTypeSERVICE:
		*s = ProductTypeSERVICE
	case ProductTypeCOLLECTABLE:
		*s = ProductTypeCOLLECTABLE
	case ProductTypeTOPUP:
		*s = ProductTypeTOPUP
	case ProductTypeLOCKED:
		*s = ProductTypeLOCKED
	case ProductTypeDISABLED:
		*s = ProductTypeDISABLED
	case ProductTypeVARIABLEPRICE:
		*s = ProductTypeVARIABLEPRICE
	default:
		*s = ProductType(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s ProductType) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProductType) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ProfitableCraft) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ProfitableCraft) encodeFields(e *jx.Encoder) {
	{
		if s.ItemId.Set {
			e.FieldStart("itemId")
			s.ItemId.Encode(e)
		}
	}
	{
		if s.ItemName.Set {
			e.FieldStart("itemName")
			s.ItemName.Encode(e)
		}
	}
	{
		if s.SellPrice.Set {
			e.FieldStart("sellPrice")
			s.SellPrice.Encode(e)
		}
	}
	{
		if s.CraftCost.Set {
			e.FieldStart("craftCost")
			s.CraftCost.Encode(e)
		}
	}
	{
		if s.Ingredients.Set {
			e.FieldStart("ingredients")
			s.Ingredients.Encode(e)
		}
	}
	{
		if s.ReqCollection.Set {
			e.FieldStart("reqCollection")
			s.ReqCollection.Encode(e)
		}
	}
	{
		if s.ReqSlayer.Set {
			e.FieldStart("reqSlayer")
			s.ReqSlayer.Encode(e)
		}
	}
	{
		if s.Volume.Set {
			e.FieldStart("volume")
			s.Volume.Encode(e)
		}
	}
	{
		if s.Median.Set {
			e.FieldStart("median")
			s.Median.Encode(e)
		}
	}
}

var jsonFieldsNameOfProfitableCraft = [9]string{
	0: "itemId",
	1: "itemName",
	2: "sellPrice",
	3: "craftCost",
	4: "ingredients",
	5: "reqCollection",
	6: "reqSlayer",
	7: "volume",
	8: "median",
}

// Decode decodes ProfitableCraft from json.
func (s *ProfitableCraft) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ProfitableCraft to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "itemId":
			if err := func() error {
				s.ItemId.Reset()
				if err := s.ItemId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemId\"")
			}
		case "itemName":
			if err := func() error {
				s.ItemName.Reset()
				if err := s.ItemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemName\"")
			}
		case "sellPrice":
			if err := func() error {
				s.SellPrice.Reset()
				if err := s.SellPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellPrice\"")
			}
		case "craftCost":
			if err := func() error {
				s.CraftCost.Reset()
				if err := s.CraftCost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"craftCost\"")
			}
		case "ingredients":
			if err := func() error {
				s.Ingredients.Reset()
				if err := s.Ingredients.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ingredients\"")
			}
		case "reqCollection":
			if err := func() error {
				s.ReqCollection.Reset()
				if err := s.ReqCollection.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reqCollection\"")
			}
		case "reqSlayer":
			if err := func() error {
				s.ReqSlayer.Reset()
				if err := s.ReqSlayer.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reqSlayer\"")
			}
		case "volume":
			if err := func() error {
				s.Volume.Reset()
				if err := s.Volume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volume\"")
			}
		case "median":
			if err := func() error {
				s.Median.Reset()
				if err := s.Median.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"median\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ProfitableCraft")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ProfitableCraft) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ProfitableCraft) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PropertyChange) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PropertyChange) encodeFields(e *jx.Encoder) {
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Effect.Set {
			e.FieldStart("effect")
			s.Effect.Encode(e)
		}
	}
}

var jsonFieldsNameOfPropertyChange = [2]string{
	0: "description",
	1: "effect",
}

// Decode decodes PropertyChange from json.
func (s *PropertyChange) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PropertyChange to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "effect":
			if err := func() error {
				s.Effect.Reset()
				if err := s.Effect.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"effect\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PropertyChange")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PropertyChange) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PropertyChange) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *PurchaseArgs) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *PurchaseArgs) encodeFields(e *jx.Encoder) {
	{
		if s.Slug.Set {
			e.FieldStart("slug")
			s.Slug.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.Reference.Set {
			e.FieldStart("reference")
			s.Reference.Encode(e)
		}
	}
}

var jsonFieldsNameOfPurchaseArgs = [3]string{
	0: "slug",
	1: "count",
	2: "reference",
}

// Decode decodes PurchaseArgs from json.
func (s *PurchaseArgs) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode PurchaseArgs to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "slug":
			if err := func() error {
				s.Slug.Reset()
				if err := s.Slug.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slug\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "reference":
			if err := func() error {
				s.Reference.Reset()
				if err := s.Reference.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reference\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode PurchaseArgs")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *PurchaseArgs) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *PurchaseArgs) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReferralInfo) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReferralInfo) encodeFields(e *jx.Encoder) {
	{
		if s.ReferedCount.Set {
			e.FieldStart("referedCount")
			s.ReferedCount.Encode(e)
		}
	}
	{
		if s.ValidatedMinecraft.Set {
			e.FieldStart("validatedMinecraft")
			s.ValidatedMinecraft.Encode(e)
		}
	}
	{
		if s.PurchasedCoins.Set {
			e.FieldStart("purchasedCoins")
			s.PurchasedCoins.Encode(e)
		}
	}
	{
		if s.ReferredBy.Set {
			e.FieldStart("referredBy")
			s.ReferredBy.Encode(e)
		}
	}
	{
		if s.OldInfo.Set {
			e.FieldStart("oldInfo")
			s.OldInfo.Encode(e)
		}
	}
}

var jsonFieldsNameOfReferralInfo = [5]string{
	0: "referedCount",
	1: "validatedMinecraft",
	2: "purchasedCoins",
	3: "referredBy",
	4: "oldInfo",
}

// Decode decodes ReferralInfo from json.
func (s *ReferralInfo) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReferralInfo to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "referedCount":
			if err := func() error {
				s.ReferedCount.Reset()
				if err := s.ReferedCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"referedCount\"")
			}
		case "validatedMinecraft":
			if err := func() error {
				s.ValidatedMinecraft.Reset()
				if err := s.ValidatedMinecraft.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"validatedMinecraft\"")
			}
		case "purchasedCoins":
			if err := func() error {
				s.PurchasedCoins.Reset()
				if err := s.PurchasedCoins.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"purchasedCoins\"")
			}
		case "referredBy":
			if err := func() error {
				s.ReferredBy.Reset()
				if err := s.ReferredBy.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"referredBy\"")
			}
		case "oldInfo":
			if err := func() error {
				s.OldInfo.Reset()
				if err := s.OldInfo.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"oldInfo\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReferralInfo")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReferralInfo) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReferralInfo) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *ReferredBy) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *ReferredBy) encodeFields(e *jx.Encoder) {
	{
		if s.RefCode.Set {
			e.FieldStart("refCode")
			s.RefCode.Encode(e)
		}
	}
}

var jsonFieldsNameOfReferredBy = [1]string{
	0: "refCode",
}

// Decode decodes ReferredBy from json.
func (s *ReferredBy) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode ReferredBy to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "refCode":
			if err := func() error {
				s.RefCode.Reset()
				if err := s.RefCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"refCode\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode ReferredBy")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *ReferredBy) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *ReferredBy) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Reforge as json.
func (s Reforge) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Reforge from json.
func (s *Reforge) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Reforge to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Reforge(v) {
	case ReforgeNone:
		*s = ReforgeNone
	case ReforgeDemonic:
		*s = ReforgeDemonic
	case ReforgeForceful:
		*s = ReforgeForceful
	case ReforgeGentle:
		*s = ReforgeGentle
	case ReforgeGodly:
		*s = ReforgeGodly
	case ReforgeHurtful:
		*s = ReforgeHurtful
	case ReforgeKeen:
		*s = ReforgeKeen
	case ReforgeStrong:
		*s = ReforgeStrong
	case ReforgeSuperior:
		*s = ReforgeSuperior
	case ReforgeUnpleasant:
		*s = ReforgeUnpleasant
	case ReforgeZealous:
		*s = ReforgeZealous
	case ReforgeOdd:
		*s = ReforgeOdd
	case ReforgeRich:
		*s = ReforgeRich
	case ReforgeEpic:
		*s = ReforgeEpic
	case ReforgeFair:
		*s = ReforgeFair
	case ReforgeFast:
		*s = ReforgeFast
	case ReforgeHeroic:
		*s = ReforgeHeroic
	case ReforgeLegendary:
		*s = ReforgeLegendary
	case ReforgeSpicy:
		*s = ReforgeSpicy
	case ReforgeDeadly:
		*s = ReforgeDeadly
	case ReforgeFine:
		*s = ReforgeFine
	case ReforgeGrand:
		*s = ReforgeGrand
	case ReforgeHasty:
		*s = ReforgeHasty
	case ReforgeNeat:
		*s = ReforgeNeat
	case ReforgePapid:
		*s = ReforgePapid
	case ReforgeUnreal:
		*s = ReforgeUnreal
	case ReforgeClean:
		*s = ReforgeClean
	case ReforgeFierce:
		*s = ReforgeFierce
	case ReforgeHeavy:
		*s = ReforgeHeavy
	case ReforgeLight:
		*s = ReforgeLight
	case ReforgeMythic:
		*s = ReforgeMythic
	case ReforgePure:
		*s = ReforgePure
	case ReforgeSmart:
		*s = ReforgeSmart
	case ReforgeTitanic:
		*s = ReforgeTitanic
	case ReforgeWise:
		*s = ReforgeWise
	case ReforgeVery:
		*s = ReforgeVery
	case ReforgeHighly:
		*s = ReforgeHighly
	case ReforgeBizarre:
		*s = ReforgeBizarre
	case ReforgeItchy:
		*s = ReforgeItchy
	case ReforgeOmnious:
		*s = ReforgeOmnious
	case ReforgePleasant:
		*s = ReforgePleasant
	case ReforgePretty:
		*s = ReforgePretty
	case ReforgeShiny:
		*s = ReforgeShiny
	case ReforgeSimple:
		*s = ReforgeSimple
	case ReforgeStrange:
		*s = ReforgeStrange
	case ReforgeVivid:
		*s = ReforgeVivid
	case ReforgeOminous:
		*s = ReforgeOminous
	case ReforgeSharp:
		*s = ReforgeSharp
	case ReforgeRapid:
		*s = ReforgeRapid
	case ReforgeNecrotic:
		*s = ReforgeNecrotic
	case ReforgeFabled:
		*s = ReforgeFabled
	case ReforgePrecise:
		*s = ReforgePrecise
	case ReforgeGiant:
		*s = ReforgeGiant
	case ReforgeAoteStone:
		*s = ReforgeAoteStone
	case ReforgeSpiritual:
		*s = ReforgeSpiritual
	case ReforgeTreacherous:
		*s = ReforgeTreacherous
	case ReforgeRenowned:
		*s = ReforgeRenowned
	case ReforgeReinforced:
		*s = ReforgeReinforced
	case ReforgeRichBow:
		*s = ReforgeRichBow
	case ReforgeSpiked:
		*s = ReforgeSpiked
	case ReforgePerfect:
		*s = ReforgePerfect
	case ReforgeMagnetic:
		*s = ReforgeMagnetic
	case ReforgeLoving:
		*s = ReforgeLoving
	case ReforgeGilded:
		*s = ReforgeGilded
	case ReforgeOddSword:
		*s = ReforgeOddSword
	case ReforgeSalty:
		*s = ReforgeSalty
	case ReforgeSilky:
		*s = ReforgeSilky
	case ReforgeRefined:
		*s = ReforgeRefined
	case ReforgeSuspicious:
		*s = ReforgeSuspicious
	case ReforgeToil:
		*s = ReforgeToil
	case ReforgeEmpowered:
		*s = ReforgeEmpowered
	case ReforgeFruitful:
		*s = ReforgeFruitful
	case ReforgeBlessed:
		*s = ReforgeBlessed
	case ReforgeShaded:
		*s = ReforgeShaded
	case ReforgeAwkward:
		*s = ReforgeAwkward
	case ReforgeDirty:
		*s = ReforgeDirty
	case ReforgeUndead:
		*s = ReforgeUndead
	case ReforgeCubic:
		*s = ReforgeCubic
	case ReforgeBloody:
		*s = ReforgeBloody
	case ReforgeMoil:
		*s = ReforgeMoil
	case ReforgeRidiculous:
		*s = ReforgeRidiculous
	case ReforgeRichSword:
		*s = ReforgeRichSword
	case ReforgeWarped:
		*s = ReforgeWarped
	case ReforgeOddBow:
		*s = ReforgeOddBow
	case ReforgeCandied:
		*s = ReforgeCandied
	case ReforgeSubmerged:
		*s = ReforgeSubmerged
	case ReforgeAncient:
		*s = ReforgeAncient
	case ReforgeWithered:
		*s = ReforgeWithered
	case ReforgeSweet:
		*s = ReforgeSweet
	case ReforgeFleet:
		*s = ReforgeFleet
	case ReforgeStellar:
		*s = ReforgeStellar
	case ReforgeMithraic:
		*s = ReforgeMithraic
	case ReforgeAuspicious:
		*s = ReforgeAuspicious
	case ReforgeHeadstrong:
		*s = ReforgeHeadstrong
	case ReforgeStiff:
		*s = ReforgeStiff
	case ReforgeBulky:
		*s = ReforgeBulky
	case ReforgeLucky:
		*s = ReforgeLucky
	case ReforgeBountiful:
		*s = ReforgeBountiful
	case ReforgeHeated:
		*s = ReforgeHeated
	case ReforgeJaded:
		*s = ReforgeJaded
	case ReforgeAmbered:
		*s = ReforgeAmbered
	case ReforgeDoubleBit:
		*s = ReforgeDoubleBit
	case ReforgeExcellent:
		*s = ReforgeExcellent
	case ReforgeFortunate:
		*s = ReforgeFortunate
	case ReforgeProspector:
		*s = ReforgeProspector
	case ReforgeLush:
		*s = ReforgeLush
	case ReforgeSturdy:
		*s = ReforgeSturdy
	case ReforgeLumberjack:
		*s = ReforgeLumberjack
	case ReforgeUnyielding:
		*s = ReforgeUnyielding
	case ReforgeGreat:
		*s = ReforgeGreat
	case ReforgeRobust:
		*s = ReforgeRobust
	case ReforgeRugged:
		*s = ReforgeRugged
	case ReforgeZooming:
		*s = ReforgeZooming
	case ReforgePeasant:
		*s = ReforgePeasant
	case ReforgeStrengthened:
		*s = ReforgeStrengthened
	case ReforgeGlistening:
		*s = ReforgeGlistening
	case ReforgeWaxed:
		*s = ReforgeWaxed
	case ReforgeFortified:
		*s = ReforgeFortified
	case ReforgeGreenThumb:
		*s = ReforgeGreenThumb
	case ReforgePitchin:
		*s = ReforgePitchin
	case ReforgeColdfusion:
		*s = ReforgeColdfusion
	case ReforgeUnknown:
		*s = ReforgeUnknown
	case ReforgeAny:
		*s = ReforgeAny
	default:
		*s = Reforge(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Reforge) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Reforge) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *RequiredCollection) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *RequiredCollection) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Level.Set {
			e.FieldStart("level")
			s.Level.Encode(e)
		}
	}
}

var jsonFieldsNameOfRequiredCollection = [2]string{
	0: "name",
	1: "level",
}

// Decode decodes RequiredCollection from json.
func (s *RequiredCollection) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode RequiredCollection to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "level":
			if err := func() error {
				s.Level.Reset()
				if err := s.Level.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"level\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode RequiredCollection")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *RequiredCollection) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *RequiredCollection) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SaveAuction) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SaveAuction) encodeFields(e *jx.Encoder) {
	{
		if s.UUID.Set {
			e.FieldStart("uuid")
			s.UUID.Encode(e)
		}
	}
	{
		if s.Count.Set {
			e.FieldStart("count")
			s.Count.Encode(e)
		}
	}
	{
		if s.StartingBid.Set {
			e.FieldStart("startingBid")
			s.StartingBid.Encode(e)
		}
	}
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.ItemName.Set {
			e.FieldStart("itemName")
			s.ItemName.Encode(e)
		}
	}
	{
		if s.Start.Set {
			e.FieldStart("start")
			s.Start.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.End.Set {
			e.FieldStart("end")
			s.End.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.AuctioneerId.Set {
			e.FieldStart("auctioneerId")
			s.AuctioneerId.Encode(e)
		}
	}
	{
		if s.ProfileId.Set {
			e.FieldStart("profileId")
			s.ProfileId.Encode(e)
		}
	}
	{
		if s.Coop.Set {
			e.FieldStart("coop")
			s.Coop.Encode(e)
		}
	}
	{
		if s.CoopMembers.Set {
			e.FieldStart("coopMembers")
			s.CoopMembers.Encode(e)
		}
	}
	{
		if s.HighestBidAmount.Set {
			e.FieldStart("highestBidAmount")
			s.HighestBidAmount.Encode(e)
		}
	}
	{
		if s.Bids.Set {
			e.FieldStart("bids")
			s.Bids.Encode(e)
		}
	}
	{
		if s.AnvilUses.Set {
			e.FieldStart("anvilUses")
			s.AnvilUses.Encode(e)
		}
	}
	{
		if s.Enchantments.Set {
			e.FieldStart("enchantments")
			s.Enchantments.Encode(e)
		}
	}
	{
		if s.NbtData.Set {
			e.FieldStart("nbtData")
			s.NbtData.Encode(e)
		}
	}
	{
		if s.ItemCreatedAt.Set {
			e.FieldStart("itemCreatedAt")
			s.ItemCreatedAt.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.Reforge.Set {
			e.FieldStart("reforge")
			s.Reforge.Encode(e)
		}
	}
	{
		if s.Category.Set {
			e.FieldStart("category")
			s.Category.Encode(e)
		}
	}
	{
		if s.Tier.Set {
			e.FieldStart("tier")
			s.Tier.Encode(e)
		}
	}
	{
		if s.Bin.Set {
			e.FieldStart("bin")
			s.Bin.Encode(e)
		}
	}
	{
		if s.FlatNbt.Set {
			e.FieldStart("flatNbt")
			s.FlatNbt.Encode(e)
		}
	}
}

var jsonFieldsNameOfSaveAuction = [22]string{
	0:  "uuid",
	1:  "count",
	2:  "startingBid",
	3:  "tag",
	4:  "itemName",
	5:  "start",
	6:  "end",
	7:  "auctioneerId",
	8:  "profileId",
	9:  "coop",
	10: "coopMembers",
	11: "highestBidAmount",
	12: "bids",
	13: "anvilUses",
	14: "enchantments",
	15: "nbtData",
	16: "itemCreatedAt",
	17: "reforge",
	18: "category",
	19: "tier",
	20: "bin",
	21: "flatNbt",
}

// Decode decodes SaveAuction from json.
func (s *SaveAuction) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SaveAuction to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "uuid":
			if err := func() error {
				s.UUID.Reset()
				if err := s.UUID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"uuid\"")
			}
		case "count":
			if err := func() error {
				s.Count.Reset()
				if err := s.Count.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"count\"")
			}
		case "startingBid":
			if err := func() error {
				s.StartingBid.Reset()
				if err := s.StartingBid.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"startingBid\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "itemName":
			if err := func() error {
				s.ItemName.Reset()
				if err := s.ItemName.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemName\"")
			}
		case "start":
			if err := func() error {
				s.Start.Reset()
				if err := s.Start.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"start\"")
			}
		case "end":
			if err := func() error {
				s.End.Reset()
				if err := s.End.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"end\"")
			}
		case "auctioneerId":
			if err := func() error {
				s.AuctioneerId.Reset()
				if err := s.AuctioneerId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"auctioneerId\"")
			}
		case "profileId":
			if err := func() error {
				s.ProfileId.Reset()
				if err := s.ProfileId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profileId\"")
			}
		case "coop":
			if err := func() error {
				s.Coop.Reset()
				if err := s.Coop.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"coop\"")
			}
		case "coopMembers":
			if err := func() error {
				s.CoopMembers.Reset()
				if err := s.CoopMembers.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"coopMembers\"")
			}
		case "highestBidAmount":
			if err := func() error {
				s.HighestBidAmount.Reset()
				if err := s.HighestBidAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"highestBidAmount\"")
			}
		case "bids":
			if err := func() error {
				s.Bids.Reset()
				if err := s.Bids.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bids\"")
			}
		case "anvilUses":
			if err := func() error {
				s.AnvilUses.Reset()
				if err := s.AnvilUses.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"anvilUses\"")
			}
		case "enchantments":
			if err := func() error {
				s.Enchantments.Reset()
				if err := s.Enchantments.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"enchantments\"")
			}
		case "nbtData":
			if err := func() error {
				s.NbtData.Reset()
				if err := s.NbtData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"nbtData\"")
			}
		case "itemCreatedAt":
			if err := func() error {
				s.ItemCreatedAt.Reset()
				if err := s.ItemCreatedAt.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"itemCreatedAt\"")
			}
		case "reforge":
			if err := func() error {
				s.Reforge.Reset()
				if err := s.Reforge.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"reforge\"")
			}
		case "category":
			if err := func() error {
				s.Category.Reset()
				if err := s.Category.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category\"")
			}
		case "tier":
			if err := func() error {
				s.Tier.Reset()
				if err := s.Tier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tier\"")
			}
		case "bin":
			if err := func() error {
				s.Bin.Reset()
				if err := s.Bin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bin\"")
			}
		case "flatNbt":
			if err := func() error {
				s.FlatNbt.Reset()
				if err := s.FlatNbt.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flatNbt\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SaveAuction")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SaveAuction) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SaveAuction) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SaveAuctionFlatNbt) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SaveAuctionFlatNbt) encodeFields(e *jx.Encoder) {
}

var jsonFieldsNameOfSaveAuctionFlatNbt = [0]string{}

// Decode decodes SaveAuctionFlatNbt from json.
func (s *SaveAuctionFlatNbt) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SaveAuctionFlatNbt to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		default:
			return d.Skip()
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SaveAuctionFlatNbt")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SaveAuctionFlatNbt) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SaveAuctionFlatNbt) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SaveBids) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SaveBids) encodeFields(e *jx.Encoder) {
	{
		if s.Bidder.Set {
			e.FieldStart("bidder")
			s.Bidder.Encode(e)
		}
	}
	{
		if s.ProfileId.Set {
			e.FieldStart("profileId")
			s.ProfileId.Encode(e)
		}
	}
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.Timestamp.Set {
			e.FieldStart("timestamp")
			s.Timestamp.Encode(e, json.EncodeDateTime)
		}
	}
}

var jsonFieldsNameOfSaveBids = [4]string{
	0: "bidder",
	1: "profileId",
	2: "amount",
	3: "timestamp",
}

// Decode decodes SaveBids from json.
func (s *SaveBids) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SaveBids to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "bidder":
			if err := func() error {
				s.Bidder.Reset()
				if err := s.Bidder.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"bidder\"")
			}
		case "profileId":
			if err := func() error {
				s.ProfileId.Reset()
				if err := s.ProfileId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profileId\"")
			}
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "timestamp":
			if err := func() error {
				s.Timestamp.Reset()
				if err := s.Timestamp.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timestamp\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SaveBids")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SaveBids) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SaveBids) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SearchResultItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SearchResultItem) encodeFields(e *jx.Encoder) {
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.IconUrl.Set {
			e.FieldStart("iconUrl")
			s.IconUrl.Encode(e)
		}
	}
	{
		if s.Img.Set {
			e.FieldStart("img")
			s.Img.Encode(e)
		}
	}
	{
		if s.Tier.Set {
			e.FieldStart("tier")
			s.Tier.Encode(e)
		}
	}
}

var jsonFieldsNameOfSearchResultItem = [6]string{
	0: "name",
	1: "id",
	2: "type",
	3: "iconUrl",
	4: "img",
	5: "tier",
}

// Decode decodes SearchResultItem from json.
func (s *SearchResultItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SearchResultItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "iconUrl":
			if err := func() error {
				s.IconUrl.Reset()
				if err := s.IconUrl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iconUrl\"")
			}
		case "img":
			if err := func() error {
				s.Img.Reset()
				if err := s.Img.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"img\"")
			}
		case "tier":
			if err := func() error {
				s.Tier.Reset()
				if err := s.Tier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tier\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SearchResultItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SearchResultItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SearchResultItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SellOrder) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SellOrder) encodeFields(e *jx.Encoder) {
	{
		if s.Amount.Set {
			e.FieldStart("amount")
			s.Amount.Encode(e)
		}
	}
	{
		if s.PricePerUnit.Set {
			e.FieldStart("pricePerUnit")
			s.PricePerUnit.Encode(e)
		}
	}
	{
		if s.Orders.Set {
			e.FieldStart("orders")
			s.Orders.Encode(e)
		}
	}
}

var jsonFieldsNameOfSellOrder = [3]string{
	0: "amount",
	1: "pricePerUnit",
	2: "orders",
}

// Decode decodes SellOrder from json.
func (s *SellOrder) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SellOrder to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "amount":
			if err := func() error {
				s.Amount.Reset()
				if err := s.Amount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"amount\"")
			}
		case "pricePerUnit":
			if err := func() error {
				s.PricePerUnit.Reset()
				if err := s.PricePerUnit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"pricePerUnit\"")
			}
		case "orders":
			if err := func() error {
				s.Orders.Reset()
				if err := s.Orders.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"orders\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SellOrder")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SellOrder) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SellOrder) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SkyblockItem) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SkyblockItem) encodeFields(e *jx.Encoder) {
	{
		if s.NpcSellPrice.Set {
			e.FieldStart("npcSellPrice")
			s.NpcSellPrice.Encode(e)
		}
	}
	{
		if s.MinecraftType.Set {
			e.FieldStart("minecraftType")
			s.MinecraftType.Encode(e)
		}
	}
	{
		if s.IconUrl.Set {
			e.FieldStart("iconUrl")
			s.IconUrl.Encode(e)
		}
	}
	{
		if s.Name.Set {
			e.FieldStart("name")
			s.Name.Encode(e)
		}
	}
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.Flags.Set {
			e.FieldStart("flags")
			s.Flags.Encode(e)
		}
	}
	{
		if s.Tier.Set {
			e.FieldStart("tier")
			s.Tier.Encode(e)
		}
	}
	{
		if s.Category.Set {
			e.FieldStart("category")
			s.Category.Encode(e)
		}
	}
}

var jsonFieldsNameOfSkyblockItem = [8]string{
	0: "npcSellPrice",
	1: "minecraftType",
	2: "iconUrl",
	3: "name",
	4: "tag",
	5: "flags",
	6: "tier",
	7: "category",
}

// Decode decodes SkyblockItem from json.
func (s *SkyblockItem) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SkyblockItem to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "npcSellPrice":
			if err := func() error {
				s.NpcSellPrice.Reset()
				if err := s.NpcSellPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"npcSellPrice\"")
			}
		case "minecraftType":
			if err := func() error {
				s.MinecraftType.Reset()
				if err := s.MinecraftType.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"minecraftType\"")
			}
		case "iconUrl":
			if err := func() error {
				s.IconUrl.Reset()
				if err := s.IconUrl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"iconUrl\"")
			}
		case "name":
			if err := func() error {
				s.Name.Reset()
				if err := s.Name.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"name\"")
			}
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "flags":
			if err := func() error {
				s.Flags.Reset()
				if err := s.Flags.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"flags\"")
			}
		case "tier":
			if err := func() error {
				s.Tier.Reset()
				if err := s.Tier.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tier\"")
			}
		case "category":
			if err := func() error {
				s.Category.Reset()
				if err := s.Category.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"category\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SkyblockItem")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SkyblockItem) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SkyblockItem) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *StorageQuickStatus) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *StorageQuickStatus) encodeFields(e *jx.Encoder) {
	{
		if s.ProductId.Set {
			e.FieldStart("productId")
			s.ProductId.Encode(e)
		}
	}
	{
		if s.BuyPrice.Set {
			e.FieldStart("buyPrice")
			s.BuyPrice.Encode(e)
		}
	}
	{
		if s.BuyVolume.Set {
			e.FieldStart("buyVolume")
			s.BuyVolume.Encode(e)
		}
	}
	{
		if s.BuyMovingWeek.Set {
			e.FieldStart("buyMovingWeek")
			s.BuyMovingWeek.Encode(e)
		}
	}
	{
		if s.BuyOrdersCount.Set {
			e.FieldStart("buyOrdersCount")
			s.BuyOrdersCount.Encode(e)
		}
	}
	{
		if s.SellPrice.Set {
			e.FieldStart("sellPrice")
			s.SellPrice.Encode(e)
		}
	}
	{
		if s.SellVolume.Set {
			e.FieldStart("sellVolume")
			s.SellVolume.Encode(e)
		}
	}
	{
		if s.SellMovingWeek.Set {
			e.FieldStart("sellMovingWeek")
			s.SellMovingWeek.Encode(e)
		}
	}
	{
		if s.SellOrdersCount.Set {
			e.FieldStart("sellOrdersCount")
			s.SellOrdersCount.Encode(e)
		}
	}
	{
		if s.TimeStamp.Set {
			e.FieldStart("timeStamp")
			s.TimeStamp.Encode(e, json.EncodeDateTime)
		}
	}
	{
		if s.BuyOrders.Set {
			e.FieldStart("buyOrders")
			s.BuyOrders.Encode(e)
		}
	}
	{
		if s.SellOrders.Set {
			e.FieldStart("sellOrders")
			s.SellOrders.Encode(e)
		}
	}
}

var jsonFieldsNameOfStorageQuickStatus = [12]string{
	0:  "productId",
	1:  "buyPrice",
	2:  "buyVolume",
	3:  "buyMovingWeek",
	4:  "buyOrdersCount",
	5:  "sellPrice",
	6:  "sellVolume",
	7:  "sellMovingWeek",
	8:  "sellOrdersCount",
	9:  "timeStamp",
	10: "buyOrders",
	11: "sellOrders",
}

// Decode decodes StorageQuickStatus from json.
func (s *StorageQuickStatus) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode StorageQuickStatus to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "productId":
			if err := func() error {
				s.ProductId.Reset()
				if err := s.ProductId.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"productId\"")
			}
		case "buyPrice":
			if err := func() error {
				s.BuyPrice.Reset()
				if err := s.BuyPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyPrice\"")
			}
		case "buyVolume":
			if err := func() error {
				s.BuyVolume.Reset()
				if err := s.BuyVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyVolume\"")
			}
		case "buyMovingWeek":
			if err := func() error {
				s.BuyMovingWeek.Reset()
				if err := s.BuyMovingWeek.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyMovingWeek\"")
			}
		case "buyOrdersCount":
			if err := func() error {
				s.BuyOrdersCount.Reset()
				if err := s.BuyOrdersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyOrdersCount\"")
			}
		case "sellPrice":
			if err := func() error {
				s.SellPrice.Reset()
				if err := s.SellPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellPrice\"")
			}
		case "sellVolume":
			if err := func() error {
				s.SellVolume.Reset()
				if err := s.SellVolume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellVolume\"")
			}
		case "sellMovingWeek":
			if err := func() error {
				s.SellMovingWeek.Reset()
				if err := s.SellMovingWeek.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellMovingWeek\"")
			}
		case "sellOrdersCount":
			if err := func() error {
				s.SellOrdersCount.Reset()
				if err := s.SellOrdersCount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellOrdersCount\"")
			}
		case "timeStamp":
			if err := func() error {
				s.TimeStamp.Reset()
				if err := s.TimeStamp.Decode(d, json.DecodeDateTime); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"timeStamp\"")
			}
		case "buyOrders":
			if err := func() error {
				s.BuyOrders.Reset()
				if err := s.BuyOrders.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"buyOrders\"")
			}
		case "sellOrders":
			if err := func() error {
				s.SellOrders.Reset()
				if err := s.SellOrders.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellOrders\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode StorageQuickStatus")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *StorageQuickStatus) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *StorageQuickStatus) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *SupplyElement) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *SupplyElement) encodeFields(e *jx.Encoder) {
	{
		if s.Tag.Set {
			e.FieldStart("tag")
			s.Tag.Encode(e)
		}
	}
	{
		if s.Supply.Set {
			e.FieldStart("supply")
			s.Supply.Encode(e)
		}
	}
	{
		if s.Median.Set {
			e.FieldStart("median")
			s.Median.Encode(e)
		}
	}
	{
		if s.LbinData.Set {
			e.FieldStart("lbinData")
			s.LbinData.Encode(e)
		}
	}
	{
		if s.Volume.Set {
			e.FieldStart("volume")
			s.Volume.Encode(e)
		}
	}
}

var jsonFieldsNameOfSupplyElement = [5]string{
	0: "tag",
	1: "supply",
	2: "median",
	3: "lbinData",
	4: "volume",
}

// Decode decodes SupplyElement from json.
func (s *SupplyElement) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode SupplyElement to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "tag":
			if err := func() error {
				s.Tag.Reset()
				if err := s.Tag.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"tag\"")
			}
		case "supply":
			if err := func() error {
				s.Supply.Reset()
				if err := s.Supply.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"supply\"")
			}
		case "median":
			if err := func() error {
				s.Median.Reset()
				if err := s.Median.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"median\"")
			}
		case "lbinData":
			if err := func() error {
				s.LbinData.Reset()
				if err := s.LbinData.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lbinData\"")
			}
		case "volume":
			if err := func() error {
				s.Volume.Reset()
				if err := s.Volume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volume\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode SupplyElement")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *SupplyElement) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *SupplyElement) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode encodes Tier as json.
func (s Tier) Encode(e *jx.Encoder) {
	e.Str(string(s))
}

// Decode decodes Tier from json.
func (s *Tier) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode Tier to nil")
	}
	v, err := d.StrBytes()
	if err != nil {
		return err
	}
	// Try to use constant string.
	switch Tier(v) {
	case TierUNKNOWN:
		*s = TierUNKNOWN
	case TierCOMMON:
		*s = TierCOMMON
	case TierUNCOMMON:
		*s = TierUNCOMMON
	case TierRARE:
		*s = TierRARE
	case TierEPIC:
		*s = TierEPIC
	case TierLEGENDARY:
		*s = TierLEGENDARY
	case TierSPECIAL:
		*s = TierSPECIAL
	case TierVERYSPECIAL:
		*s = TierVERYSPECIAL
	case TierMYTHIC:
		*s = TierMYTHIC
	case TierSUPREME:
		*s = TierSUPREME
	default:
		*s = Tier(v)
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s Tier) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *Tier) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TopUpArguments) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TopUpArguments) encodeFields(e *jx.Encoder) {
	{
		if s.CoinAmount.Set {
			e.FieldStart("coinAmount")
			s.CoinAmount.Encode(e)
		}
	}
	{
		if s.SuccessUrl.Set {
			e.FieldStart("successUrl")
			s.SuccessUrl.Encode(e)
		}
	}
	{
		if s.CancelUrl.Set {
			e.FieldStart("cancelUrl")
			s.CancelUrl.Encode(e)
		}
	}
}

var jsonFieldsNameOfTopUpArguments = [3]string{
	0: "coinAmount",
	1: "successUrl",
	2: "cancelUrl",
}

// Decode decodes TopUpArguments from json.
func (s *TopUpArguments) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TopUpArguments to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "coinAmount":
			if err := func() error {
				s.CoinAmount.Reset()
				if err := s.CoinAmount.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"coinAmount\"")
			}
		case "successUrl":
			if err := func() error {
				s.SuccessUrl.Reset()
				if err := s.SuccessUrl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"successUrl\"")
			}
		case "cancelUrl":
			if err := func() error {
				s.CancelUrl.Reset()
				if err := s.CancelUrl.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cancelUrl\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TopUpArguments")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TopUpArguments) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TopUpArguments) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *TopUpProduct) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *TopUpProduct) encodeFields(e *jx.Encoder) {
	{
		if s.Type.Set {
			e.FieldStart("type")
			s.Type.Encode(e)
		}
	}
	{
		if s.Price.Set {
			e.FieldStart("price")
			s.Price.Encode(e)
		}
	}
	{
		if s.CurrencyCode.Set {
			e.FieldStart("currencyCode")
			s.CurrencyCode.Encode(e)
		}
	}
	{
		if s.ProviderSlug.Set {
			e.FieldStart("providerSlug")
			s.ProviderSlug.Encode(e)
		}
	}
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Title.Set {
			e.FieldStart("title")
			s.Title.Encode(e)
		}
	}
	{
		if s.Slug.Set {
			e.FieldStart("slug")
			s.Slug.Encode(e)
		}
	}
	{
		if s.Description.Set {
			e.FieldStart("description")
			s.Description.Encode(e)
		}
	}
	{
		if s.Cost.Set {
			e.FieldStart("cost")
			s.Cost.Encode(e)
		}
	}
	{
		if s.OwnershipSeconds.Set {
			e.FieldStart("ownershipSeconds")
			s.OwnershipSeconds.Encode(e)
		}
	}
}

var jsonFieldsNameOfTopUpProduct = [10]string{
	0: "type",
	1: "price",
	2: "currencyCode",
	3: "providerSlug",
	4: "id",
	5: "title",
	6: "slug",
	7: "description",
	8: "cost",
	9: "ownershipSeconds",
}

// Decode decodes TopUpProduct from json.
func (s *TopUpProduct) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode TopUpProduct to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "type":
			if err := func() error {
				s.Type.Reset()
				if err := s.Type.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"type\"")
			}
		case "price":
			if err := func() error {
				s.Price.Reset()
				if err := s.Price.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"price\"")
			}
		case "currencyCode":
			if err := func() error {
				s.CurrencyCode.Reset()
				if err := s.CurrencyCode.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"currencyCode\"")
			}
		case "providerSlug":
			if err := func() error {
				s.ProviderSlug.Reset()
				if err := s.ProviderSlug.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"providerSlug\"")
			}
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "title":
			if err := func() error {
				s.Title.Reset()
				if err := s.Title.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"title\"")
			}
		case "slug":
			if err := func() error {
				s.Slug.Reset()
				if err := s.Slug.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slug\"")
			}
		case "description":
			if err := func() error {
				s.Description.Reset()
				if err := s.Description.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"description\"")
			}
		case "cost":
			if err := func() error {
				s.Cost.Reset()
				if err := s.Cost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost\"")
			}
		case "ownershipSeconds":
			if err := func() error {
				s.OwnershipSeconds.Reset()
				if err := s.OwnershipSeconds.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"ownershipSeconds\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode TopUpProduct")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *TopUpProduct) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *TopUpProduct) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *UUID) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *UUID) encodeFields(e *jx.Encoder) {
	{
		if s.ID.Set {
			e.FieldStart("id")
			s.ID.Encode(e)
		}
	}
	{
		if s.Value.Set {
			e.FieldStart("value")
			s.Value.Encode(e)
		}
	}
}

var jsonFieldsNameOfUUID = [2]string{
	0: "id",
	1: "value",
}

// Decode decodes UUID from json.
func (s *UUID) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode UUID to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "id":
			if err := func() error {
				s.ID.Reset()
				if err := s.ID.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"id\"")
			}
		case "value":
			if err := func() error {
				s.Value.Reset()
				if err := s.Value.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"value\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode UUID")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *UUID) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *UUID) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}

// Encode implements json.Marshaler.
func (s *VisibilitySettings) Encode(e *jx.Encoder) {
	e.ObjStart()
	s.encodeFields(e)
	e.ObjEnd()
}

// encodeFields encodes fields.
func (s *VisibilitySettings) encodeFields(e *jx.Encoder) {
	{
		if s.Cost.Set {
			e.FieldStart("cost")
			s.Cost.Encode(e)
		}
	}
	{
		if s.EstProfit.Set {
			e.FieldStart("estProfit")
			s.EstProfit.Encode(e)
		}
	}
	{
		if s.Lbin.Set {
			e.FieldStart("lbin")
			s.Lbin.Encode(e)
		}
	}
	{
		if s.Slbin.Set {
			e.FieldStart("slbin")
			s.Slbin.Encode(e)
		}
	}
	{
		if s.MedPrice.Set {
			e.FieldStart("medPrice")
			s.MedPrice.Encode(e)
		}
	}
	{
		if s.Seller.Set {
			e.FieldStart("seller")
			s.Seller.Encode(e)
		}
	}
	{
		if s.Volume.Set {
			e.FieldStart("volume")
			s.Volume.Encode(e)
		}
	}
	{
		if s.ExtraFields.Set {
			e.FieldStart("extraFields")
			s.ExtraFields.Encode(e)
		}
	}
	{
		if s.AvgSellTime.Set {
			e.FieldStart("avgSellTime")
			s.AvgSellTime.Encode(e)
		}
	}
	{
		if s.ProfitPercent.Set {
			e.FieldStart("profitPercent")
			s.ProfitPercent.Encode(e)
		}
	}
	{
		if s.Profit.Set {
			e.FieldStart("profit")
			s.Profit.Encode(e)
		}
	}
	{
		if s.SellerOpenBtn.Set {
			e.FieldStart("sellerOpenBtn")
			s.SellerOpenBtn.Encode(e)
		}
	}
	{
		if s.Lore.Set {
			e.FieldStart("lore")
			s.Lore.Encode(e)
		}
	}
	{
		if s.Links.Set {
			e.FieldStart("links")
			s.Links.Encode(e)
		}
	}
	{
		if s.CopySuccessMessage.Set {
			e.FieldStart("copySuccessMessage")
			s.CopySuccessMessage.Encode(e)
		}
	}
	{
		if s.HideSold.Set {
			e.FieldStart("hideSold")
			s.HideSold.Encode(e)
		}
	}
}

var jsonFieldsNameOfVisibilitySettings = [16]string{
	0:  "cost",
	1:  "estProfit",
	2:  "lbin",
	3:  "slbin",
	4:  "medPrice",
	5:  "seller",
	6:  "volume",
	7:  "extraFields",
	8:  "avgSellTime",
	9:  "profitPercent",
	10: "profit",
	11: "sellerOpenBtn",
	12: "lore",
	13: "links",
	14: "copySuccessMessage",
	15: "hideSold",
}

// Decode decodes VisibilitySettings from json.
func (s *VisibilitySettings) Decode(d *jx.Decoder) error {
	if s == nil {
		return errors.New("invalid: unable to decode VisibilitySettings to nil")
	}

	if err := d.ObjBytes(func(d *jx.Decoder, k []byte) error {
		switch string(k) {
		case "cost":
			if err := func() error {
				s.Cost.Reset()
				if err := s.Cost.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"cost\"")
			}
		case "estProfit":
			if err := func() error {
				s.EstProfit.Reset()
				if err := s.EstProfit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"estProfit\"")
			}
		case "lbin":
			if err := func() error {
				s.Lbin.Reset()
				if err := s.Lbin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lbin\"")
			}
		case "slbin":
			if err := func() error {
				s.Slbin.Reset()
				if err := s.Slbin.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"slbin\"")
			}
		case "medPrice":
			if err := func() error {
				s.MedPrice.Reset()
				if err := s.MedPrice.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"medPrice\"")
			}
		case "seller":
			if err := func() error {
				s.Seller.Reset()
				if err := s.Seller.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"seller\"")
			}
		case "volume":
			if err := func() error {
				s.Volume.Reset()
				if err := s.Volume.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"volume\"")
			}
		case "extraFields":
			if err := func() error {
				s.ExtraFields.Reset()
				if err := s.ExtraFields.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"extraFields\"")
			}
		case "avgSellTime":
			if err := func() error {
				s.AvgSellTime.Reset()
				if err := s.AvgSellTime.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"avgSellTime\"")
			}
		case "profitPercent":
			if err := func() error {
				s.ProfitPercent.Reset()
				if err := s.ProfitPercent.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profitPercent\"")
			}
		case "profit":
			if err := func() error {
				s.Profit.Reset()
				if err := s.Profit.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"profit\"")
			}
		case "sellerOpenBtn":
			if err := func() error {
				s.SellerOpenBtn.Reset()
				if err := s.SellerOpenBtn.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"sellerOpenBtn\"")
			}
		case "lore":
			if err := func() error {
				s.Lore.Reset()
				if err := s.Lore.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"lore\"")
			}
		case "links":
			if err := func() error {
				s.Links.Reset()
				if err := s.Links.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"links\"")
			}
		case "copySuccessMessage":
			if err := func() error {
				s.CopySuccessMessage.Reset()
				if err := s.CopySuccessMessage.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"copySuccessMessage\"")
			}
		case "hideSold":
			if err := func() error {
				s.HideSold.Reset()
				if err := s.HideSold.Decode(d); err != nil {
					return err
				}
				return nil
			}(); err != nil {
				return errors.Wrap(err, "decode field \"hideSold\"")
			}
		default:
			return errors.Errorf("unexpected field %q", k)
		}
		return nil
	}); err != nil {
		return errors.Wrap(err, "decode VisibilitySettings")
	}

	return nil
}

// MarshalJSON implements stdjson.Marshaler.
func (s *VisibilitySettings) MarshalJSON() ([]byte, error) {
	e := jx.Encoder{}
	s.Encode(&e)
	return e.Bytes(), nil
}

// UnmarshalJSON implements stdjson.Unmarshaler.
func (s *VisibilitySettings) UnmarshalJSON(data []byte) error {
	d := jx.DecodeBytes(data)
	return s.Decode(d)
}
