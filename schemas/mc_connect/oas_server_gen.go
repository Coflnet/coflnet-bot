// Code generated by ogen, DO NOT EDIT.

package mc_connect

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// ConnectMinecraftMcUuidGet implements GET /Connect/minecraft/{mcUuid} operation.
	//
	// GET /Connect/minecraft/{mcUuid}
	ConnectMinecraftMcUuidGet(ctx context.Context, params ConnectMinecraftMcUuidGetParams) (*User, error)
	// ConnectUserUserIdGet implements GET /Connect/user/{userId} operation.
	//
	// GET /Connect/user/{userId}
	ConnectUserUserIdGet(ctx context.Context, params ConnectUserUserIdGetParams) (*User, error)
	// ConnectUserUserIdPost implements POST /Connect/user/{userId} operation.
	//
	// POST /Connect/user/{userId}
	ConnectUserUserIdPost(ctx context.Context, params ConnectUserUserIdPostParams) (*ConnectionRequest, error)
	// ConnectUserUserIdVerifyPost implements POST /Connect/user/{userId}/verify operation.
	//
	// POST /Connect/user/{userId}/verify
	ConnectUserUserIdVerifyPost(ctx context.Context, params ConnectUserUserIdVerifyPostParams) error
	// ConnectUsersConnectedGet implements GET /Connect/users/connected operation.
	//
	// Get all users stored which may or may not have a connected account.
	//
	// GET /Connect/users/connected
	ConnectUsersConnectedGet(ctx context.Context, params ConnectUsersConnectedGetParams) ([]User, error)
	// ConnectUsersGet implements GET /Connect/users operation.
	//
	// Get all users stored which may or may not have a connected account.
	//
	// GET /Connect/users
	ConnectUsersGet(ctx context.Context, params ConnectUsersGetParams) ([]User, error)
	// ConnectUsersIdsGet implements GET /Connect/users/ids operation.
	//
	// Get all users which ids is in the list.
	//
	// GET /Connect/users/ids
	ConnectUsersIdsGet(ctx context.Context, params ConnectUsersIdsGetParams) ([]User, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
