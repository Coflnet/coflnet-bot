// Code generated by ogen, DO NOT EDIT.

package mc_connect

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// ConnectMinecraftMcUuidGetParams is parameters of GET /Connect/minecraft/{mcUuid} operation.
type ConnectMinecraftMcUuidGetParams struct {
	McUuid string
}

func unpackConnectMinecraftMcUuidGetParams(packed middleware.Parameters) (params ConnectMinecraftMcUuidGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "mcUuid",
			In:   "path",
		}
		params.McUuid = packed[key].(string)
	}
	return params
}

func decodeConnectMinecraftMcUuidGetParams(args [1]string, r *http.Request) (params ConnectMinecraftMcUuidGetParams, _ error) {
	// Decode path: mcUuid.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "mcUuid",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.McUuid = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "mcUuid",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ConnectUserUserIdGetParams is parameters of GET /Connect/user/{userId} operation.
type ConnectUserUserIdGetParams struct {
	UserId string
}

func unpackConnectUserUserIdGetParams(packed middleware.Parameters) (params ConnectUserUserIdGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	return params
}

func decodeConnectUserUserIdGetParams(args [1]string, r *http.Request) (params ConnectUserUserIdGetParams, _ error) {
	// Decode path: userId.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// ConnectUserUserIdPostParams is parameters of POST /Connect/user/{userId} operation.
type ConnectUserUserIdPostParams struct {
	UserId string
	McUuid OptString
}

func unpackConnectUserUserIdPostParams(packed middleware.Parameters) (params ConnectUserUserIdPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "mcUuid",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.McUuid = v.(OptString)
		}
	}
	return params
}

func decodeConnectUserUserIdPostParams(args [1]string, r *http.Request) (params ConnectUserUserIdPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: userId.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: mcUuid.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "mcUuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMcUuidVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMcUuidVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.McUuid.SetTo(paramsDotMcUuidVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "mcUuid",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ConnectUserUserIdVerifyPostParams is parameters of POST /Connect/user/{userId}/verify operation.
type ConnectUserUserIdVerifyPostParams struct {
	UserId string
	McUuid OptString
}

func unpackConnectUserUserIdVerifyPostParams(packed middleware.Parameters) (params ConnectUserUserIdVerifyPostParams) {
	{
		key := middleware.ParameterKey{
			Name: "userId",
			In:   "path",
		}
		params.UserId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "mcUuid",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.McUuid = v.(OptString)
		}
	}
	return params
}

func decodeConnectUserUserIdVerifyPostParams(args [1]string, r *http.Request) (params ConnectUserUserIdVerifyPostParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode path: userId.
	if err := func() error {
		param, err := url.PathUnescape(args[0])
		if err != nil {
			return errors.Wrap(err, "unescape path")
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "userId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.UserId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "userId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode query: mcUuid.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "mcUuid",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotMcUuidVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotMcUuidVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.McUuid.SetTo(paramsDotMcUuidVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "mcUuid",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ConnectUsersConnectedGetParams is parameters of GET /Connect/users/connected operation.
type ConnectUsersConnectedGetParams struct {
	Amount OptInt32
	Offset OptInt32
}

func unpackConnectUsersConnectedGetParams(packed middleware.Parameters) (params ConnectUsersConnectedGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "amount",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Amount = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	return params
}

func decodeConnectUsersConnectedGetParams(args [0]string, r *http.Request) (params ConnectUsersConnectedGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: amount.
	{
		val := int32(1000)
		params.Amount.SetTo(val)
	}
	// Decode query: amount.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "amount",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAmountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotAmountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Amount.SetTo(paramsDotAmountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "amount",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ConnectUsersGetParams is parameters of GET /Connect/users operation.
type ConnectUsersGetParams struct {
	Amount OptInt32
	Offset OptInt32
}

func unpackConnectUsersGetParams(packed middleware.Parameters) (params ConnectUsersGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "amount",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Amount = v.(OptInt32)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "offset",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.Offset = v.(OptInt32)
		}
	}
	return params
}

func decodeConnectUsersGetParams(args [0]string, r *http.Request) (params ConnectUsersGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Set default value for query: amount.
	{
		val := int32(1000)
		params.Amount.SetTo(val)
	}
	// Decode query: amount.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "amount",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotAmountVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotAmountVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Amount.SetTo(paramsDotAmountVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "amount",
			In:   "query",
			Err:  err,
		}
	}
	// Set default value for query: offset.
	{
		val := int32(0)
		params.Offset.SetTo(val)
	}
	// Decode query: offset.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "offset",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotOffsetVal int32
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToInt32(val)
					if err != nil {
						return err
					}

					paramsDotOffsetVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.Offset.SetTo(paramsDotOffsetVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "offset",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// ConnectUsersIdsGetParams is parameters of GET /Connect/users/ids operation.
type ConnectUsersIdsGetParams struct {
	ExternalIds []string
}

func unpackConnectUsersIdsGetParams(packed middleware.Parameters) (params ConnectUsersIdsGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "externalIds",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.ExternalIds = v.([]string)
		}
	}
	return params
}

func decodeConnectUsersIdsGetParams(args [0]string, r *http.Request) (params ConnectUsersIdsGetParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	// Decode query: externalIds.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "externalIds",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				return d.DecodeArray(func(d uri.Decoder) error {
					var paramsDotExternalIdsVal string
					if err := func() error {
						val, err := d.DecodeValue()
						if err != nil {
							return err
						}

						c, err := conv.ToString(val)
						if err != nil {
							return err
						}

						paramsDotExternalIdsVal = c
						return nil
					}(); err != nil {
						return err
					}
					params.ExternalIds = append(params.ExternalIds, paramsDotExternalIdsVal)
					return nil
				})
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "externalIds",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
