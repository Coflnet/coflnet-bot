// Code generated by ogen, DO NOT EDIT.

package chat

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APIChatInternalClientPost implements POST /api/Chat/internal/client operation.
	//
	// Create a nw Client.
	//
	// POST /api/Chat/internal/client
	APIChatInternalClientPost(ctx context.Context, req *APIChatInternalClientPostReqApplicationJSON) (*APIChatInternalClientPostOKApplicationJSON, error)
	// APIChatMuteDelete implements DELETE /api/Chat/mute operation.
	//
	// Create a new mute for an user.
	//
	// DELETE /api/Chat/mute
	APIChatMuteDelete(ctx context.Context, req *APIChatMuteDeleteReqApplicationJSON) (*APIChatMuteDeleteOKApplicationJSON, error)
	// APIChatMutePost implements POST /api/Chat/mute operation.
	//
	// Create a new mute for an user.
	//
	// POST /api/Chat/mute
	APIChatMutePost(ctx context.Context, req *APIChatMutePostReqApplicationJSON) (*APIChatMutePostOKApplicationJSON, error)
	// APIChatSendPost implements POST /api/Chat/send operation.
	//
	// Tracks a flip.
	//
	// POST /api/Chat/send
	APIChatSendPost(ctx context.Context, req *APIChatSendPostReqApplicationJSON) (*APIChatSendPostOKApplicationJSON, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h Handler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		baseServer: s,
	}, nil
}
